# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2021, Qiskit Machine Learning Development Team
# This file is distributed under the same license as the Qiskit Machine
# Learning package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Machine Learning 0.1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 21:48+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../stubs/qiskit_machine_learning.QiskitMachineLearningError.rst:4
msgid "QiskitMachineLearningError"
msgstr ""

#: of qiskit_machine_learning.exceptions.QiskitMachineLearningError:1
msgid "Class for errors returned by Qiskit's machine learning module."
msgstr ""

#: of qiskit_machine_learning.exceptions.QiskitMachineLearningError:3
msgid "Set the error message."
msgstr ""

#: of qiskit_machine_learning.QiskitMachineLearningError.with_traceback:1
msgid ""
"Exception.with_traceback(tb) -- set self.__traceback__ to tb and return "
"self."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:4
msgid "DiscriminativeNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork:1
msgid "Base class for discriminative Quantum or Classical Neural Networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork:3
msgid ""
"This method should initialize the module but raise an exception if a "
"required component of the module is not available."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:21
#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:29
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:32
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:31
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:29
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:29
#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:38
#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:35
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:33
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:32
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:36
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:34
#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:46
#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:30
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:37
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:33
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:33
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:37
msgid "Methods"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
msgid ""
":obj:`DiscriminativeNetwork.get_label "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.get_label>`\\ "
"\\(x\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:1
msgid ""
"Apply quantum/classical neural network to the given input sample and "
"compute the respective data label"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
msgid ""
":obj:`DiscriminativeNetwork.loss "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.loss>`\\ "
"\\(x\\, y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.loss:1
msgid "Loss function used for optimization"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
msgid ""
":obj:`DiscriminativeNetwork.save_model "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model:1
msgid "Save discriminator model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
msgid ""
":obj:`DiscriminativeNetwork.set_seed "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed:1
msgid "Set seed."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
msgid ""
":obj:`DiscriminativeNetwork.train "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.train>`\\ "
"\\(data\\, weights\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:1
msgid "Perform one training step w.r.t to the discriminator's parameters"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.get_label.rst:4
msgid "DiscriminativeNetwork.get_label"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz
#: qiskit.circuit.measure.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration
#: qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.combine
#: qiskit.circuit.quantumcircuit.QuantumCircuit.control
#: qiskit.circuit.quantumcircuit.QuantumCircuit.delay
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all
#: qiskit.circuit.quantumcircuit.QuantumCircuit.power
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements
#: qiskit.circuit.quantumcircuit.QuantumCircuit.repeat
#: qiskit.circuit.quantumcircuit.QuantumCircuit.tensor
#: qiskit.extensions.quantum_initializer.diagonal.diagonal
#: qiskit.extensions.quantum_initializer.initializer.initialize
#: qiskit.extensions.quantum_initializer.isometry.iso
#: qiskit.extensions.quantum_initializer.squ.squ
#: qiskit.extensions.quantum_initializer.uc.uc
#: qiskit.extensions.quantum_initializer.ucrx.ucrx
#: qiskit.extensions.quantum_initializer.ucry.ucry
#: qiskit.extensions.quantum_initializer.ucrz.ucrz
#: qiskit.extensions.simulator.snapshot.snapshot
#: qiskit_machine_learning.algorithms.QSVC.predict_log_proba
#: qiskit_machine_learning.algorithms.QSVC.predict_proba
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.algorithms.regressors.qsvr.QSVR
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN
#: sklearn.base.BaseEstimator.get_params sklearn.base.BaseEstimator.set_params
#: sklearn.base.ClassifierMixin.score sklearn.base.RegressorMixin.score
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseLibSVM.predict
#: sklearn.svm._base.BaseSVC.decision_function
#: sklearn.svm._base.BaseSVC.predict
msgid "Parameters"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:5
msgid "input, i.e. data sample."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz
#: qiskit.circuit.measure.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration
#: qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.combine
#: qiskit.circuit.quantumcircuit.QuantumCircuit.control
#: qiskit.circuit.quantumcircuit.QuantumCircuit.delay
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend
#: qiskit.circuit.quantumcircuit.QuantumCircuit.power
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time
#: qiskit.extensions.quantum_initializer.diagonal.diagonal
#: qiskit.extensions.quantum_initializer.isometry.iso
#: qiskit.extensions.quantum_initializer.squ.squ
#: qiskit.extensions.quantum_initializer.uc.uc
#: qiskit.extensions.quantum_initializer.ucrx.ucrx
#: qiskit.extensions.quantum_initializer.ucry.ucry
#: qiskit.extensions.quantum_initializer.ucrz.ucrz
#: qiskit.extensions.simulator.snapshot.snapshot
#: qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork
#: qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN
msgid "Raises"
msgstr ""

#: of qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:12
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:21
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:15
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:13
msgid "not implemented"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.loss.rst:4
msgid "DiscriminativeNetwork.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:4
msgid "output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:6
msgid "the data point"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:7
msgid "Data weights."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.count_ops
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.size
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction
#: qiskit.circuit.measure.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.combine
#: qiskit.circuit.quantumcircuit.QuantumCircuit.control
#: qiskit.circuit.quantumcircuit.QuantumCircuit.decompose
#: qiskit.circuit.quantumcircuit.QuantumCircuit.delay
#: qiskit.circuit.quantumcircuit.QuantumCircuit.draw
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all
#: qiskit.circuit.quantumcircuit.QuantumCircuit.power
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements
#: qiskit.circuit.quantumcircuit.QuantumCircuit.repeat
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops
#: qiskit.circuit.quantumcircuit.QuantumCircuit.tensor
#: qiskit.circuit.quantumcircuit.QuantumCircuit.width
#: qiskit.extensions.quantum_initializer.diagonal.diagonal
#: qiskit.extensions.quantum_initializer.initializer.initialize
#: qiskit.extensions.quantum_initializer.isometry.iso
#: qiskit.extensions.quantum_initializer.squ.squ
#: qiskit.extensions.quantum_initializer.uc.uc
#: qiskit.extensions.quantum_initializer.ucrx.ucrx
#: qiskit.extensions.quantum_initializer.ucry.ucry
#: qiskit.extensions.quantum_initializer.ucrz.ucrz
#: qiskit.extensions.simulator.snapshot.snapshot
#: qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.QSVC.predict_log_proba
#: qiskit_machine_learning.algorithms.QSVC.predict_proba
#: qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.circuit.library.RawFeatureVector.data
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: sklearn.base.BaseEstimator.get_params sklearn.base.BaseEstimator.set_params
#: sklearn.base.ClassifierMixin.score sklearn.base.RegressorMixin.score
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseLibSVM.predict
#: sklearn.svm._base.BaseSVC.decision_function
#: sklearn.svm._base.BaseSVC.predict
msgid "Returns"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:10
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:10
msgid "Loss w.r.t to the generated data points."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.save_model.rst:4
msgid "DiscriminativeNetwork.save_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:4
msgid "Directory to save the model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.set_seed.rst:4
msgid "DiscriminativeNetwork.set_seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed:4
msgid "seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.train.rst:4
msgid "DiscriminativeNetwork.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:4
msgid "Data batch."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:6
msgid "Data sample weights."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:8
msgid ""
"Indicate whether or not penalty function is applied to the loss function."
" Ignored if no penalty function defined."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:11
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:11
msgid "used to run Quantum network. Ignored for a classical network."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:15
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:15
msgid ""
"Number of shots for hardware or qasm execution. Ignored for classical "
"network"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:18
msgid "with discriminator loss and updated parameters."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.count_ops
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.size
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction
#: qiskit.circuit.measure.measure
#: qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.combine
#: qiskit.circuit.quantumcircuit.QuantumCircuit.control
#: qiskit.circuit.quantumcircuit.QuantumCircuit.decompose
#: qiskit.circuit.quantumcircuit.QuantumCircuit.delay
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str
#: qiskit.circuit.quantumcircuit.QuantumCircuit.has_register
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all
#: qiskit.circuit.quantumcircuit.QuantumCircuit.power
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time
#: qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements
#: qiskit.circuit.quantumcircuit.QuantumCircuit.repeat
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops
#: qiskit.circuit.quantumcircuit.QuantumCircuit.tensor
#: qiskit.circuit.quantumcircuit.QuantumCircuit.width
#: qiskit.extensions.quantum_initializer.diagonal.diagonal
#: qiskit.extensions.quantum_initializer.initializer.initialize
#: qiskit.extensions.quantum_initializer.isometry.iso
#: qiskit.extensions.quantum_initializer.squ.squ
#: qiskit.extensions.quantum_initializer.uc.uc
#: qiskit.extensions.quantum_initializer.ucrx.ucrx
#: qiskit.extensions.quantum_initializer.ucry.ucry
#: qiskit.extensions.quantum_initializer.ucrz.ucrz
#: qiskit.extensions.simulator.snapshot.snapshot
#: qiskit_machine_learning.algorithms.NeuralNetworkClassifier.warm_start
#: qiskit_machine_learning.algorithms.NeuralNetworkRegressor.warm_start
#: qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.QGAN.backend
#: qiskit_machine_learning.algorithms.QGAN.d_loss
#: qiskit_machine_learning.algorithms.QGAN.g_loss
#: qiskit_machine_learning.algorithms.QGAN.quantum_instance
#: qiskit_machine_learning.algorithms.QGAN.rel_entr
#: qiskit_machine_learning.algorithms.QSVC.predict_log_proba
#: qiskit_machine_learning.algorithms.QSVC.predict_proba
#: qiskit_machine_learning.algorithms.QSVC.quantum_kernel
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel
#: qiskit_machine_learning.algorithms.QuantumGenerator.discriminator
#: qiskit_machine_learning.algorithms.QuantumGenerator.optimizer
#: qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values
#: qiskit_machine_learning.algorithms.QuantumGenerator.seed
#: qiskit_machine_learning.algorithms.VQC.ansatz
#: qiskit_machine_learning.algorithms.VQC.circuit
#: qiskit_machine_learning.algorithms.VQC.feature_map
#: qiskit_machine_learning.algorithms.VQC.num_qubits
#: qiskit_machine_learning.algorithms.VQC.warm_start
#: qiskit_machine_learning.algorithms.VQR.ansatz
#: qiskit_machine_learning.algorithms.VQR.feature_map
#: qiskit_machine_learning.algorithms.VQR.num_qubits
#: qiskit_machine_learning.algorithms.VQR.warm_start
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.circuit.library.RawFeatureVector.data
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_parameters
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits
#: qiskit_machine_learning.circuit.library.RawFeatureVector.parameters
#: qiskit_machine_learning.kernels.QuantumKernel.feature_map
#: qiskit_machine_learning.kernels.QuantumKernel.quantum_instance
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit
#: qiskit_machine_learning.neural_networks.CircuitQNN.input_params
#: qiskit_machine_learning.neural_networks.CircuitQNN.num_inputs
#: qiskit_machine_learning.neural_networks.CircuitQNN.num_weights
#: qiskit_machine_learning.neural_networks.CircuitQNN.output_shape
#: qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance
#: qiskit_machine_learning.neural_networks.CircuitQNN.sampling
#: qiskit_machine_learning.neural_networks.CircuitQNN.sparse
#: qiskit_machine_learning.neural_networks.CircuitQNN.weight_params
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights
#: qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape
#: qiskit_machine_learning.neural_networks.NeuralNetwork.sparse
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_inputs
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_weights
#: qiskit_machine_learning.neural_networks.OpflowQNN.output_shape
#: qiskit_machine_learning.neural_networks.OpflowQNN.sparse
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_inputs
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_weights
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.output_shape
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sparse
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_inputs
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_weights
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.output_shape
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.sparse
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: sklearn.base.BaseEstimator.get_params sklearn.base.BaseEstimator.set_params
#: sklearn.base.ClassifierMixin.score sklearn.base.RegressorMixin.score
#: sklearn.svm._base.BaseLibSVM.fit sklearn.svm._base.BaseLibSVM.predict
#: sklearn.svm._base.BaseSVC.decision_function
#: sklearn.svm._base.BaseSVC.predict
msgid "Return type"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:4
msgid "GenerativeNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork:1
msgid "Base class for generative Quantum and Classical Neural Networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork:3
msgid ""
"This method should initialize the module, but raise an exception if a "
"required component of the module is not available."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:17
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:17
#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:17
#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:17
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:17
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:17
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:17
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:17
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:17
msgid "Attributes"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:27:<autosummary>:1
msgid ""
":obj:`GenerativeNetwork.parameter_values "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:27:<autosummary>:1
#: of qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values:1
msgid "Get parameter values from the generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
msgid ""
":obj:`GenerativeNetwork.get_output "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.get_output>`\\ "
"\\(quantum\\_instance\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:1
msgid ""
"Apply quantum/classical neural network to given input and get the "
"respective output"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
msgid ""
":obj:`GenerativeNetwork.loss "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.loss>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
msgid ""
":obj:`GenerativeNetwork.train "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.train>`\\ "
"\\(\\[quantum\\_instance\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:1
msgid "Perform one training step w.r.t to the generator's parameters"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.get_output.rst:4
msgid "GenerativeNetwork.get_output"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:8
msgid "Quantum Instance, used to run the generator circuit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:6
msgid ""
"parameters which should be used to run the generator, if None use "
"self._params"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:9
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:14
msgid ""
"if not None use a number of shots that is different from the number set "
"in quantum_instance"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:12
msgid ""
":py:data:`~typing.Tuple`\\[:py:class:`~typing.List`, "
":py:class:`~typing.List`]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:13
msgid "Neural network output"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.loss.rst:4
msgid "GenerativeNetwork.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values.rst:4
msgid "GenerativeNetwork.parameter_values"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.train.rst:4
msgid "GenerativeNetwork.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:3
msgid "used to run generator network. Ignored for a classical network."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:10
msgid "generator loss and updated parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:4
msgid "NeuralNetworkClassifier"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:1
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:1
msgid "Quantum neural network classifier."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:4
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:4
msgid ""
"An instance of an quantum neural network. If the neural network has a "
"one-dimensional output, i.e., `neural_network.output_shape=(1,)`, then it"
" is expected to return values in [-1, +1] and it can only be used for "
"binary classification. If the output is multi-dimensional, it is assumed "
"that the result is a probability distribution, i.e., that the entries are"
" non-negative and sum up to one. Then there are two options, either one-"
"hot encoding or not. In case of one-hot encoding, each probability vector"
" resulting a neural network is considered as one sample and the loss "
"function is applied to the whole vector. Otherwise, each entry of the "
"probability vector is considered as an individual sample and the loss "
"function is applied to the index and weighted with the corresponding "
"probability."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:15
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:15
msgid ""
"A target loss function to be used in training. Default is `l2`, i.e. L2 "
"loss. Can be given either as a string for 'l1', 'l2', 'cross_entropy', "
"'cross_entropy_sigmoid', or as a loss function implementing the Loss "
"interface."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:19
msgid ""
"Determines in the case of a multi-dimensional result of the "
"neural_network how to interpret the result. If True it is interpreted as "
"a single one-hot-encoded sample (e.g. for 'CrossEntropy' loss function), "
"and if False as a set of individual predictions with occurrence "
"probabilities (the index would be the prediction and the value the "
"corresponding frequency, e.g. for L1/L2 loss). This option is ignored in "
"case of a one-dimensional output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:26
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:13
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:19
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR:18
msgid "An instance of an optimizer to be used in training."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:28
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:15
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:21
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR:20
msgid "Use weights from previous fit to start next fit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:30
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:23
msgid "unknown loss, invalid neural network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.loss "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.NeuralNetworkClassifier.loss:1
#: qiskit_machine_learning.algorithms.NeuralNetworkClassifier.neural_network:1
#: qiskit_machine_learning.algorithms.NeuralNetworkClassifier.one_hot:1
#: qiskit_machine_learning.algorithms.NeuralNetworkRegressor.loss:1
#: qiskit_machine_learning.algorithms.NeuralNetworkRegressor.neural_network:1
#: qiskit_machine_learning.algorithms.VQC.loss:1
#: qiskit_machine_learning.algorithms.VQC.neural_network:1
#: qiskit_machine_learning.algorithms.VQC.one_hot:1
#: qiskit_machine_learning.algorithms.VQR.loss:1
#: qiskit_machine_learning.algorithms.VQR.neural_network:1
msgid "Returns the underlying neural network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.neural_network "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.one_hot "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.one_hot>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.warm_start "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.warm_start>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.NeuralNetworkClassifier.warm_start:1
#: qiskit_machine_learning.algorithms.NeuralNetworkRegressor.warm_start:1
#: qiskit_machine_learning.algorithms.VQC.warm_start:1
#: qiskit_machine_learning.algorithms.VQR.warm_start:1
msgid "Returns the warm start flag."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.fit "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.fit>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:1
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:1
msgid "Fit the model to data matrix X and target(s) y."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.predict "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:1
msgid "Predict using the network specified to the classifier."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
msgid ""
":obj:`NeuralNetworkClassifier.score "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.score>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:1
#: sklearn.base.ClassifierMixin.score:1
msgid "Return the mean accuracy on the given test data and labels."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.fit.rst:4
msgid "NeuralNetworkClassifier.fit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:4
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:4
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:4
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:4
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:4
msgid "The input data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:6
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:6
msgid "The target values."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:8
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:8
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:8
msgid "returns a trained classifier."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:11
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:11
msgid "In case of invalid data (e.g. incompatible with network)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.loss.rst:4
msgid "NeuralNetworkClassifier.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.neural_network.rst:4
msgid "NeuralNetworkClassifier.neural_network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.one_hot.rst:4
msgid "NeuralNetworkClassifier.one_hot"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.predict.rst:4
msgid "NeuralNetworkClassifier.predict"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:6
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:8
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:8
msgid "Model needs to be fit to some training data first"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:8
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:8
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:14
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:11
msgid ":py:class:`~numpy.ndarray`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:9
msgid "The predicted classes."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.score.rst:4
msgid "NeuralNetworkClassifier.score"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:4
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:4
#: sklearn.base.ClassifierMixin.score:7
msgid "Test samples."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:6
#: sklearn.base.ClassifierMixin.score:9
msgid "True labels for `X`."
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.seed:3
#: qiskit_machine_learning.algorithms.VQC.num_qubits:3
#: qiskit_machine_learning.algorithms.VQR.num_qubits:3
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:10
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:10
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:3
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_parameters:3
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.num_inputs:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.num_weights:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights:3
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_inputs:3
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_weights:3
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_inputs:3
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_weights:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_inputs:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_weights:3
msgid ":py:class:`int`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:11
msgid "Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.warm_start.rst:4
msgid "NeuralNetworkClassifier.warm_start"
msgstr ""

#: of qiskit_machine_learning.algorithms.NeuralNetworkClassifier.warm_start:3
#: qiskit_machine_learning.algorithms.NeuralNetworkRegressor.warm_start:3
#: qiskit_machine_learning.algorithms.VQC.warm_start:3
#: qiskit_machine_learning.algorithms.VQR.warm_start:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.sampling:5
#: qiskit_machine_learning.neural_networks.CircuitQNN.sparse:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.sparse:3
#: qiskit_machine_learning.neural_networks.OpflowQNN.sparse:3
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling:5
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sparse:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.sparse:3
msgid ":py:class:`bool`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:4
msgid "NeuralNetworkRegressor"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:1
msgid "Quantum neural network regressor"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.loss "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.neural_network "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.warm_start "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.warm_start>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.fit "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.fit>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.predict "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:1
msgid "Predict using the network specified to the regression."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
msgid ""
":obj:`NeuralNetworkRegressor.score "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.score>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:37:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:1
msgid "Return R-squared on the given test data and targeted values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.fit.rst:4
msgid "NeuralNetworkRegressor.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.loss.rst:4
msgid "NeuralNetworkRegressor.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.neural_network.rst:4
msgid "NeuralNetworkRegressor.neural_network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.predict.rst:4
msgid "NeuralNetworkRegressor.predict"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:9
msgid "The predicted values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.score.rst:4
msgid "NeuralNetworkRegressor.score"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:6
msgid "True target values given `X`."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:11
msgid "R-squared value."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.warm_start.rst:4
msgid "NeuralNetworkRegressor.warm_start"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:4
msgid "NumPyDiscriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:1
msgid "Discriminator based on NumPy"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:4
msgid "Dimension of input data vector."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:6
msgid "Dimension of the discriminator's output vector."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:27:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.discriminator_net "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:27:<autosummary>:1
#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net:1
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net:1
msgid "Get discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.get_label "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.get_label>`\\ "
"\\(x\\[\\, detach\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:1
msgid "Get data sample labels, i.e. true or fake."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.load_model "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.load_model>`\\ "
"\\(load\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model:1
msgid "Load discriminator model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.loss "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.loss>`\\ \\(x\\, "
"y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:1
msgid "Loss function"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.save_model "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.set_seed "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:38:<autosummary>:1
msgid ""
":obj:`NumPyDiscriminator.train "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.train>`\\ "
"\\(data\\, weights\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net.rst:4
msgid "NumPyDiscriminator.discriminator_net"
msgstr ""

#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net:3
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net:3
msgid "discriminator object"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.get_label.rst:4
msgid "NumPyDiscriminator.get_label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:3
msgid "Discriminator input, i.e. data sample."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:5
msgid "depreciated for numpy network"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:8
msgid "Discriminator output, i.e. data label"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.load_model.rst:4
msgid "NumPyDiscriminator.load_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model:4
msgid "file with stored pytorch discriminator model to be loaded"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.loss.rst:4
msgid "NumPyDiscriminator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:3
msgid "sample label (equivalent to discriminator output)"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:5
msgid "target label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:7
msgid "customized scaling for each sample (optional)"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:10
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:8
msgid "loss function"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.save_model.rst:4
msgid "NumPyDiscriminator.save_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model:4
msgid "directory path for saving the model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.set_seed.rst:4
msgid "NumPyDiscriminator.set_seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.set_seed:1
msgid "Set seed. :param seed: seed :type seed: int"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.train.rst:4
msgid "NumPyDiscriminator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:3
msgid ""
"real_batch: array, Training data batch. generated_batch: array, Generated"
" data batch."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:6
msgid "real problem, generated problem"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:10
msgid "Depreciated for classical networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:12
msgid ""
"Number of shots for hardware or qasm execution. Ignored for classical "
"networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:16
msgid "with Discriminator loss and updated parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:4
msgid "PyTorchDiscriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:1
msgid "Discriminator based on PyTorch"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:8
msgid "Pytorch not installed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:27:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.discriminator_net "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.get_label "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.get_label>`\\ "
"\\(x\\[\\, detach\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.gradient_penalty "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.gradient_penalty>`\\"
" \\(x\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:1
msgid "Compute gradient penalty for discriminator optimization"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.load_model "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.load_model>`\\ "
"\\(load\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.loss "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.loss>`\\ \\(x\\,"
" y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.save_model "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.set_seed "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`PyTorchDiscriminator.train "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.train>`\\ "
"\\(data\\, weights\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net.rst:4
msgid "PyTorchDiscriminator.discriminator_net"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.get_label.rst:4
msgid "PyTorchDiscriminator.get_label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:5
msgid "if None detach from torch tensor variable (optional)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.gradient_penalty.rst:4
msgid "PyTorchDiscriminator.gradient_penalty"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:3
msgid "Generated data sample."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:5
msgid "Gradient penalty coefficient 1."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:7
msgid "Gradient penalty coefficient 2."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:9
msgid "Gradient penalty coefficient 3."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:12
msgid "Gradient penalty."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.load_model.rst:4
msgid "PyTorchDiscriminator.load_model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.loss.rst:4
msgid "PyTorchDiscriminator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:3
msgid "Discriminator output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:5
msgid "Label of the data point"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.save_model.rst:4
msgid "PyTorchDiscriminator.save_model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.set_seed.rst:4
msgid "PyTorchDiscriminator.set_seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.train.rst:4
msgid "PyTorchDiscriminator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:18
msgid ""
"with discriminator loss and updated parameters.data, weights, "
"penalty=True,   quantum_instance=None, shots=None) -> Dict[str, Any]:"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:20
msgid ""
"with discriminator loss and updated parameters.data, weights, "
"penalty=True,"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:21
msgid "quantum_instance=None, shots=None) -> Dict[str, Any]:"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:4
msgid "QGAN"
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:1
msgid "The Quantum Generative Adversarial Network algorithm."
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:3
msgid ""
"The qGAN [1] is a hybrid quantum-classical algorithm used for generative "
"modeling tasks."
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:5
msgid ""
"This adaptive algorithm uses the interplay of a generative "
":class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a"
" discriminative "
":class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork` "
"network to learn the probability distribution underlying given training "
"data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:10
msgid ""
"These networks are trained in alternating optimization steps, where the "
"discriminator tries to differentiate between training data samples and "
"data samples from the generator and the generator aims at generating "
"samples which the discriminator classifies as training data samples. "
"Eventually, the quantum generator learns the training data's underlying "
"probability distribution. The trained quantum generator loads a quantum "
"state which is a model of the target distribution."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:17
msgid "**References:**"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:21
msgid "[1] Zoufal et al.,"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:20
msgid ""
"`Quantum Generative Adversarial Networks for learning and loading random "
"distributions <https://www.nature.com/articles/s41534-019-0223-2>`_"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:24
msgid "Training data of dimension k"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:26
msgid ""
"k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]] if univariate"
" data: [min_0,max_0]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:29
msgid ""
"k numbers of qubits to determine representation resolution, i.e. n qubits"
" enable the representation of 2**n values [num_qubits_0,..., "
"num_qubits_k-1]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:33
msgid "Batch size, has a min. value of 1."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:35
msgid "Number of training epochs"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:37
msgid "Random number seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:39
msgid "Discriminates between real and fake data samples"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:41
msgid "Generates 'fake' data samples"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:43
msgid ""
"Set tolerance level for relative entropy. If the training achieves "
"relative entropy equal or lower than tolerance it finishes."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:46
msgid ""
"Directory in to which to store cvs file with parameters, if None "
"(default) then no cvs file is created."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:49
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:28
msgid "Quantum Instance or Backend"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:51
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:15
msgid "invalid input"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.backend <qiskit_machine_learning.algorithms.QGAN.backend>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.backend:1
msgid "Returns backend."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.d_loss <qiskit_machine_learning.algorithms.QGAN.d_loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.d_loss:1
msgid "Returns discriminator loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ""
":obj:`QGAN.discriminator "
"<qiskit_machine_learning.algorithms.QGAN.discriminator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.discriminator:1
msgid "Returns discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.g_loss <qiskit_machine_learning.algorithms.QGAN.g_loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.g_loss:1
msgid "Returns generator loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ""
":obj:`QGAN.generator "
"<qiskit_machine_learning.algorithms.QGAN.generator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.generator:1
msgid "Returns generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ""
":obj:`QGAN.quantum_instance "
"<qiskit_machine_learning.algorithms.QGAN.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.quantum_instance:1
msgid "Returns quantum instance."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.random <qiskit_machine_learning.algorithms.QGAN.random>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.random:1
msgid "Return a numpy random."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.rel_entr <qiskit_machine_learning.algorithms.QGAN.rel_entr>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.rel_entr:1
msgid "Returns relative entropy between target and trained distribution"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ":obj:`QGAN.seed <qiskit_machine_learning.algorithms.QGAN.seed>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.seed:1
msgid "Returns random seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
msgid ""
":obj:`QGAN.tol_rel_ent "
"<qiskit_machine_learning.algorithms.QGAN.tol_rel_ent>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:36:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.tol_rel_ent:1
msgid "Returns tolerance for relative entropy"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ""
":obj:`QGAN.get_rel_entr "
"<qiskit_machine_learning.algorithms.QGAN.get_rel_entr>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr:1
msgid "Get relative entropy between target and trained distribution"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ""
":obj:`QGAN.run <qiskit_machine_learning.algorithms.QGAN.run>`\\ "
"\\(\\[quantum\\_instance\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid "Execute the algorithm with selected backend."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ""
":obj:`QGAN.set_backend "
"<qiskit_machine_learning.algorithms.QGAN.set_backend>`\\ \\(backend\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend:1
msgid "Sets backend with configuration."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ""
":obj:`QGAN.set_discriminator "
"<qiskit_machine_learning.algorithms.QGAN.set_discriminator>`\\ "
"\\(\\[discriminator\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator:1
msgid "Initialize discriminator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ""
":obj:`QGAN.set_generator "
"<qiskit_machine_learning.algorithms.QGAN.set_generator>`\\ "
"\\(\\[generator\\_circuit\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:1
msgid "Initialize generator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
msgid ":obj:`QGAN.train <qiskit_machine_learning.algorithms.QGAN.train>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:47:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train:1
msgid "Train the qGAN"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.backend.rst:4
msgid "QGAN.backend"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.backend:3
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~qiskit.providers.backend.Backend`,"
" :py:class:`~qiskit.providers.basebackend.BaseBackend`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.d_loss.rst:4
msgid "QGAN.d_loss"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.d_loss:3
#: qiskit_machine_learning.algorithms.QGAN.g_loss:3
#: qiskit_machine_learning.algorithms.QGAN.rel_entr:3
msgid ":py:class:`~typing.List`\\[:py:class:`float`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.discriminator.rst:4
msgid "QGAN.discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.g_loss.rst:4
msgid "QGAN.g_loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.generator.rst:4
msgid "QGAN.generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.get_rel_entr.rst:4
msgid "QGAN.get_rel_entr"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr:4
msgid ":py:class:`float`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.quantum_instance.rst:4
msgid "QGAN.quantum_instance"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.quantum_instance:3
msgid ":py:data:`~typing.Optional`\\[:py:class:`~qiskit.utils.quantum_instance.QuantumInstance`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.random.rst:4
msgid "QGAN.random"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rel_entr.rst:4
msgid "QGAN.rel_entr"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.run.rst:4
msgid "QGAN.run"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:1
msgid ""
"Execute the algorithm with selected backend. :type quantum_instance: "
":py:data:`~typing.Union`\\[:py:class:`~qiskit.utils.quantum_instance.QuantumInstance`,"
" :py:class:`~qiskit.providers.basebackend.BaseBackend`, "
":py:class:`~qiskit.providers.backend.Backend`, :py:obj:`None`] :param "
"quantum_instance: the experimental setting. :param kwargs: kwargs :type "
"kwargs: dict"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:7
msgid "results of an algorithm."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:10
msgid "If a quantum instance or     backend has not been provided"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.seed.rst:4
msgid "QGAN.seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_backend.rst:4
msgid "QGAN.set_backend"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend:4
msgid ":py:obj:`None`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_discriminator.rst:4
msgid "QGAN.set_discriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator:3
msgid "discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_generator.rst:4
msgid "QGAN.set_generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:4
msgid ""
"parameterized quantum circuit which sets the structure of the quantum "
"generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:7
msgid "initial parameters for the generator circuit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:9
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:23
msgid "optimizer to be used for the training of the generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:11
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:25
msgid ""
"A Gradient object, or a function returning partial derivatives of the "
"loss function w.r.t. the generator variational params."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.tol_rel_ent.rst:4
msgid "QGAN.tol_rel_ent"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.train.rst:4
msgid "QGAN.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train:3
msgid "Batch size bigger than the number of     items in the truncated data set"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:4
msgid "QSVC"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:1
msgid "Quantum Support Vector Classifier."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:3
msgid ""
"This class shows how to use a quantum kernel for classification. The "
"class extends `sklearn.svm.SVC <https://scikit-"
"learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_, and thus "
"inherits its methods like ``fit`` and ``predict`` used in the example "
"below. Read more in the `sklearn user guide <https://scikit-"
"learn.org/stable/modules/svm.html#svm-classification>`_."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:9
#: qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:9
msgid "**Example**"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:18
msgid "QuantumKernel to be used for classification."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:19
msgid "Variable length argument list to pass to SVC constructor."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:20
msgid "Arbitrary keyword arguments to pass to SVC constructor."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ":obj:`QSVC.coef_ <qiskit_machine_learning.algorithms.QSVC.coef_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ""
":obj:`QSVC.n_support_ "
"<qiskit_machine_learning.algorithms.QSVC.n_support_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ""
":obj:`QSVC.predict_log_proba "
"<qiskit_machine_learning.algorithms.QSVC.predict_log_proba>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QSVC.predict_log_proba:1
msgid "Compute log probabilities of possible outcomes for samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ""
":obj:`QSVC.predict_proba "
"<qiskit_machine_learning.algorithms.QSVC.predict_proba>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QSVC.predict_proba:1
msgid "Compute probabilities of possible outcomes for samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ":obj:`QSVC.probA_ <qiskit_machine_learning.algorithms.QSVC.probA_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ":obj:`QSVC.probB_ <qiskit_machine_learning.algorithms.QSVC.probB_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
msgid ""
":obj:`QSVC.quantum_kernel "
"<qiskit_machine_learning.algorithms.QSVC.quantum_kernel>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:33:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QSVC.quantum_kernel:1
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel:1
msgid "Returns quantum kernel"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.decision_function "
"<qiskit_machine_learning.algorithms.QSVC.decision_function>`\\ \\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: of sklearn.svm._base.BaseSVC.decision_function:1
msgid "Evaluates the decision function for the samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.fit <qiskit_machine_learning.algorithms.QSVC.fit>`\\ \\(X\\, "
"y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
#: of sklearn.svm._base.BaseLibSVM.fit:1
msgid "Fit the SVM model according to the given training data."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.get_params "
"<qiskit_machine_learning.algorithms.QSVC.get_params>`\\ \\(\\[deep\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
#: of sklearn.base.BaseEstimator.get_params:1
msgid "Get parameters for this estimator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.predict <qiskit_machine_learning.algorithms.QSVC.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: of sklearn.svm._base.BaseSVC.predict:1
msgid "Perform classification on samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.score <qiskit_machine_learning.algorithms.QSVC.score>`\\ "
"\\(X\\, y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
msgid ""
":obj:`QSVC.set_params "
"<qiskit_machine_learning.algorithms.QSVC.set_params>`\\ "
"\\(\\*\\*params\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:44:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
#: of sklearn.base.BaseEstimator.set_params:1
msgid "Set the parameters of this estimator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.coef_.rst:4
msgid "QSVC.coef_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.decision_function.rst:4
msgid "QSVC.decision_function"
msgstr ""

#: of sklearn.svm._base.BaseSVC.decision_function:6
msgid ""
"**X** -- Returns the decision function of the sample for each class in "
"the model. If decision_function_shape='ovr', the shape is (n_samples, "
"n_classes)."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth:9
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:5
#: qiskit_machine_learning.algorithms.QSVC.predict_log_proba:16
#: qiskit_machine_learning.algorithms.QSVC.predict_proba:16
#: sklearn.base.RegressorMixin.score:27 sklearn.svm._base.BaseLibSVM.fit:19
#: sklearn.svm._base.BaseSVC.decision_function:13
msgid "Notes"
msgstr ""

#: of sklearn.svm._base.BaseSVC.decision_function:14
msgid ""
"If decision_function_shape='ovo', the function values are proportional to"
" the distance of the samples X to the separating hyperplane. If the exact"
" distances are required, divide the function values by the norm of the "
"weight vector (``coef_``). See also `this question "
"<https://stats.stackexchange.com/questions/14876/ interpreting-distance-"
"from-hyperplane-in-svm>`_ for further details. If "
"decision_function_shape='ovr', the decision function is a monotonic "
"transformation of ovo decision function."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.fit.rst:4
msgid "QSVC.fit"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:3
msgid ""
"Training vectors, where n_samples is the number of samples and n_features"
" is the number of features. For kernel=\"precomputed\", the expected "
"shape of X is (n_samples, n_samples)."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:8
msgid ""
"Target values (class labels in classification, real numbers in "
"regression)."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:11
msgid ""
"Per-sample weights. Rescale C per sample. Higher weights force the "
"classifier to put more emphasis on these points."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:15
msgid "**self**"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:20
msgid ""
"If X and y are not C-ordered and contiguous arrays of np.float64 and X is"
" not a scipy.sparse.csr_matrix, X and/or y may be copied."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.fit:23
msgid ""
"If X is a dense array, then the other methods will not support sparse "
"matrices as input."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.get_params.rst:4
msgid "QSVC.get_params"
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:3
msgid ""
"If True, will return the parameters for this estimator and contained "
"subobjects that are estimators."
msgstr ""

#: of sklearn.base.BaseEstimator.get_params:7
msgid "**params** -- Parameter names mapped to their values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.n_support_.rst:4
msgid "QSVC.n_support_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.predict.rst:4
msgid "QSVC.predict"
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:3
msgid "For an one-class model, +1 or -1 is returned."
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.predict_log_proba:6
#: qiskit_machine_learning.algorithms.QSVC.predict_proba:6
#: sklearn.svm._base.BaseLibSVM.predict:5 sklearn.svm._base.BaseSVC.predict:5
msgid ""
"For kernel=\"precomputed\", the expected shape of X is (n_samples_test, "
"n_samples_train)."
msgstr ""

#: of sklearn.svm._base.BaseSVC.predict:9
msgid "**y_pred** -- Class labels for samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.predict_log_proba.rst:4
msgid "QSVC.predict_log_proba"
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.predict_log_proba:3
#: qiskit_machine_learning.algorithms.QSVC.predict_proba:3
msgid ""
"The model need to have probability information computed at training time:"
" fit with attribute `probability` set to True."
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.predict_log_proba:10
msgid ""
"**T** -- Returns the log-probabilities of the sample for each class in "
"the model. The columns correspond to the classes in sorted order, as they"
" appear in the attribute :term:`classes_`."
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.predict_log_proba:17
#: qiskit_machine_learning.algorithms.QSVC.predict_proba:17
msgid ""
"The probability model is created using cross validation, so the results "
"can be slightly different than those obtained by predict. Also, it will "
"produce meaningless results on very small datasets."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.predict_proba.rst:4
msgid "QSVC.predict_proba"
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.predict_proba:10
msgid ""
"**T** -- Returns the probability of the sample for each class in the "
"model. The columns correspond to the classes in sorted order, as they "
"appear in the attribute :term:`classes_`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.probA_.rst:4
msgid "QSVC.probA_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.probB_.rst:4
msgid "QSVC.probB_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.quantum_kernel.rst:4
msgid "QSVC.quantum_kernel"
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.quantum_kernel:3
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel:3
msgid ":py:class:`~qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.score.rst:4
msgid "QSVC.score"
msgstr ""

#: of sklearn.base.ClassifierMixin.score:3
msgid ""
"In multi-label classification, this is the subset accuracy which is a "
"harsh metric since you require for each sample that each label set be "
"correctly predicted."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:11
#: sklearn.base.RegressorMixin.score:20
msgid "Sample weights."
msgstr ""

#: of sklearn.base.ClassifierMixin.score:14
msgid "**score** -- Mean accuracy of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.set_params.rst:4
msgid "QSVC.set_params"
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:3
msgid ""
"The method works on simple estimators as well as on nested objects (such "
"as :class:`~sklearn.pipeline.Pipeline`). The latter have parameters of "
"the form ``<component>__<parameter>`` so that it's possible to update "
"each component of a nested object."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:8
msgid "Estimator parameters."
msgstr ""

#: of sklearn.base.BaseEstimator.set_params:11
msgid "**self** -- Estimator instance."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:4
msgid "QSVR"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:1
msgid "Quantum Support Vector Regressor."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:3
msgid ""
"This class shows how to use a quantum kernel for regression. The class "
"extends `sklearn.svm.SVR <https://scikit-"
"learn.org/stable/modules/generated/sklearn.svm.SVR.html>`_, and thus "
"inherits its methods like ``fit`` and ``predict`` used in the example "
"below. Read more in the `sklearn user guide <https://scikit-"
"learn.org/stable/modules/svm.html#svm-regression>`_."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:18
msgid "QuantumKernel to be used for regression."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:19
msgid "Variable length argument list to pass to SVR constructor."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:20
msgid "Arbitrary keyword arguments to pass to SVR constructor."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
msgid ":obj:`QSVR.coef_ <qiskit_machine_learning.algorithms.QSVR.coef_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
msgid ""
":obj:`QSVR.n_support_ "
"<qiskit_machine_learning.algorithms.QSVR.n_support_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
msgid ":obj:`QSVR.probA_ <qiskit_machine_learning.algorithms.QSVR.probA_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
msgid ":obj:`QSVR.probB_ <qiskit_machine_learning.algorithms.QSVR.probB_>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:31:<autosummary>:1
msgid ""
":obj:`QSVR.quantum_kernel "
"<qiskit_machine_learning.algorithms.QSVR.quantum_kernel>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
msgid ""
":obj:`QSVR.fit <qiskit_machine_learning.algorithms.QSVR.fit>`\\ \\(X\\, "
"y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
msgid ""
":obj:`QSVR.get_params "
"<qiskit_machine_learning.algorithms.QSVR.get_params>`\\ \\(\\[deep\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
msgid ""
":obj:`QSVR.predict <qiskit_machine_learning.algorithms.QSVR.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
#: of sklearn.svm._base.BaseLibSVM.predict:1
msgid "Perform regression on samples in X."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
msgid ""
":obj:`QSVR.score <qiskit_machine_learning.algorithms.QSVR.score>`\\ "
"\\(X\\, y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
#: of sklearn.base.RegressorMixin.score:1
msgid "Return the coefficient of determination :math:`R^2` of the prediction."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:41:<autosummary>:1
msgid ""
":obj:`QSVR.set_params "
"<qiskit_machine_learning.algorithms.QSVR.set_params>`\\ "
"\\(\\*\\*params\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.coef_.rst:4
msgid "QSVR.coef_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.fit.rst:4
msgid "QSVR.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.get_params.rst:4
msgid "QSVR.get_params"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.n_support_.rst:4
msgid "QSVR.n_support_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.predict.rst:4
msgid "QSVR.predict"
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:3
msgid "For an one-class model, +1 (inlier) or -1 (outlier) is returned."
msgstr ""

#: of sklearn.svm._base.BaseLibSVM.predict:9
msgid "**y_pred**"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.probA_.rst:4
msgid "QSVR.probA_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.probB_.rst:4
msgid "QSVR.probB_"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.quantum_kernel.rst:4
msgid "QSVR.quantum_kernel"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.score.rst:4
msgid "QSVR.score"
msgstr ""

#: of sklearn.base.RegressorMixin.score:4
msgid ""
"The coefficient :math:`R^2` is defined as :math:`(1 - \\frac{u}{v})`, "
"where :math:`u` is the residual sum of squares ``((y_true - y_pred) ** "
"2).sum()`` and :math:`v` is the total sum of squares ``((y_true - "
"y_true.mean()) ** 2).sum()``. The best possible score is 1.0 and it can "
"be negative (because the model can be arbitrarily worse). A constant "
"model that always predicts the expected value of `y`, disregarding the "
"input features, would get a :math:`R^2` score of 0.0."
msgstr ""

#: of sklearn.base.RegressorMixin.score:13
msgid ""
"Test samples. For some estimators this may be a precomputed kernel matrix"
" or a list of generic objects instead with shape ``(n_samples, "
"n_samples_fitted)``, where ``n_samples_fitted`` is the number of samples "
"used in the fitting for the estimator."
msgstr ""

#: of sklearn.base.RegressorMixin.score:18
msgid "True values for `X`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:23
msgid "**score** -- :math:`R^2` of ``self.predict(X)`` wrt. `y`."
msgstr ""

#: of sklearn.base.RegressorMixin.score:28
msgid ""
"The :math:`R^2` score used when calling ``score`` on a regressor uses "
"``multioutput='uniform_average'`` from version 0.23 to keep consistent "
"with default value of :func:`~sklearn.metrics.r2_score`. This influences "
"the ``score`` method of all the multioutput regressors (except for "
":class:`~sklearn.multioutput.MultiOutputRegressor`)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.set_params.rst:4
msgid "QSVR.set_params"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:4
msgid "QuantumGenerator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:1
msgid "Quantum Generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:3
msgid ""
"The quantum generator is a parametrized quantum circuit which can be "
"trained with the :class:`~qiskit_machine_learning.algorithms.QGAN` "
"algorithm to generate a quantum state which approximates the probability "
"distribution of given training data. At the beginning of the training the"
" parameters will be set randomly, thus, the output will is random. "
"Throughout the training the quantum generator learns to represent the "
"target distribution. Eventually, the trained generator can be used for "
"state preparation e.g. in QAE."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:12
msgid ""
"k min/max data values [[min_1,max_1],...,[min_k,max_k]], given input data"
" dim k"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:15
msgid ""
"k numbers of qubits to determine representation resolution, i.e. n qubits"
" enable the representation of 2**n values [n_1,..., n_k]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:18
msgid "a QuantumCircuit implementing the generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:20
msgid "1D numpy array or list, Initialization for the generator's parameters."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:29
msgid ""
"str or None, if not None save the optimizer's parameter after every "
"update step to the given directory"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:32
msgid ""
"Set multivariate variational distribution     to represent multivariate "
"data"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.discriminator "
"<qiskit_machine_learning.algorithms.QuantumGenerator.discriminator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.discriminator:1
msgid "Get discriminator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.optimizer "
"<qiskit_machine_learning.algorithms.QuantumGenerator.optimizer>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.optimizer:1
msgid "Get optimizer."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.parameter_values "
"<qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:1
msgid "Get parameter values from the quantum generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.seed "
"<qiskit_machine_learning.algorithms.QuantumGenerator.seed>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:30:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.seed:1
msgid "Get seed."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.construct_circuit "
"<qiskit_machine_learning.algorithms.QuantumGenerator.construct_circuit>`\\"
" \\(\\[params\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:1
msgid "Construct generator circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.get_output "
"<qiskit_machine_learning.algorithms.QuantumGenerator.get_output>`\\ "
"\\(quantum\\_instance\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
msgid "Get classical data samples from the generator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.loss "
"<qiskit_machine_learning.algorithms.QuantumGenerator.loss>`\\ \\(x\\, "
"weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:1
msgid "Loss function for training the generator's parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:39:<autosummary>:1
msgid ""
":obj:`QuantumGenerator.train "
"<qiskit_machine_learning.algorithms.QuantumGenerator.train>`\\ "
"\\(\\[quantum\\_instance\\, shots\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.construct_circuit.rst:4
msgid "QuantumGenerator.construct_circuit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:3
msgid "parameters which should be used to run the generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:6
msgid "construct the quantum circuit and return as gate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.discriminator.rst:4
msgid "QuantumGenerator.discriminator"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.discriminator:3
msgid ":py:class:`~qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.get_output.rst:4
msgid "QuantumGenerator.get_output"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:1
msgid ""
"Get classical data samples from the generator. Running the quantum "
"generator circuit results in a quantum state. To train this generator "
"with a classical discriminator, we need to sample classical outputs by "
"measuring the quantum state and mapping them to feature space defined by "
"the training data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:11
msgid ""
"array or None, parameters which should be used to run the generator, if "
"None use self._params"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:17
msgid "sample occurrence in percentage"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.loss.rst:4
msgid "QuantumGenerator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:5
msgid "probability for measuring the sample"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.optimizer.rst:4
msgid "QuantumGenerator.optimizer"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.optimizer:3
msgid ":py:class:`~qiskit.algorithms.optimizers.optimizer.Optimizer`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values.rst:4
msgid "QuantumGenerator.parameter_values"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:3
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~typing.List`, "
":py:class:`~numpy.ndarray`]"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:4
msgid "Current parameter values"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.seed.rst:4
msgid "QuantumGenerator.seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.train.rst:4
msgid "QuantumGenerator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:3
msgid "used to run the generator circuit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:5
msgid "Number of shots for hardware or qasm execution."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:8
msgid "generator loss(float) and updated parameters (array)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:4
msgid "VQC"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:4
msgid ""
"The number of qubits for the underlying CircuitQNN. If None, derive from "
"feature_map or ansatz. If neither of those is given, raise exception."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:7
msgid "The feature map for underlying CircuitQNN. If None, use ZZFeatureMap."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:9
msgid "The ansatz for the underlying CircuitQNN. If None, use RealAmplitudes."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:11
msgid "A target loss function to be used in training. Default is cross entropy."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:17
msgid ""
"Needs at least one out of num_qubits, feature_map or     ansatz to be "
"given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ":obj:`VQC.ansatz <qiskit_machine_learning.algorithms.VQC.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.ansatz:1
#: qiskit_machine_learning.algorithms.VQR.ansatz:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz:1
msgid "Returns the used ansatz."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ":obj:`VQC.circuit <qiskit_machine_learning.algorithms.VQC.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.circuit:1
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit:1
msgid "Returns the underlying quantum circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ""
":obj:`VQC.feature_map "
"<qiskit_machine_learning.algorithms.VQC.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.feature_map:1
#: qiskit_machine_learning.algorithms.VQR.feature_map:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map:1
msgid "Returns the used feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ":obj:`VQC.loss <qiskit_machine_learning.algorithms.VQC.loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ""
":obj:`VQC.neural_network "
"<qiskit_machine_learning.algorithms.VQC.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ""
":obj:`VQC.num_qubits "
"<qiskit_machine_learning.algorithms.VQC.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.num_qubits:1
#: qiskit_machine_learning.algorithms.VQR.num_qubits:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits:1
msgid "Returns the number of qubits used by ansatz and feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ":obj:`VQC.one_hot <qiskit_machine_learning.algorithms.VQC.one_hot>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:34:<autosummary>:1
msgid ""
":obj:`VQC.warm_start "
"<qiskit_machine_learning.algorithms.VQC.warm_start>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1
msgid ":obj:`VQC.fit <qiskit_machine_learning.algorithms.VQC.fit>`\\ \\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:1
msgid "Fit the model to data matrix X and targets y."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1
msgid ""
":obj:`VQC.predict <qiskit_machine_learning.algorithms.VQC.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:42:<autosummary>:1
msgid ""
":obj:`VQC.score <qiskit_machine_learning.algorithms.VQC.score>`\\ \\(X\\,"
" y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.ansatz.rst:4
msgid "VQC.ansatz"
msgstr ""

#: of qiskit_machine_learning.algorithms.VQC.ansatz:3
#: qiskit_machine_learning.algorithms.VQC.circuit:3
#: qiskit_machine_learning.algorithms.VQC.feature_map:3
#: qiskit_machine_learning.algorithms.VQR.ansatz:3
#: qiskit_machine_learning.algorithms.VQR.feature_map:3
#: qiskit_machine_learning.kernels.QuantumKernel.feature_map:3
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:16
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map:3
msgid ":py:class:`~qiskit.circuit.quantumcircuit.QuantumCircuit`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.circuit.rst:4
msgid "VQC.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.feature_map.rst:4
msgid "VQC.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.fit.rst:4
msgid "VQC.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.loss.rst:4
msgid "VQC.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.neural_network.rst:4
msgid "VQC.neural_network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.num_qubits.rst:4
msgid "VQC.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.one_hot.rst:4
msgid "VQC.one_hot"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.predict.rst:4
msgid "VQC.predict"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.score.rst:4
msgid "VQC.score"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.warm_start.rst:4
msgid "VQC.warm_start"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:4
msgid "VQR"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:1
msgid "Quantum neural network regressor using TwoLayerQNN"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:4
msgid ""
"The number of qubits to be used. If None, and neither feature_map nor "
"ansatz are given, it is initially set to 2, i.e., the default of the "
"TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:7
msgid ""
"The feature map to be used to construct a TwoLayerQNN. If None, use the "
"ZZFeatureMap, i.e., the default of the TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:10
msgid ""
"The ansatz to be used to construct a TwoLayerQNN. If None, use the "
"RealAmplitudes, i.e., the default of the TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:13
msgid ""
"The observable to be measured in the underlying TwoLayerQNN. If  None, "
"use the default from the TwoLayerQNN, i.e., `Z^{\\otimes num_qubits}`."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:16
msgid "A target loss function to be used in training. Default is L2."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:22
msgid "Neither num_qubits, nor feature_map, nor ansatz given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ":obj:`VQR.ansatz <qiskit_machine_learning.algorithms.VQR.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ""
":obj:`VQR.feature_map "
"<qiskit_machine_learning.algorithms.VQR.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ":obj:`VQR.loss <qiskit_machine_learning.algorithms.VQR.loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ""
":obj:`VQR.neural_network "
"<qiskit_machine_learning.algorithms.VQR.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ""
":obj:`VQR.num_qubits "
"<qiskit_machine_learning.algorithms.VQR.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32:<autosummary>:1
msgid ""
":obj:`VQR.warm_start "
"<qiskit_machine_learning.algorithms.VQR.warm_start>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1
msgid ":obj:`VQR.fit <qiskit_machine_learning.algorithms.VQR.fit>`\\ \\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1
msgid ""
":obj:`VQR.predict <qiskit_machine_learning.algorithms.VQR.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:40:<autosummary>:1
msgid ""
":obj:`VQR.score <qiskit_machine_learning.algorithms.VQR.score>`\\ \\(X\\,"
" y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.ansatz.rst:4
msgid "VQR.ansatz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.feature_map.rst:4
msgid "VQR.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.fit.rst:4
msgid "VQR.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.loss.rst:4
msgid "VQR.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.neural_network.rst:4
msgid "VQR.neural_network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.num_qubits.rst:4
msgid "VQR.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.predict.rst:4
msgid "VQR.predict"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.score.rst:4
msgid "VQR.score"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.warm_start.rst:4
msgid "VQR.warm_start"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:4
msgid "RawFeatureVector"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:1
msgid "The raw feature vector circuit."
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:3
msgid ""
"This circuit acts as parameterized initialization for statevectors with "
"``feature_dimension`` dimensions, thus with ``log2(feature_dimension)`` "
"qubits. The circuit contains a placeholder instruction that can only be "
"synthesized/defined when all parameters are bound."
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:7
msgid ""
"In ML, this circuit can be used to load the training data into qubit "
"amplitudes. It does not apply an kernel transformation. (Therefore, it is"
" a \"raw\" feature vector.)"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:10
msgid "Examples:"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:44
msgid "The feature dimension and number of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ancillas "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ancillas>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.ancillas:1
msgid "Returns a list of ancilla bits in the order that the registers were added."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.calibrations "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.calibrations>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.calibrations:1
msgid "Return calibration dictionary."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.clbits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.clbits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.clbits:1
msgid ""
"Returns a list of classical bits in the order that the registers were "
"added."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.data "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.data>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.data:1
msgid "Return the circuit data (instructions and context)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.extension_lib "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.extension_lib>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.feature_dimension "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:1
msgid "Return the feature dimension."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.global_phase "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.global_phase>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.global_phase:1
msgid "Return the global phase of the circuit in radians."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.header "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.header>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.instances "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.instances>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.metadata "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.metadata>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.metadata:1
msgid "The user provided metadata associated with the circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_ancillas "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_ancillas>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_ancillas:1
msgid "Return the number of ancilla qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_clbits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_clbits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_clbits:1
msgid "Return number of classical bits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_parameters "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_parameters>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_parameters:1
msgid ""
"Convenience function to get the number of parameter objects in the "
"circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_qubits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:1
msgid "Returns the number of qubits in this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.parameters "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.parameters>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.parameters:1
msgid "Convenience function to get the parameters defined in the parameter table."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.prefix "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.prefix>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qregs "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qregs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.qregs:1
msgid "A list of the quantum registers associated with the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qubits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:44:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.qubits:1
msgid "Returns a list of quantum bits in the order that the registers were added."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.__getitem__ "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.__getitem__>`\\"
" \\(item\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.__getitem__:1
msgid "Return indexed operation."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.__len__ "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.__len__>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.__len__:1
msgid "Return number of operations in circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.add_bits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.add_bits>`\\ "
"\\(bits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_bits:1
msgid "Add Bits to the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.add_calibration "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.add_calibration>`\\"
" \\(gate\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:1
msgid "Register a low-level, custom pulse definition for the given gate."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.add_register "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.add_register>`\\"
" \\(\\*regs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_register:1
msgid "Add registers."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.append "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.append>`\\ "
"\\(instruction\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
"Append one or more instructions to the end of the circuit, modifying the "
"circuit in place."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.assign_parameters "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.assign_parameters>`\\"
" \\(parameters\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:1
msgid "Assign parameters to new parameters or values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.barrier "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.barrier>`\\ "
"\\(\\*qargs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Apply :class:`~qiskit.circuit.Barrier`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.bind_parameters "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.bind_parameters>`\\"
" \\(values\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:1
msgid "Assign numeric parameters to values yielding a new circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cast "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cast>`\\ "
"\\(value\\, \\_type\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Best effort to cast value to type."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cbit_argument_conversion "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cbit_argument_conversion>`\\"
" \\(...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion:1
msgid ""
"Converts several classical bit representations (such as indexes, range, "
"etc.) into a list of classical bits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ccx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ccx>`\\ "
"\\(control\\_qubit1\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ccx:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.toffoli:1
msgid "Apply :class:`~qiskit.circuit.library.CCXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ch "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ch>`\\ "
"\\(control\\_qubit\\, target\\_qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ch:1
msgid "Apply :class:`~qiskit.circuit.library.CHGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cls_instances "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cls_instances>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cls_instances:1
msgid ""
"Return the current number of instances of this class, useful for auto "
"naming."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cls_prefix "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cls_prefix>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cls_prefix:1
msgid "Return the prefix to use for auto naming."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cnot "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cnot>`\\ "
"\\(control\\_qubit\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cnot:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.cx:1
msgid "Apply :class:`~qiskit.circuit.library.CXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.combine "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.combine>`\\ "
"\\(rhs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:1
msgid ""
"DEPRECATED - Returns rhs appended to self if self contains compatible "
"registers."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.compose "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.compose>`\\ "
"\\(other\\[\\, qubits\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:1
msgid ""
"Compose circuit with ``other`` circuit or instruction, optionally "
"permuting wires."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.control "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.control>`\\ "
"\\(\\[num\\_ctrl\\_qubits\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:1
msgid "Control this circuit on ``num_ctrl_qubits`` qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.copy "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.copy>`\\ "
"\\(\\[name\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy:1
msgid "Copy the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.count_ops "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.count_ops>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.count_ops:1
msgid "Count each operation kind in the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cp "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cp>`\\ "
"\\(theta\\, control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cp:1
msgid "Apply :class:`~qiskit.circuit.library.CPhaseGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.crx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.crx>`\\ "
"\\(theta\\, control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.crx:1
msgid "Apply :class:`~qiskit.circuit.library.CRXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cry "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cry>`\\ "
"\\(theta\\, control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cry:1
msgid "Apply :class:`~qiskit.circuit.library.CRYGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.crz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.crz>`\\ "
"\\(theta\\, control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.crz:1
msgid "Apply :class:`~qiskit.circuit.library.CRZGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cswap "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cswap>`\\ "
"\\(control\\_qubit\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cswap:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.fredkin:1
msgid "Apply :class:`~qiskit.circuit.library.CSwapGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.csx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.csx>`\\ "
"\\(control\\_qubit\\, target\\_qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.csx:1
msgid "Apply :class:`~qiskit.circuit.library.CSXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cu "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cu>`\\ "
"\\(theta\\, phi\\, lam\\, gamma\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cu:1
msgid "Apply :class:`~qiskit.circuit.library.CUGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cu1 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cu1>`\\ "
"\\(theta\\, control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cu1:1
msgid "Apply :class:`~qiskit.circuit.library.CU1Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cu3 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cu3>`\\ "
"\\(theta\\, phi\\, lam\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cu3:1
msgid "Apply :class:`~qiskit.circuit.library.CU3Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cx>`\\ "
"\\(control\\_qubit\\, target\\_qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cy "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cy>`\\ "
"\\(control\\_qubit\\, target\\_qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cy:1
msgid "Apply :class:`~qiskit.circuit.library.CYGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.cz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.cz>`\\ "
"\\(control\\_qubit\\, target\\_qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cz:1
msgid "Apply :class:`~qiskit.circuit.library.CZGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.dcx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.dcx>`\\ "
"\\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.dcx:1
msgid "Apply :class:`~qiskit.circuit.library.DCXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.decompose "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.decompose>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.decompose:1
msgid ""
"Call a decomposition pass on this circuit, to decompose one level "
"(shallow decompose)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.delay "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.delay>`\\ "
"\\(duration\\[\\, qarg\\, unit\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Apply :class:`~qiskit.circuit.Delay`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.depth "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.depth>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Return circuit depth (i.e., length of critical path)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.diagonal "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.diagonal>`\\ "
"\\(diag\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:1
msgid "Attach a diagonal gate to a circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.draw "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.draw>`\\ "
"\\(\\[output\\, scale\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Draw the quantum circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ecr "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ecr>`\\ "
"\\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ecr:1
msgid "Apply :class:`~qiskit.circuit.library.ECRGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.extend "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.extend>`\\ "
"\\(rhs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.extend:1
msgid ""
"DEPRECATED - Append QuantumCircuit to the RHS if it contains compatible "
"registers."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.fredkin "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.fredkin>`\\ "
"\\(control\\_qubit\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.from_qasm_file "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.from_qasm_file>`\\"
" \\(path\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:1
msgid "Take in a QASM file and generate a QuantumCircuit object."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.from_qasm_str "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.from_qasm_str>`\\"
" \\(qasm\\_str\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:1
msgid "Take in a QASM string and generate a QuantumCircuit object."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.h "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.h>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.h:1
msgid "Apply :class:`~qiskit.circuit.library.HGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.hamiltonian "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.hamiltonian>`\\"
" \\(operator\\, time\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.hamiltonian_gate.hamiltonian:1
msgid "Apply hamiltonian evolution to qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.has_register "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.has_register>`\\"
" \\(register\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:1
msgid "Test if this circuit has the register r."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.i "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.i>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.i:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.id:1
msgid "Apply :class:`~qiskit.circuit.library.IGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.id "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.id>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.initialize "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.initialize>`\\ "
"\\(params\\[\\, qubits\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.initializer.initialize:1
msgid "Initialize qubits in a specific state."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.inverse "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.inverse>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:1
msgid "Invert (take adjoint of) this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.iso "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.iso>`\\ "
"\\(isometry\\, q\\_input\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Attach an arbitrary isometry from m to n qubits to a circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.isometry "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.isometry>`\\ "
"\\(isometry\\, q\\_input\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.iswap "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.iswap>`\\ "
"\\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.iswap:1
msgid "Apply :class:`~qiskit.circuit.library.iSwapGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcp "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcp>`\\ "
"\\(lam\\, control\\_qubits\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcp:1
msgid "Apply :class:`~qiskit.circuit.library.MCPhaseGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcrx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcrx>`\\ "
"\\(theta\\, q\\_controls\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:1
msgid "Apply Multiple-Controlled X rotation gate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcry "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcry>`\\ "
"\\(theta\\, q\\_controls\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:1
msgid "Apply Multiple-Controlled Y rotation gate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcrz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcrz>`\\ "
"\\(lam\\, q\\_controls\\, q\\_target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:1
msgid "Apply Multiple-Controlled Z rotation gate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mct "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mct>`\\ "
"\\(control\\_qubits\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mct:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.mcx:1
msgid "Apply :class:`~qiskit.circuit.library.MCXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcu1 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcu1>`\\ "
"\\(lam\\, control\\_qubits\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcu1:1
msgid "Apply :class:`~qiskit.circuit.library.MCU1Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.mcx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.mcx>`\\ "
"\\(control\\_qubits\\, ...\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.measure "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.measure>`\\ "
"\\(qubit\\, cbit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.measure.measure:1
msgid "Measure quantum bit into classical bit (tuples)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.measure_active "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.measure_active>`\\"
" \\(\\[inplace\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Adds measurement to all non-idle qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.measure_all "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.measure_all>`\\"
" \\(\\[inplace\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Adds measurement to all qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ms "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ms>`\\ "
"\\(theta\\, qubits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ms:1
msgid "Apply :class:`~qiskit.circuit.library.MSGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_connected_components "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_connected_components>`\\"
" \\(\\[...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components:1
msgid "How many non-entangled subcircuits can the circuit be factored to."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_nonlocal_gates "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_nonlocal_gates>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Return number of non-local gates (i.e."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_tensor_factors "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_tensor_factors>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:1
#: qiskit.circuit.quantumcircuit.QuantumCircuit.num_unitary_factors:1
msgid ""
"Computes the number of tensor factors in the unitary (quantum) part of "
"the circuit only."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.num_unitary_factors "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_unitary_factors>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.p "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.p>`\\ "
"\\(theta\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.p:1
msgid "Apply :class:`~qiskit.circuit.library.PhaseGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.pauli "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.pauli>`\\ "
"\\(pauli\\_string\\, qubits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.pauli:1
msgid "Apply :class:`~qiskit.circuit.library.PauliGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.power "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.power>`\\ "
"\\(power\\[\\, matrix\\_power\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:1
msgid "Raise this circuit to the power of ``power``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qasm "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qasm>`\\ "
"\\(\\[formatted\\, filename\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:1
msgid "Return OpenQASM string."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qbit_argument_conversion "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qbit_argument_conversion>`\\"
" \\(...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion:1
msgid ""
"Converts several qubit representations (such as indexes, range, etc.) "
"into a list of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qubit_duration "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_duration>`\\"
" \\(\\*qubits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
"Return the duration between the start and stop time of the first and last"
" instructions, excluding delays, over the supplied qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qubit_start_time "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_start_time>`\\"
" \\(\\*qubits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
"Return the start time of the first instruction, excluding delays, over "
"the supplied qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.qubit_stop_time "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_stop_time>`\\"
" \\(\\*qubits\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
"Return the stop time of the last instruction, excluding delays, over the "
"supplied qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.r "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.r>`\\ "
"\\(theta\\, phi\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.r:1
msgid "Apply :class:`~qiskit.circuit.library.RGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rcccx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rcccx>`\\ "
"\\(control\\_qubit1\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rcccx:1
msgid "Apply :class:`~qiskit.circuit.library.RC3XGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rccx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rccx>`\\ "
"\\(control\\_qubit1\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rccx:1
msgid "Apply :class:`~qiskit.circuit.library.RCCXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.remove_final_measurements "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.remove_final_measurements>`\\"
" \\(\\[...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Removes final measurement on all qubits if they are present."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.repeat "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.repeat>`\\ "
"\\(reps\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.repeat:1
msgid "Repeat this circuit ``reps`` times."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.reset "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.reset>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.reset.reset:1
msgid "Reset q."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.reverse_bits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.reverse_bits>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:1
msgid "Return a circuit with the opposite order of wires."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.reverse_ops "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.reverse_ops>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:1
msgid "Reverse the circuit by reversing the order of instructions."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rv "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rv>`\\ \\(vx\\,"
" vy\\, vz\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rv:1
msgid "Apply :class:`~qiskit.circuit.library.RVGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rx>`\\ "
"\\(theta\\, qubit\\[\\, label\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rx:1
msgid "Apply :class:`~qiskit.circuit.library.RXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rxx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rxx>`\\ "
"\\(theta\\, qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rxx:1
msgid "Apply :class:`~qiskit.circuit.library.RXXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ry "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ry>`\\ "
"\\(theta\\, qubit\\[\\, label\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ry:1
msgid "Apply :class:`~qiskit.circuit.library.RYGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ryy "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ryy>`\\ "
"\\(theta\\, qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.ryy:1
msgid "Apply :class:`~qiskit.circuit.library.RYYGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rz>`\\ "
"\\(phi\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rz:1
msgid "Apply :class:`~qiskit.circuit.library.RZGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rzx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rzx>`\\ "
"\\(theta\\, qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rzx:1
msgid "Apply :class:`~qiskit.circuit.library.RZXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.rzz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.rzz>`\\ "
"\\(theta\\, qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.rzz:1
msgid "Apply :class:`~qiskit.circuit.library.RZZGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.s "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.s>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.s:1
msgid "Apply :class:`~qiskit.circuit.library.SGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.sdg "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.sdg>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.sdg:1
msgid "Apply :class:`~qiskit.circuit.library.SdgGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.size "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.size>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.size:1
msgid "Returns total number of gate operations in circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.snapshot "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.snapshot>`\\ "
"\\(label\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid "Take a statevector snapshot of the internal simulator representation."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.squ "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.squ>`\\ "
"\\(unitary\\_matrix\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.squ.squ:1
msgid "Decompose an arbitrary 2*2 unitary into three rotation gates."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.swap "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.swap>`\\ "
"\\(qubit1\\, qubit2\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.swap:1
msgid "Apply :class:`~qiskit.circuit.library.SwapGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.sx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.sx>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.sx:1
msgid "Apply :class:`~qiskit.circuit.library.SXGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.sxdg "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.sxdg>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.sxdg:1
msgid "Apply :class:`~qiskit.circuit.library.SXdgGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.t "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.t>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.t:1
msgid "Apply :class:`~qiskit.circuit.library.TGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.tdg "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.tdg>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tdg:1
msgid "Apply :class:`~qiskit.circuit.library.TdgGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.tensor "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.tensor>`\\ "
"\\(other\\[\\, inplace\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:1
msgid "Tensor ``self`` with ``other``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.to_gate "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.to_gate>`\\ "
"\\(\\[parameter\\_map\\, label\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate:1
msgid "Create a Gate out of this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.to_instruction "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.to_instruction>`\\"
" \\(\\[parameter\\_map\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction:1
msgid "Create an Instruction out of this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.toffoli "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.toffoli>`\\ "
"\\(control\\_qubit1\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.u "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.u>`\\ "
"\\(theta\\, phi\\, lam\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u:1
msgid "Apply :class:`~qiskit.circuit.library.UGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.u1 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.u1>`\\ "
"\\(theta\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u1:1
msgid "Apply :class:`~qiskit.circuit.library.U1Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.u2 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.u2>`\\ "
"\\(phi\\, lam\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u2:1
msgid "Apply :class:`~qiskit.circuit.library.U2Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.u3 "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.u3>`\\ "
"\\(theta\\, phi\\, lam\\, qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.u3:1
msgid "Apply :class:`~qiskit.circuit.library.U3Gate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.uc "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.uc>`\\ "
"\\(gate\\_list\\, q\\_controls\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.uc.uc:1
msgid ""
"Attach a uniformly controlled gates (also called multiplexed gates) to a "
"circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ucrx "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ucrx>`\\ "
"\\(angle\\_list\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:1
msgid ""
"Attach a uniformly controlled (also called multiplexed) Rx rotation gate "
"to a circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ucry "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ucry>`\\ "
"\\(angle\\_list\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.ucry.ucry:1
msgid ""
"Attach a uniformly controlled (also called multiplexed) Ry rotation gate "
"to a circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.ucrz "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.ucrz>`\\ "
"\\(angle\\_list\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.quantum_initializer.ucrz.ucrz:1
msgid ""
"Attach a uniformly controlled (also called multiplexed gates) Rz rotation"
" gate to a circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.unitary "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.unitary>`\\ "
"\\(obj\\, qubits\\[\\, label\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.extensions.unitary.unitary:1
msgid "Apply unitary gate to q."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.width "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.width>`\\ "
"\\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.width:1
msgid "Return number of qubits plus clbits in circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.x "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.x>`\\ "
"\\(qubit\\[\\, label\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.x:1
msgid "Apply :class:`~qiskit.circuit.library.XGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.y "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.y>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.y:1
msgid "Apply :class:`~qiskit.circuit.library.YGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
msgid ""
":obj:`RawFeatureVector.z "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.z>`\\ "
"\\(qubit\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:172:<autosummary>:1
#: of qiskit.circuit.quantumcircuit.QuantumCircuit.z:1
msgid "Apply :class:`~qiskit.circuit.library.ZGate`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.__getitem__.rst:4
msgid "RawFeatureVector.__getitem__"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.__len__.rst:4
msgid "RawFeatureVector.__len__"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.add_bits.rst:4
msgid "RawFeatureVector.add_bits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.add_calibration.rst:4
msgid "RawFeatureVector.add_calibration"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:3
msgid "Gate information."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:5
msgid "List of qubits to be measured."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:7
msgid "Schedule information."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:9
msgid "A list of parameters."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.add_calibration:12
msgid "if the gate is of type string and params is None."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.add_register.rst:4
msgid "RawFeatureVector.add_register"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ancillas.rst:4
msgid "RawFeatureVector.ancillas"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.append.rst:4
msgid "RawFeatureVector.append"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:1
msgid ""
"Append one or more instructions to the end of the circuit, modifying the "
"circuit in place. Expands qargs and cargs."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:4
msgid "Instruction instance to append"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:6
msgid "qubits to attach instruction to"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:8
msgid "clbits to attach instruction to"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:11
msgid "a handle to the instruction that was just added"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:14
msgid "if object passed is a subclass of Instruction"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.append:15
msgid "if object passed is neither subclass nor an instance of Instruction"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.assign_parameters.rst:4
msgid "RawFeatureVector.assign_parameters"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:3
msgid ""
"The keys of the parameter dictionary must be Parameter instances in the "
"current circuit. The values of the dictionary can either be numeric "
"values or new parameter objects. The values can be assigned to the "
"current circuit object or to a copy of it."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:7
msgid ""
"Either a dictionary or iterable specifying the new parameter values. If a"
" dict, it specifies the mapping from ``current_parameter`` to "
"``new_parameter``, where ``new_parameter`` can be a new parameter object "
"or a numeric value. If an iterable, the elements are assigned to the "
"existing parameters in the order they were inserted. You can call "
"``QuantumCircuit.parameters`` to check this order."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:14
msgid ""
"If False, a copy of the circuit with the bound parameters is returned. If"
" True the circuit instance itself is modified."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:17
msgid "Deprecated, use ``parameters`` instead."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:20
msgid ""
"If parameters is a dict and contains parameters not present in the     "
"circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:21
msgid ""
"If parameters is a list/array and the length mismatches the number of "
"free     parameters in the circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:23
msgid ""
"A copy of the circuit with bound parameters, if ``inplace`` is True, "
"otherwise None."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:11
#: qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:28
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:14
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:10
#: qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:22
#: qiskit.extensions.quantum_initializer.initializer.initialize:27
msgid "Examples"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:29
msgid "Create a parameterized circuit and assign the parameters in-place."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.assign_parameters:48
msgid "Bind the values out-of-place and get a copy of the original circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.barrier.rst:4
msgid "RawFeatureVector.barrier"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.barrier:1
msgid "Apply :class:`~qiskit.circuit.Barrier`. If qargs is None, applies to all."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.bind_parameters.rst:4
msgid "RawFeatureVector.bind_parameters"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:3
msgid ""
"To assign new Parameter objects or bind the values in-place, without "
"yielding a new circuit, use the :meth:`assign_parameters` method."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:6
msgid "{parameter: value, ...} or [value1, value2, ...]"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:8
msgid "Deprecated, use ``values`` instead."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:11
msgid "If values is a dict and contains parameters not present in the circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:12
msgid "If values contains a ParameterExpression."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.bind_parameters:14
msgid "copy of self with assignment substitution."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.calibrations.rst:4
msgid "RawFeatureVector.calibrations"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.calibrations:3
msgid "The custom pulse definition of a given gate is of the form"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.calibrations:4
msgid "{'gate_name': {(qubits, params): schedule}}"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cast.rst:4
msgid "RawFeatureVector.cast"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cast:1
msgid "Best effort to cast value to type. Otherwise, returns the value."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cbit_argument_conversion.rst:4
msgid "RawFeatureVector.cbit_argument_conversion"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion:4
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion:4
msgid "representation to expand"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.cbit_argument_conversion:7
msgid "Where each tuple is a classical bit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ccx.rst:4
msgid "RawFeatureVector.ccx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ch.rst:4
msgid "RawFeatureVector.ch"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.clbits.rst:4
msgid "RawFeatureVector.clbits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cls_instances.rst:4
msgid "RawFeatureVector.cls_instances"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cls_prefix.rst:4
msgid "RawFeatureVector.cls_prefix"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cnot.rst:4
msgid "RawFeatureVector.cnot"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.combine.rst:4
msgid "RawFeatureVector.combine"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:3
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend:3
msgid ""
"Two circuits are compatible if they contain the same registers or if they"
" contain different registers with unique names. The returned circuit will"
" contain all unique registers between both circuits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:8
msgid "Return self + rhs as a new object."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:10
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend:10
msgid "The quantum circuit to append to the right hand side."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:13
msgid "Returns a new QuantumCircuit object"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.combine:16
#: qiskit.circuit.quantumcircuit.QuantumCircuit.extend:16
msgid "if the rhs circuit is not compatible"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.compose.rst:4
msgid "RawFeatureVector.compose"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:3
msgid "``other`` can be narrower or of equal width to ``self``."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:5
msgid "(sub)circuit to compose onto self."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:7
msgid "qubits of self to compose onto."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:9
msgid "clbits of self to compose onto."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:11
msgid "If True, front composition will be performed (not implemented yet)."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:13
#: qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:18
msgid "If True, modify the object. Otherwise return composed circuit."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:16
msgid "the composed circuit (returns None if inplace==True)."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:19
msgid "if composing on the front."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:20
msgid "if ``other`` is wider or there are duplicate edge mappings."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.compose:22
msgid "Examples::"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.control.rst:4
msgid "RawFeatureVector.control"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:3
msgid "The number of control qubits."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:5
msgid "An optional label to give the controlled operation for visualization."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:7
msgid ""
"The control state in decimal or as a bitstring (e.g. '111'). If None, use"
" ``2**num_ctrl_qubits - 1``."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:11
msgid "The controlled version of this circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.control:14
msgid "If the circuit contains a non-unitary operation and cannot be controlled."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.copy.rst:4
msgid "RawFeatureVector.copy"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy:3
msgid ""
"name to be given to the copied circuit. If None, then the name stays the "
"same"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.copy:6
msgid "a deepcopy of the current circuit, with the specified name"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.count_ops.rst:4
msgid "RawFeatureVector.count_ops"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.count_ops:3
msgid "a breakdown of how many operations of each kind, sorted by amount."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cp.rst:4
msgid "RawFeatureVector.cp"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.crx.rst:4
msgid "RawFeatureVector.crx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cry.rst:4
msgid "RawFeatureVector.cry"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.crz.rst:4
msgid "RawFeatureVector.crz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cswap.rst:4
msgid "RawFeatureVector.cswap"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.csx.rst:4
msgid "RawFeatureVector.csx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cu.rst:4
msgid "RawFeatureVector.cu"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cu1.rst:4
msgid "RawFeatureVector.cu1"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cu3.rst:4
msgid "RawFeatureVector.cu3"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cx.rst:4
msgid "RawFeatureVector.cx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cy.rst:4
msgid "RawFeatureVector.cy"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.cz.rst:4
msgid "RawFeatureVector.cz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.data.rst:4
msgid "RawFeatureVector.data"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.data:3
msgid ""
"a list-like object containing the tuples for the circuit's data.  Each "
"tuple is in the format ``(instruction, qargs, cargs)``, where instruction"
" is an Instruction (or subclass) object, qargs is a list of Qubit "
"objects, and cargs is a list of Clbit objects."
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.data:3
msgid "a list-like object containing the tuples for the circuit's data."
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.data:5
msgid ""
"Each tuple is in the format ``(instruction, qargs, cargs)``, where "
"instruction is an Instruction (or subclass) object, qargs is a list of "
"Qubit objects, and cargs is a list of Clbit objects."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.dcx.rst:4
msgid "RawFeatureVector.dcx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.decompose.rst:4
msgid "RawFeatureVector.decompose"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.decompose:4
msgid "a circuit one level decomposed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.delay.rst:4
msgid "RawFeatureVector.delay"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:1
msgid ""
"Apply :class:`~qiskit.circuit.Delay`. If qarg is None, applies to all "
"qubits. When applying to multiple qubits, delays with the same duration "
"will be created."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:4
msgid "duration of the delay."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:6
msgid "qubit argument to apply this delay."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:8
msgid ""
"unit of the duration. Supported units: 's', 'ms', 'us', 'ns', 'ps', 'dt'."
" Default is ``dt``, i.e. integer time unit depending on the target "
"backend."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:12
msgid "the attached delay instruction."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.delay:15
msgid "if arguments have bad format."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.depth.rst:4
msgid "RawFeatureVector.depth"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth:1
msgid ""
"Return circuit depth (i.e., length of critical path). This does not "
"include compiler or simulator directives such as 'barrier' or 'snapshot'."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth:5
msgid "Depth of circuit."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.depth:10
msgid "The circuit depth and the DAG depth need not be the same."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.diagonal.rst:4
msgid "RawFeatureVector.diagonal"
msgstr ""

#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:3
msgid ""
"The decomposition is based on Theorem 7 given in \"Synthesis of Quantum "
"Logic Circuits\" by Shende et al. (https://arxiv.org/pdf/quant-"
"ph/0406176.pdf)."
msgstr ""

#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:6
msgid ""
"list of the 2^k diagonal entries (for a diagonal gate on k qubits). Must "
"contain at least two entries"
msgstr ""

#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:9
msgid ""
"list of k qubits the diagonal is acting on (the order of the qubits "
"specifies the computational basis in which the diagonal gate is provided:"
" the first element in diag acts on the state where all the qubits in q "
"are in the state 0, the second entry acts on the state where all the "
"qubits q[1],...,q[k-1] are in the state zero and q[0] is in the state 1, "
"and so on)"
msgstr ""

#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:17
msgid "the diagonal gate which was attached to the circuit."
msgstr ""

#: of qiskit.extensions.quantum_initializer.diagonal.diagonal:20
msgid ""
"if the list of the diagonal entries or the qubit list is in bad format;"
"     if the number of diagonal entries is not 2^k, where k denotes the "
"number of qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.draw.rst:4
msgid "RawFeatureVector.draw"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:1
msgid ""
"Draw the quantum circuit. Use the output parameter to choose the drawing "
"format:"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:3
msgid "**text**: ASCII art TextDrawing that can be printed in the console."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:5
msgid "**matplotlib**: images with color rendered purely in Python."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:7
msgid "**latex**: high-quality images compiled via latex."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:9
msgid "**latex_source**: raw uncompiled latex output."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:11
msgid ""
"select the output method to use for drawing the circuit. Valid choices "
"are ``text``, ``mpl``, ``latex``, ``latex_source``. By default the `text`"
" drawer is used unless the user config file (usually "
"``~/.qiskit/settings.conf``) has an alternative backend set as the "
"default. For example, ``circuit_drawer = latex``. If the output kwarg is "
"set, that backend will always be used over the default in the user config"
" file."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:19
msgid ""
"scale of image to draw (shrink if < 1.0). Only used by the `mpl`, `latex`"
" and `latex_source` outputs. Defaults to 1.0."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:22
msgid "file path to save image to. Defaults to None."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:24
msgid ""
"dictionary of style or file name of style json file. This option is only "
"used by the `mpl` output type. If `style` is a str, it is used as the "
"path to a json file which contains a style dict. The file will be opened,"
" parsed, and then any style elements in the dict will replace the default"
" values in the input dict. A file to be loaded must end in ``.json``, but"
" the name entered here can omit ``.json``. For example, "
"``style='iqx.json'`` or ``style='iqx'``. If `style` is a dict and the "
"``'name'`` key is set, that name will be used to load a json file, "
"followed by loading the other items in the style dict. For example, "
"``style={'name': 'iqx'}``. If `style` is not a str and `name` is not a "
"key in the style dict, then the default value from the user config file "
"(usually ``~/.qiskit/settings.conf``) will be used, for example, "
"``circuit_mpl_style = iqx``. If none of these are set, the `default` "
"style will be used. The search path for style json files can be specified"
" in the user config, for example, ``circuit_mpl_style_path = "
"/home/user/styles:/home/user``. See: "
":class:`~qiskit.visualization.qcstyle.DefaultStyle` for more information "
"on the contents."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:46
msgid ""
"when set to true, show the circuit in a new window (for `mpl` this "
"depends on the matplotlib backend being used supporting this). Note when "
"used with either the `text` or the `latex_source` output type this has no"
" effect and will be silently ignored. Defaults to False."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:52
msgid ""
"when set to True, reverse the bit order inside registers for the output "
"visualization. Defaults to False."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:55
msgid "enable/disable drawing barriers in the output circuit. Defaults to True."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:58
msgid ""
"options are ``left``, ``right`` or ``none``. If anything else is "
"supplied, it defaults to left justified. It refers to where gates should "
"be placed in the output circuit if there is an option. ``none`` results "
"in each gate being placed in its own column."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:64
msgid ""
"``high``, ``medium`` or ``low``. It merges the lines generated by the "
"`text` output so the drawing will take less vertical room.  Default is "
"``medium``. Only used by the `text` output, will be silently ignored "
"otherwise."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:69
msgid ""
"include idle wires (wires with no circuit elements) in output "
"visualization. Default is True."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:72
msgid ""
"include layout information, with labels on the physical layout. Default "
"is True."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:75
msgid ""
"sets pagination. It can be disabled using -1. In `text`, sets the length "
"of the lines. This is useful when the drawing does not fit in the "
"console. If None (default), it will try to guess the console width using "
"``shutil.get_terminal_size()``. However, if running in jupyter, the "
"default line length is set to 80 characters. In `mpl`, it is the number "
"of (visual) layers before folding. Default is 25."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:83
msgid ""
"Only used by the `mpl` backend. An optional Axes object to be used for "
"the visualization output. If none is specified, a new matplotlib Figure "
"will be created and used. Additionally, if specified there will be no "
"returned Figure since it is redundant."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:89
msgid "optional. Adds ``|0>`` in the beginning of the wire. Default is False."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:92
msgid "optional. If set True, bundle classical registers. Default is True."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:96
msgid ""
":class:`TextDrawing` or :class:`matplotlib.figure` or :class:`PIL.Image` "
"or :class:`str`:  * `TextDrawing` (output='text')     A drawing that can "
"be printed as ascii art. * `matplotlib.figure.Figure` (output='mpl')     "
"A matplotlib figure object for the circuit diagram. * `PIL.Image` "
"(output='latex')     An in-memory representation of the image of the "
"circuit diagram. * `str` (output='latex_source')     The LaTeX source "
"code for visualizing the circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:96
msgid ""
":class:`TextDrawing` or :class:`matplotlib.figure` or :class:`PIL.Image` "
"or :class:`str`:"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:99
msgid "`TextDrawing` (output='text')"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:100
msgid "A drawing that can be printed as ascii art."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:101
msgid "`matplotlib.figure.Figure` (output='mpl')"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:102
msgid "A matplotlib figure object for the circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:103
msgid "`PIL.Image` (output='latex')"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:104
msgid "An in-memory representation of the image of the circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:106
msgid "`str` (output='latex_source')"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:106
msgid "The LaTeX source code for visualizing the circuit diagram."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:108
msgid "when an invalid output method is selected"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:109
msgid "when the output methods requires non-installed libraries."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.draw:112
msgid "Example"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ecr.rst:4
msgid "RawFeatureVector.ecr"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.extend.rst:4
msgid "RawFeatureVector.extend"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.extend:8
msgid "Modify and return self."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.extend:13
msgid "Returns this QuantumCircuit object (which has been modified)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.extension_lib.rst:4
msgid "RawFeatureVector.extension_lib"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension.rst:4
msgid "RawFeatureVector.feature_dimension"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:4
msgid "The feature dimension, which is ``2 ** num_qubits``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.fredkin.rst:4
msgid "RawFeatureVector.fredkin"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.from_qasm_file.rst:4
msgid "RawFeatureVector.from_qasm_file"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:3
msgid "Path to the file for a QASM program"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_file:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:6
msgid "The QuantumCircuit object for the input QASM"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.from_qasm_str.rst:4
msgid "RawFeatureVector.from_qasm_str"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.from_qasm_str:3
msgid "A QASM program string"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.global_phase.rst:4
msgid "RawFeatureVector.global_phase"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.h.rst:4
msgid "RawFeatureVector.h"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.hamiltonian.rst:4
msgid "RawFeatureVector.hamiltonian"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.has_register.rst:4
msgid "RawFeatureVector.has_register"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:3
msgid "a quantum or classical register."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.has_register:6
msgid "True if the register is contained in this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.header.rst:4
msgid "RawFeatureVector.header"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.i.rst:4
msgid "RawFeatureVector.i"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.id.rst:4
msgid "RawFeatureVector.id"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.initialize.rst:4
msgid "RawFeatureVector.initialize"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:3
msgid ""
"Qubit initialization is done by first resetting the qubits to "
":math:`|0\\rangle` followed by an state preparing unitary. Both these "
"steps are included in the `Initialize` instruction."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:7
msgid ""
"* str: labels of basis states of the Pauli eigenstates Z, X, Y. See     "
":meth:`~qiskit.quantum_info.states.statevector.Statevector.from_label`."
"     Notice the order of the labels is reversed with respect to the qubit"
" index to     be applied to. Example label '01' initializes the qubit "
"zero to `|1>` and the     qubit one to `|0>`. * list: vector of complex "
"amplitudes to initialize to. * int: an integer that is used as a bitmap "
"indicating which qubits to initialize    to `|1>`. Example: setting "
"params to 5 would initialize qubit 0 and qubit 2    to `|1>` and qubit 1 "
"to `|0>`."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:11
msgid "str: labels of basis states of the Pauli eigenstates Z, X, Y. See"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:9
msgid ""
":meth:`~qiskit.quantum_info.states.statevector.Statevector.from_label`. "
"Notice the order of the labels is reversed with respect to the qubit "
"index to be applied to. Example label '01' initializes the qubit zero to "
"`|1>` and the qubit one to `|0>`."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:13
msgid "list: vector of complex amplitudes to initialize to."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:15
msgid ""
"int: an integer that is used as a bitmap indicating which qubits to "
"initialize"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:15
msgid ""
"to `|1>`. Example: setting params to 5 would initialize qubit 0 and qubit"
" 2 to `|1>` and qubit 1 to `|0>`."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:18
msgid ""
"* QuantumRegister: A list of qubits to be initialized [Default: None]. * "
"int: Index of qubit to initialized [Default: None]."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:19
msgid "QuantumRegister: A list of qubits to be initialized [Default: None]."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:20
msgid "int: Index of qubit to initialized [Default: None]."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:23
msgid "a handle to the instruction that was just initialized"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:28
msgid ""
"Prepare a qubit in the state :math:`(|0\\rangle - |1\\rangle) / "
"\\sqrt{2}`."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:19
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:22
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:18
#: qiskit.extensions.quantum_initializer.initializer.initialize:39
#: qiskit.extensions.quantum_initializer.initializer.initialize:59
#: qiskit.extensions.quantum_initializer.initializer.initialize:77
msgid "output:"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:40
msgid "┌──────────────────────────────┐"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:43
msgid "q_0: ┤ initialize(0.70711,-0.70711) ├"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:42
msgid "└──────────────────────────────┘"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:45
msgid ""
"Initialize from a string two qubits in the state `|10>`. The order of the"
" labels is reversed with respect to qubit index. More information about "
"labels for basis states are in "
":meth:`~qiskit.quantum_info.states.statevector.Statevector.from_label`."
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:60
msgid "┌──────────────────┐"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:61
msgid "q_0: ┤0                 ├"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:62
msgid "│  initialize(0,1) │"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:65
msgid "q_1: ┤1                 ├"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:64
msgid "└──────────────────┘"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:67
msgid ""
"Initialize two qubits from an array of complex amplitudes .. jupyter-"
"execute::"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:78
msgid "┌────────────────────────────────────┐"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:79
msgid "q_0: ┤0                                   ├"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:80
msgid "│  initialize(0,0.70711,-0.70711j,0) │"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:81
msgid "q_1: ┤1                                   ├"
msgstr ""

#: of qiskit.extensions.quantum_initializer.initializer.initialize:82
msgid "└────────────────────────────────────┘"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.instances.rst:4
msgid "RawFeatureVector.instances"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.inverse.rst:4
msgid "RawFeatureVector.inverse"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:3
msgid "This is done by recursively inverting all gates."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:5
msgid "the inverted circuit"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:8
msgid "if the circuit cannot be inverted."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:12
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:15
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:11
msgid "input:"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:13
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:20
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:16
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:12
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:19
msgid "┌───┐"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:14
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:17
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:13
msgid "q_0: ┤ H ├─────■──────"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:15
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:18
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:14
msgid "└───┘┌────┴─────┐"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:17
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:20
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:16
msgid "q_1: ─────┤ RX(1.57) ├"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:17
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:20
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:16
#: qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:23
msgid "└──────────┘"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:21
msgid "q_0: ──────■──────┤ H ├"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:22
msgid "┌─────┴─────┐└───┘"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:23
msgid "q_1: ┤ RX(-1.57) ├─────"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.inverse:24
msgid "└───────────┘"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.iso.rst:4
msgid "RawFeatureVector.iso"
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:1
msgid ""
"Attach an arbitrary isometry from m to n qubits to a circuit. In "
"particular, this allows to attach arbitrary unitaries on n qubits (m=n) "
"or to prepare any state on n qubits (m=0). The decomposition used here "
"was introduced by Iten et al. in https://arxiv.org/abs/1501.06911."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:6
msgid ""
"an isometry from m to n qubits, i.e., a (complex) ndarray of dimension "
"2^n×2^m with orthonormal columns (given in the computational basis "
"specified by the order of the ancillas and the input qubits, where the "
"ancillas are considered to be more significant than the input qubits.)."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:11
msgid ""
"list of m qubits where the input to the isometry is fed in (empty list "
"for state preparation)."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:14
msgid ""
"list of n-m ancilla qubits that are used for the output of the isometry "
"and which are assumed to start in the zero state. The qubits are listed "
"with increasing significance."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:18
msgid ""
"list of ancilla qubits which are assumed to start in the zero state. "
"Default is q_ancillas_zero = None."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:21
msgid ""
"list of ancilla qubits which can start in an arbitrary state. Default is "
"q_ancillas_dirty = None."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:25
msgid "the isometry is attached to the quantum circuit."
msgstr ""

#: of qiskit.extensions.quantum_initializer.isometry.iso:28
msgid ""
"if the array is not an isometry of the correct size corresponding to     "
"the provided number of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.isometry.rst:4
msgid "RawFeatureVector.isometry"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.iswap.rst:4
msgid "RawFeatureVector.iswap"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcp.rst:4
msgid "RawFeatureVector.mcp"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcrx.rst:4
msgid "RawFeatureVector.mcrx"
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:3
msgid "The QuantumCircuit object to apply the mcrx gate on."
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:5
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:5
msgid "angle theta"
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:7
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:7
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:7
msgid "The list of control qubits"
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:9
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:9
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:9
msgid "The target qubit"
msgstr ""

#: of
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:11
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:15
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:11
msgid "use p, u, cx"
msgstr ""

#: of
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrx:14
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:18
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:14
msgid "parameter errors"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcry.rst:4
msgid "RawFeatureVector.mcry"
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:3
msgid "The QuantumCircuit object to apply the mcry gate on."
msgstr ""

#: of
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:11
msgid "The list of ancillary qubits."
msgstr ""

#: of
#: qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcry:13
msgid "The implementation mode to use"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcrz.rst:4
msgid "RawFeatureVector.mcrz"
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:3
msgid "The QuantumCircuit object to apply the mcrz gate on."
msgstr ""

#: of qiskit.circuit.library.standard_gates.multi_control_rotation_gates.mcrz:5
msgid "angle lambda"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mct.rst:4
msgid "RawFeatureVector.mct"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcu1.rst:4
msgid "RawFeatureVector.mcu1"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.mcx.rst:4
msgid "RawFeatureVector.mcx"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.mcx:3
msgid ""
"The multi-cX gate can be implemented using different techniques, which "
"use different numbers of ancilla qubits and have varying circuit depth. "
"These modes are: - 'noancilla': Requires 0 ancilla qubits. - 'recursion':"
" Requires 1 ancilla qubit if more than 4 controls are used, otherwise 0. "
"- 'v-chain': Requires 2 less ancillas than the number of control qubits. "
"- 'v-chain-dirty': Same as for the clean ancillas (but the circuit will "
"be longer)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.measure.rst:4
msgid "RawFeatureVector.measure"
msgstr ""

#: of qiskit.circuit.measure.measure:3
msgid "quantum register"
msgstr ""

#: of qiskit.circuit.measure.measure:5
msgid "classical register"
msgstr ""

#: of qiskit.circuit.measure.measure:8
msgid "the attached measure instruction."
msgstr ""

#: of qiskit.circuit.measure.measure:11
msgid ""
"if qubit is not in this circuit or bad format;     if cbit is not in this"
" circuit or not creg."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.measure_active.rst:4
msgid "RawFeatureVector.measure_active"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active:1
msgid ""
"Adds measurement to all non-idle qubits. Creates a new ClassicalRegister "
"with a size equal to the number of non-idle qubits being measured."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active:4
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all:4
msgid "Returns a new circuit with measurements if `inplace=False`."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all:6
msgid "All measurements inplace or return new circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure_active:9
#: qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all:9
msgid "Returns circuit with measurements when `inplace = False`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.measure_all.rst:4
msgid "RawFeatureVector.measure_all"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.measure_all:1
msgid ""
"Adds measurement to all qubits. Creates a new ClassicalRegister with a "
"size equal to the number of qubits being measured."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.metadata.rst:4
msgid "RawFeatureVector.metadata"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.metadata:3
msgid ""
"The metadata for the circuit is a user provided ``dict`` of metadata for "
"the circuit. It will not be used to influence the execution or operation "
"of the circuit, but it is expected to be passed between all transforms of"
" the circuit (ie transpilation) and that providers will associate any "
"circuit metadata with the results it returns from execution of that "
"circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ms.rst:4
msgid "RawFeatureVector.ms"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_ancillas.rst:4
msgid "RawFeatureVector.num_ancillas"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_clbits.rst:4
msgid "RawFeatureVector.num_clbits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_connected_components.rst:4
msgid "RawFeatureVector.num_connected_components"
msgstr ""

#: of
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components:3
msgid "Compute only unitary part of graph."
msgstr ""

#: of
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_connected_components:6
msgid "Number of connected components in circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_nonlocal_gates.rst:4
msgid "RawFeatureVector.num_nonlocal_gates"
msgstr ""

#: of
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_nonlocal_gates:1
msgid "Return number of non-local gates (i.e. involving 2+ qubits)."
msgstr ""

#: of
#: qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.num_nonlocal_gates:3
msgid "Conditional nonlocal gates are also included."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_parameters.rst:4
msgid "RawFeatureVector.num_parameters"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits.rst:4
msgid "RawFeatureVector.num_qubits"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:4
msgid "The number of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_tensor_factors.rst:4
msgid "RawFeatureVector.num_tensor_factors"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.num_tensor_factors:6
msgid ""
"This is here for backwards compatibility, and will be removed in a future"
" release of Qiskit. You should call `num_unitary_factors` instead."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_unitary_factors.rst:4
msgid "RawFeatureVector.num_unitary_factors"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.p.rst:4
msgid "RawFeatureVector.p"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.parameters.rst:4
msgid "RawFeatureVector.parameters"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.parameters:3
msgid ":py:class:`~qiskit.circuit.parametertable.ParameterView`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.pauli.rst:4
msgid "RawFeatureVector.pauli"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.power.rst:4
msgid "RawFeatureVector.power"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:3
msgid ""
"If ``power`` is a positive integer and ``matrix_power`` is ``False``, "
"this implementation defaults to calling ``repeat``. Otherwise, if the "
"circuit is unitary, the matrix is computed to calculate the matrix power."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:7
msgid "The power to raise this circuit to."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:9
msgid ""
"If True, the circuit is converted to a matrix and then the matrix power "
"is computed. If False, and ``power`` is a positive integer, the "
"implementation defaults to ``repeat``."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:14
msgid "If the circuit needs to be converted to a gate but it is not unitary."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.power:16
msgid "A circuit implementing this circuit raised to the power of ``power``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.prefix.rst:4
msgid "RawFeatureVector.prefix"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qasm.rst:4
msgid "RawFeatureVector.qasm"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:3
msgid "Return formatted Qasm string."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:5
msgid "Save Qasm to file with name 'filename'."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:8
msgid "If formatted=False."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:11
msgid "If pygments is not installed and ``formatted`` is     ``True``."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.qasm:12
msgid "If circuit has free parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qbit_argument_conversion.rst:4
msgid "RawFeatureVector.qbit_argument_conversion"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qbit_argument_conversion:7
msgid "Where each tuple is a qubit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qregs.rst:4
msgid "RawFeatureVector.qregs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_duration.rst:4
msgid "RawFeatureVector.qubit_duration"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration:1
msgid ""
"Return the duration between the start and stop time of the first and last"
" instructions, excluding delays, over the supplied qubits. Its time unit "
"is ``self.unit``."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration:4
msgid "Qubits within ``self`` to include."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:9
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:9
msgid ":py:data:`~typing.Union`\\[:py:class:`int`, :py:class:`float`]"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_duration:7
msgid ""
"Return the duration between the first start and last stop time of non-"
"delay instructions"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_start_time.rst:4
msgid "RawFeatureVector.qubit_start_time"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:1
msgid ""
"Return the start time of the first instruction, excluding delays, over "
"the supplied qubits. Its time unit is ``self.unit``."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:4
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:4
msgid "Return 0 if there are no instructions over qubits"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:6
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:6
msgid ""
"Qubits within ``self`` to include. Integers are allowed for qubits, "
"indicating"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:10
msgid ""
"Return the start time of the first instruction, excluding delays, over "
"the qubits"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_start_time:12
#: qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:12
msgid "if ``self`` is a not-yet scheduled circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qubit_stop_time.rst:4
msgid "RawFeatureVector.qubit_stop_time"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:1
msgid ""
"Return the stop time of the last instruction, excluding delays, over the "
"supplied qubits. Its time unit is ``self.unit``."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.qubit_stop_time:10
msgid ""
"Return the stop time of the last instruction, excluding delays, over the "
"qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.qubits.rst:4
msgid "RawFeatureVector.qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.r.rst:4
msgid "RawFeatureVector.r"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rcccx.rst:4
msgid "RawFeatureVector.rcccx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rccx.rst:4
msgid "RawFeatureVector.rccx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.remove_final_measurements.rst:4
msgid "RawFeatureVector.remove_final_measurements"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements:1
msgid ""
"Removes final measurement on all qubits if they are present. Deletes the "
"ClassicalRegister that was used to store the values from these "
"measurements if it is idle."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements:5
msgid "Returns a new circuit without measurements if `inplace=False`."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements:7
msgid "All measurements removed inplace or return new circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.remove_final_measurements:10
msgid "Returns circuit with measurements removed when `inplace = False`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.repeat.rst:4
msgid "RawFeatureVector.repeat"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.repeat:3
msgid "How often this circuit should be repeated."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.repeat:6
msgid "A circuit containing ``reps`` repetitions of this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.reset.rst:4
msgid "RawFeatureVector.reset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.reverse_bits.rst:4
msgid "RawFeatureVector.reverse_bits"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:3
msgid ""
"The circuit is \"vertically\" flipped. If a circuit is defined over "
"multiple registers, the resulting circuit will have the same registers "
"but with their order flipped."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:7
msgid ""
"This method is useful for converting a circuit written in little-endian "
"convention to the big-endian equivalent, and vice versa."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:10
msgid "the circuit with reversed bit order."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:23
msgid "┌──────────┐"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:24
msgid "q_0: ─────┤ RX(1.57) ├"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:25
msgid "┌───┐└────┬─────┘"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:26
msgid "q_1: ┤ H ├─────■──────"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_bits:27
msgid "└───┘"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.reverse_ops.rst:4
msgid "RawFeatureVector.reverse_ops"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:3
msgid ""
"This is done by recursively reversing all instructions. It does not "
"invert (adjoint) any gate."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:6
msgid "the reversed circuit."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:20
msgid "q_0: ─────■──────┤ H ├"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:21
msgid "┌────┴─────┐└───┘"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.reverse_ops:22
msgid "q_1: ┤ RX(1.57) ├─────"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rv.rst:4
msgid "RawFeatureVector.rv"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rx.rst:4
msgid "RawFeatureVector.rx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rxx.rst:4
msgid "RawFeatureVector.rxx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ry.rst:4
msgid "RawFeatureVector.ry"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ryy.rst:4
msgid "RawFeatureVector.ryy"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rz.rst:4
msgid "RawFeatureVector.rz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rzx.rst:4
msgid "RawFeatureVector.rzx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rzz.rst:4
msgid "RawFeatureVector.rzz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.s.rst:4
msgid "RawFeatureVector.s"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.sdg.rst:4
msgid "RawFeatureVector.sdg"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.size.rst:4
msgid "RawFeatureVector.size"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.size:3
msgid "Total number of gate operations."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.snapshot.rst:4
msgid "RawFeatureVector.snapshot"
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:1
msgid ""
"Take a statevector snapshot of the internal simulator representation. "
"Works on all qubits, and prevents reordering (like barrier)."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:4
msgid "For other types of snapshots use the Snapshot extension directly."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:6
msgid "a snapshot label to report the result."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:8
msgid "the type of the snapshot."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:10
msgid "the qubits to apply snapshot to [Default: None]."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:12
msgid "the parameters for snapshot_type [Default: None]."
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:15
msgid "with attached command"
msgstr ""

#: of qiskit.extensions.simulator.snapshot.snapshot:18
msgid "malformed command"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.squ.rst:4
msgid "RawFeatureVector.squ"
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:3
msgid ""
"Note that the decomposition is up to a global phase shift. (This is a "
"well known decomposition, which can be found for example in Nielsen and "
"Chuang's book \"Quantum computation and quantum information\".)"
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:7
msgid "2*2 unitary (given as a (complex) ndarray)."
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:9
msgid "The qubit which the gate is acting on."
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:11
msgid ""
"determines the used decomposition by providing the rotation axes. The "
"allowed modes are: \"ZYZ\" (default)"
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:14
msgid ""
"if set to True, the single-qubit unitary is decomposed up to a diagonal "
"matrix, i.e. a unitary u' is implemented such that there exists a 2*2 "
"diagonal gate d with u = d.dot(u')"
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:18
msgid "Deprecated, use ``unitary_matrix`` instead."
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:21
msgid "The single-qubit unitary instruction attached to the circuit."
msgstr ""

#: of qiskit.extensions.quantum_initializer.squ.squ:24
msgid "if the format is wrong; if the array u is not unitary"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.swap.rst:4
msgid "RawFeatureVector.swap"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.sx.rst:4
msgid "RawFeatureVector.sx"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.sxdg.rst:4
msgid "RawFeatureVector.sxdg"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.t.rst:4
msgid "RawFeatureVector.t"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.tdg.rst:4
msgid "RawFeatureVector.tdg"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.tensor.rst:4
msgid "RawFeatureVector.tensor"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:3
msgid ""
"Remember that in the little-endian convention the leftmost operation will"
" be at the bottom of the circuit. See also [the "
"docs](qiskit.org/documentation/tutorials/circuits/3_summary_of_quantum_operations.html)"
" for more information."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:16
msgid "The other circuit to tensor this circuit with."
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.tensor:33
msgid "The tensored circuit (returns None if inplace==True)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.to_gate.rst:4
msgid "RawFeatureVector.to_gate"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate:3
msgid ""
"For parameterized circuits, a mapping from parameters in the circuit to "
"parameters to be used in the gate. If None, existing circuit parameters "
"will also parameterize the gate."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate:8
msgid "Optional gate label."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_gate:11
msgid "a composite gate encapsulating this circuit (can be decomposed back)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.to_instruction.rst:4
msgid "RawFeatureVector.to_instruction"
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction:3
msgid ""
"For parameterized circuits, a mapping from parameters in the circuit to "
"parameters to be used in the instruction. If None, existing circuit "
"parameters will also parameterize the instruction."
msgstr ""

#: of qiskit.circuit.library.blueprintcircuit.BlueprintCircuit.to_instruction:9
msgid ""
"a composite instruction encapsulating this circuit (can be decomposed "
"back)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.toffoli.rst:4
msgid "RawFeatureVector.toffoli"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.u.rst:4
msgid "RawFeatureVector.u"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.u1.rst:4
msgid "RawFeatureVector.u1"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.u2.rst:4
msgid "RawFeatureVector.u2"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.u3.rst:4
msgid "RawFeatureVector.u3"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.uc.rst:4
msgid "RawFeatureVector.uc"
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:3
msgid ""
"The decomposition was introduced by Bergholm et al. in "
"https://arxiv.org/pdf/quant-ph/0410066.pdf."
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:6
msgid ""
"list of two qubit unitaries [U_0,...,U_{2^k-1}], where each single-qubit "
"unitary U_i is a given as a 2*2 array"
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:9
msgid ""
"list of k control qubits. The qubits are ordered according to their "
"significance in the computational basis. For example if "
"q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the unitary U_0 is "
"performed if q[1] and q[2] are in the state zero, U_1 is performed if "
"q[2] is in the state zero and q[1] is in the state one, and so on"
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:15
msgid "target qubit, where we act on with the single-qubit gates."
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:18
msgid ""
"If set to True, the uniformly controlled gate is decomposed up to a "
"diagonal gate, i.e. a unitary u' is implemented such that there exists a "
"diagonal gate d with u = d.dot(u'), where the unitary u describes the "
"uniformly controlled gate"
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:24
msgid "the uniformly controlled gate is attached to the circuit."
msgstr ""

#: of qiskit.extensions.quantum_initializer.uc.uc:27
#: qiskit.extensions.quantum_initializer.ucrx.ucrx:21
#: qiskit.extensions.quantum_initializer.ucry.ucry:21
msgid ""
"if the list number of control qubits does not correspond to the provided"
"     number of single-qubit unitaries; if an input is of the wrong type"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ucrx.rst:4
msgid "RawFeatureVector.ucrx"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:3
#: qiskit.extensions.quantum_initializer.ucry.ucry:3
#: qiskit.extensions.quantum_initializer.ucrz.ucrz:3
msgid ""
"The decomposition is base on https://arxiv.org/pdf/quant-ph/0406176.pdf "
"by Shende et al."
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:5
#: qiskit.extensions.quantum_initializer.ucry.ucry:5
msgid "list of (real) rotation angles :math:`[a_0,...,a_{2^k-1}]`"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:7
msgid ""
"list of k control qubits (or empty list if no controls). The control "
"qubits are ordered according to their significance in increasing order: "
"For example if ``q_controls=[q[0],q[1]]`` (with ``q = "
"QuantumRegister(2)``), the rotation ``Rx(a_0)`` is performed if ``q[0]`` "
"and ``q[1]`` are in the state zero, the rotation ``Rx(a_1)`` is performed"
" if ``q[0]`` is in the state one and ``q[1]`` is in the state zero, and "
"so on"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:14
#: qiskit.extensions.quantum_initializer.ucry.ucry:14
#: qiskit.extensions.quantum_initializer.ucrz.ucrz:14
msgid "target qubit, where we act on with the single-qubit rotation gates"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrx.ucrx:18
#: qiskit.extensions.quantum_initializer.ucry.ucry:18
#: qiskit.extensions.quantum_initializer.ucrz.ucrz:18
msgid "the uniformly controlled rotation gate is attached to the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ucry.rst:4
msgid "RawFeatureVector.ucry"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucry.ucry:7
msgid ""
"list of k control qubits (or empty list if no controls). The control "
"qubits are ordered according to their significance in increasing order: "
"For example if ``q_controls=[q[0],q[1]]`` (with ``q = "
"QuantumRegister(2)``), the rotation ``Ry(a_0)`` is performed if ``q[0]`` "
"and ``q[1]`` are in the state zero, the rotation ``Ry(a_1)`` is performed"
" if ``q[0]`` is in the state one and ``q[1]`` is in the state zero, and "
"so on"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.ucrz.rst:4
msgid "RawFeatureVector.ucrz"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrz.ucrz:5
msgid "list of (real) rotation angles [a_0,...,a_{2^k-1}]"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrz.ucrz:7
msgid ""
"list of k control qubits (or empty list if no controls). The control "
"qubits are ordered according to their significance in increasing order: "
"For example if q_controls=[q[1],q[2]] (with q = QuantumRegister(2)), the "
"rotation Rz(a_0)is performed if q[1] and q[2] are in the state zero, the "
"rotation  Rz(a_1) is performed if q[1] is in the state one and q[2] is in"
" the state zero, and so on"
msgstr ""

#: of qiskit.extensions.quantum_initializer.ucrz.ucrz:21
msgid ""
"if the list number of control qubits does not correspond to     the "
"provided number of single-qubit unitaries; if an input is of     the "
"wrong type"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.unitary.rst:4
msgid "RawFeatureVector.unitary"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.width.rst:4
msgid "RawFeatureVector.width"
msgstr ""

#: of qiskit.circuit.quantumcircuit.QuantumCircuit.width:3
msgid "Width of circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.x.rst:4
msgid "RawFeatureVector.x"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.y.rst:4
msgid "RawFeatureVector.y"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.z.rst:4
msgid "RawFeatureVector.z"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.ad_hoc_data.rst:4
msgid "ad_hoc_data"
msgstr ""

#: of qiskit_machine_learning.datasets.ad_hoc.ad_hoc_data:1
msgid "returns ad hoc dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.breast_cancer.rst:4
msgid "breast_cancer"
msgstr ""

#: of qiskit_machine_learning.datasets.breast_cancer.breast_cancer:1
msgid "returns breast cancer dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.digits.rst:4
msgid "digits"
msgstr ""

#: of qiskit_machine_learning.datasets.digits.digits:1
msgid "returns digits dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.gaussian.rst:4
msgid "gaussian"
msgstr ""

#: of qiskit_machine_learning.datasets.gaussian.gaussian:1
msgid "returns gaussian dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.iris.rst:4
msgid "iris"
msgstr ""

#: of qiskit_machine_learning.datasets.iris.iris:1
msgid "returns iris dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.sample_ad_hoc_data.rst:4
msgid "sample_ad_hoc_data"
msgstr ""

#: of qiskit_machine_learning.datasets.ad_hoc.sample_ad_hoc_data:1
msgid "returns sample ad hoc data"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.wine.rst:4
msgid "wine"
msgstr ""

#: of qiskit_machine_learning.datasets.wine.wine:1
msgid "returns wine dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:4
msgid "QuantumKernel"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:1
msgid "Quantum Kernel."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:3
msgid ""
"The general task of machine learning is to find and study patterns in "
"data. For many algorithms, the datapoints are better understood in a "
"higher dimensional feature space, through the use of a kernel function:"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:7
msgid "K(x, y) = \\langle f(x), f(y)\\rangle."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:11
msgid ""
"Here K is the kernel function, x, y are n dimensional inputs. f is a map "
"from n-dimension to m-dimension space. :math:`\\langle x, y \\rangle` "
"denotes the dot product. Usually m is much larger than n."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:15
msgid ""
"The quantum kernel algorithm calculates a kernel matrix, given datapoints"
" x and y and feature map f, all of n dimension. This kernel matrix can "
"then be used in classical machine learning algorithms such as support "
"vector classification, spectral clustering or ridge regression."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:20
msgid ""
"Parameterized circuit to be used as the feature map. If None is given, "
"the `ZZFeatureMap` is used with two qubits."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:23
msgid ""
"Project to closest positive semidefinite matrix if x = y. Only enforced "
"when not using the state vector simulator. Default True."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:26
msgid "Number of circuits to batch together for computation. Default 1000."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:28:<autosummary>:1
msgid ""
":obj:`QuantumKernel.feature_map "
"<qiskit_machine_learning.kernels.QuantumKernel.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:28:<autosummary>:1
#: of qiskit_machine_learning.kernels.QuantumKernel.feature_map:1
msgid "Returns feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:28:<autosummary>:1
msgid ""
":obj:`QuantumKernel.quantum_instance "
"<qiskit_machine_learning.kernels.QuantumKernel.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:28:<autosummary>:1
#: of qiskit_machine_learning.kernels.QuantumKernel.quantum_instance:1
msgid "Returns quantum instance"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:35:<autosummary>:1
msgid ""
":obj:`QuantumKernel.construct_circuit "
"<qiskit_machine_learning.kernels.QuantumKernel.construct_circuit>`\\ "
"\\(x\\[\\, y\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:35:<autosummary>:1
#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:1
msgid "Construct inner product circuit for given datapoints and feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:35:<autosummary>:1
msgid ""
":obj:`QuantumKernel.evaluate "
"<qiskit_machine_learning.kernels.QuantumKernel.evaluate>`\\ "
"\\(x\\_vec\\[\\, y\\_vec\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:35:<autosummary>:1
#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:1
msgid "Construct kernel matrix for given data and feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.construct_circuit.rst:4
msgid "QuantumKernel.construct_circuit"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:3
msgid ""
"If using `statevector_simulator`, only construct circuit for "
":math:`\\Psi(x)|0\\rangle`, otherwise construct :math:`Psi^dagger(y) x "
"Psi(x)|0>` If y is None and not using `statevector_simulator`, self inner"
" product is calculated."
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:8
msgid "first data point parameter vector"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:10
msgid "second data point parameter vector, ignored if using statevector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:12
msgid "include measurement if not using statevector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:14
msgid "use state vector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:17
msgid "QuantumCircuit"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:19
msgid "- x and/or y have incompatible dimension with feature map"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:19
msgid "x and/or y have incompatible dimension with feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.evaluate.rst:4
msgid "QuantumKernel.evaluate"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:3
msgid ""
"If y_vec is None, self inner product is calculated. If using "
"`statevector_simulator`, only build circuits for "
":math:`\\Psi(x)|0\\rangle`, then perform inner product classically."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:8
msgid ""
"1D or 2D array of datapoints, NxD, where N is the number of datapoints, D"
" is the feature dimension"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:11
msgid ""
"1D or 2D array of datapoints, MxD, where M is the number of datapoints, D"
" is the feature dimension"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:15
msgid "2D matrix, NxM"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:17
msgid "- A quantum instance or backend has not been provided"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:17
msgid "A quantum instance or backend has not been provided"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:18
msgid ""
"- x_vec and/or y_vec are not one or two dimensional arrays     - x_vec "
"and y_vec have have incompatible dimensions     - x_vec and/or y_vec have"
" incompatible dimension with feature map and         and feature map can "
"not be modified to match."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:18
msgid ""
"x_vec and/or y_vec are not one or two dimensional arrays     - x_vec and "
"y_vec have have incompatible dimensions     - x_vec and/or y_vec have "
"incompatible dimension with feature map and         and feature map can "
"not be modified to match."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.feature_map.rst:4
msgid "QuantumKernel.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.quantum_instance.rst:4
msgid "QuantumKernel.quantum_instance"
msgstr ""

#: of qiskit_machine_learning.kernels.QuantumKernel.quantum_instance:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance:3
msgid ":py:class:`~qiskit.utils.quantum_instance.QuantumInstance`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:4
msgid "CircuitQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:1
msgid "A Sampling Neural Network based on a given quantum circuit."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:3
msgid "Initializes the Circuit Quantum Neural Network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:6
msgid ""
"The parametrized quantum circuit that generates the samples of this "
"network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:8
msgid "The parameters of the circuit corresponding to the input."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:10
msgid "The parameters of the circuit corresponding to the trainable weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.sparse:1
#: qiskit_machine_learning.neural_networks.NeuralNetwork.sparse:1
#: qiskit_machine_learning.neural_networks.OpflowQNN.sparse:1
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sparse:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.sparse:1
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:12
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:9
msgid "Returns whether the output is sparse or not."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:14
msgid ""
"Determines whether the network returns a batch of samples or (possibly "
"sparse) array of probabilities in its forward pass. In case of "
"probabilities, the backward pass returns the probability gradients, while"
" it returns (None, None) in the case of samples. Note that sampling==True"
" will always result in a dense return array independent of the other "
"settings."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:20
msgid ""
"A callable that maps the measured integer to another unsigned integer or "
"tuple of unsigned integers. These are used as new indices for the "
"(potentially sparse) output array. If this is used, the output shape of "
"the output needs to be given as a separate argument."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:25
msgid ""
"The output shape of the custom interpretation. The output shape is "
"automatically determined in case of sampling==True."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:28
msgid "The gradient converter to be used for the probability gradients."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:30
msgid "The quantum instance to evaluate the circuits."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:32
msgid "if `interpret` is passed without `output_shape`."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.circuit "
"<qiskit_machine_learning.neural_networks.CircuitQNN.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.input_params "
"<qiskit_machine_learning.neural_networks.CircuitQNN.input_params>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.input_params:1
msgid "Returns the list of input parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.num_inputs "
"<qiskit_machine_learning.neural_networks.CircuitQNN.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.num_inputs:1
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs:1
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_inputs:1
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_inputs:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_inputs:1
msgid "Returns the number of input features."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.num_weights "
"<qiskit_machine_learning.neural_networks.CircuitQNN.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.num_weights:1
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights:1
#: qiskit_machine_learning.neural_networks.OpflowQNN.num_weights:1
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_weights:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_weights:1
msgid "Returns the number of trainable weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.output_shape "
"<qiskit_machine_learning.neural_networks.CircuitQNN.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.output_shape:1
#: qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape:1
#: qiskit_machine_learning.neural_networks.OpflowQNN.output_shape:1
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.output_shape:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.output_shape:1
msgid "Returns the output shape."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.quantum_instance "
"<qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance:1
msgid "Returns the quantum instance to evaluate the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.sampling "
"<qiskit_machine_learning.neural_networks.CircuitQNN.sampling>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.sampling:1
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling:1
msgid ""
"Returns: ``True`` if the network returns a batch of samples and ``False``"
" if a sparse vector (dictionary) of probabilities in its forward pass."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.sparse "
"<qiskit_machine_learning.neural_networks.CircuitQNN.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
msgid ""
":obj:`CircuitQNN.weight_params "
"<qiskit_machine_learning.neural_networks.CircuitQNN.weight_params>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.weight_params:1
msgid "Returns the list of trainable weights parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.backward "
"<qiskit_machine_learning.neural_networks.CircuitQNN.backward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:37:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:42:<autosummary>:1
#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:1
msgid "Backward pass of the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.forward "
"<qiskit_machine_learning.neural_networks.CircuitQNN.forward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:37:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:38:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:42:<autosummary>:1
#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:1
msgid "Forward pass of the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.probabilities "
"<qiskit_machine_learning.neural_networks.CircuitQNN.probabilities>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid "Histogram (as dict) of the samples from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.probability_gradients "
"<qiskit_machine_learning.neural_networks.CircuitQNN.probability_gradients>`\\"
" \\(input\\_data\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid "Probability gradients of histogram resulting from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.sample "
"<qiskit_machine_learning.neural_networks.CircuitQNN.sample>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid "Samples from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid ""
":obj:`CircuitQNN.set_interpret "
"<qiskit_machine_learning.neural_networks.CircuitQNN.set_interpret>`\\ "
"\\(interpret\\[\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:46:<autosummary>:1
msgid "Change 'interpret' and corresponding 'output_shape'."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.backward.rst:4
msgid "CircuitQNN.backward"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:4
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:4
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:5
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:7
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:5
msgid ""
"input data of the shape (num_inputs). In case of a single scalar input it"
" is directly cast to and interpreted like a one-element array."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:7
msgid ""
"trainable weights of the shape (num_weights). In case of a single scalar "
"weight"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:10
msgid ""
":py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`,"
" :py:class:`~sparse._sparse_array.SparseArray`, :py:obj:`None`], "
":py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~sparse._sparse_array.SparseArray`, :py:obj:`None`]]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:11
msgid ""
"The result of the neural network of the backward pass, i.e., a tuple with"
" the gradients for input and weights of shape (output_shape, num_input) "
"and (output_shape, num_weights), respectively."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.circuit.rst:4
msgid "CircuitQNN.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.forward.rst:4
msgid "CircuitQNN.forward"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:7
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:8
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:10
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:8
msgid ""
"trainable weights of the shape (num_weights). In case of a single scalar "
"weight it is directly cast to and interpreted like a one-element array."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:10
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:11
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~sparse._sparse_array.SparseArray`]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:11
msgid "The result of the neural network of the shape (output_shape)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.input_params.rst:4
msgid "CircuitQNN.input_params"
msgstr ""

#: of qiskit_machine_learning.neural_networks.CircuitQNN.input_params:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.weight_params:3
msgid ":py:class:`~typing.List`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.num_inputs.rst:4
msgid "CircuitQNN.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.num_weights.rst:4
msgid "CircuitQNN.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.output_shape.rst:4
msgid "CircuitQNN.output_shape"
msgstr ""

#: of qiskit_machine_learning.neural_networks.CircuitQNN.output_shape:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape:3
#: qiskit_machine_learning.neural_networks.OpflowQNN.output_shape:3
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.output_shape:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.output_shape:3
msgid ":py:data:`~typing.Tuple`\\[:py:class:`int`, ...]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.probabilities.rst:4
msgid "CircuitQNN.probabilities"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:1
msgid ""
"Histogram (as dict) of the samples from the network. Returns an array of "
"samples. Format depends on the set interpret function."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:12
msgid "The sample histogram of the neural network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.probability_gradients.rst:4
msgid "CircuitQNN.probability_gradients"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:1
msgid ""
"Probability gradients of histogram resulting from the network. Format "
"depends on the set interpret function. Shape is (input_grad, "
"weights_grad), where each grad has one dict for each parameter and each "
"dict contains as value the derivative of the probability of measuring the"
" key."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:13
msgid ""
":py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`,"
" :py:class:`~sparse._sparse_array.SparseArray`], "
":py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~sparse._sparse_array.SparseArray`]]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:14
msgid "The probability gradients."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance.rst:4
msgid "CircuitQNN.quantum_instance"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.sample.rst:4
msgid "CircuitQNN.sample"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:1
msgid ""
"Samples from the network. Returns an array of samples. Format depends on "
"the set interpret function."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:12
msgid "The sample results of the neural network of the shape (output_shape)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.sampling.rst:4
msgid "CircuitQNN.sampling"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.set_interpret.rst:4
msgid "CircuitQNN.set_interpret"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN.set_interpret:1
msgid ""
"Change 'interpret' and corresponding 'output_shape'. If "
"self.sampling==True, the output _shape does not have to be set and is "
"inferred from the interpret function. Otherwise, the output_shape needs "
"to be given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.sparse.rst:4
msgid "CircuitQNN.sparse"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.weight_params.rst:4
msgid "CircuitQNN.weight_params"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:4
msgid "NeuralNetwork"
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:1
msgid ""
"Abstract Neural Network class providing forward and backward pass and "
"handling batched inputs. This is to be implemented by other (quantum) "
"neural networks."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:4
msgid ""
"Initializes the Neural Network. :type num_inputs: :py:class:`int` :param "
"num_inputs: The number of input features. :type num_weights: "
":py:class:`int` :param num_weights: The number of trainable weights. "
":type sparse: :py:class:`bool` :param sparse: Determines whether the "
"output is a sparse array or not. :type output_shape: "
":py:data:`~typing.Union`\\[:py:class:`int`, "
":py:data:`~typing.Tuple`\\[:py:class:`int`, ...]] :param output_shape: "
"The shape of the output."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:14
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:18
msgid "Invalid parameter values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.num_inputs "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.num_weights "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.output_shape "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.sparse "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:37:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.backward "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.backward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:37:<autosummary>:1
msgid ""
":obj:`NeuralNetwork.forward "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.forward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.backward.rst:4
msgid "NeuralNetwork.backward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.forward.rst:4
msgid "NeuralNetwork.forward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs.rst:4
msgid "NeuralNetwork.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights.rst:4
msgid "NeuralNetwork.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape.rst:4
msgid "NeuralNetwork.output_shape"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.sparse.rst:4
msgid "NeuralNetwork.sparse"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:4
msgid "OpflowQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:1
msgid "Opflow Quantum Neural Network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:3
msgid "Initializes the Opflow Quantum Neural Network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:6
msgid "The parametrized operator that represents the neural network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:8
msgid "The operator parameters that correspond to the input of the network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:10
msgid "The operator parameters that correspond to the trainable weights."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:12
msgid "The Expected Value converter to be used for the operator."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:14
msgid "The Gradient converter to be used for the operator's backward pass."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:16
msgid "The quantum instance to evaluate the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
msgid ""
":obj:`OpflowQNN.num_inputs "
"<qiskit_machine_learning.neural_networks.OpflowQNN.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
msgid ""
":obj:`OpflowQNN.num_weights "
"<qiskit_machine_learning.neural_networks.OpflowQNN.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
msgid ""
":obj:`OpflowQNN.operator "
"<qiskit_machine_learning.neural_networks.OpflowQNN.operator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.OpflowQNN.operator:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.operator:1
msgid "Returns the underlying operator of this QNN."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
msgid ""
":obj:`OpflowQNN.output_shape "
"<qiskit_machine_learning.neural_networks.OpflowQNN.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31:<autosummary>:1
msgid ""
":obj:`OpflowQNN.sparse "
"<qiskit_machine_learning.neural_networks.OpflowQNN.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:38:<autosummary>:1
msgid ""
":obj:`OpflowQNN.backward "
"<qiskit_machine_learning.neural_networks.OpflowQNN.backward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:38:<autosummary>:1
msgid ""
":obj:`OpflowQNN.forward "
"<qiskit_machine_learning.neural_networks.OpflowQNN.forward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.backward.rst:4
msgid "OpflowQNN.backward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.forward.rst:4
msgid "OpflowQNN.forward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.num_inputs.rst:4
msgid "OpflowQNN.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.num_weights.rst:4
msgid "OpflowQNN.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.operator.rst:4
msgid "OpflowQNN.operator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.output_shape.rst:4
msgid "OpflowQNN.output_shape"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.sparse.rst:4
msgid "OpflowQNN.sparse"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:4
msgid "SamplingNeuralNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:1
msgid ""
"A Sampling Neural Network abstract class for all (quantum) neural "
"networks within Qiskit's machine learning module that generate samples "
"instead of (expected) values."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:5
msgid "The number of input features."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:7
msgid "The number of trainable weights."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:11
msgid ""
"Determines whether the network returns a batch of samples or (possibly "
"sparse) array of probabilities in its forward pass. In case of "
"probabilities, the backward pass returns the probability gradients, while"
" it returns (None, None) in the case of samples."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:16
msgid "The shape of the output."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.num_inputs "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.num_weights "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.output_shape "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.sampling "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:31:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.sparse "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.backward "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.backward>`\\"
" \\(input\\_data\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.forward "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.forward>`\\"
" \\(input\\_data\\, ...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.probabilities "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probabilities>`\\"
" \\(...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.probability_gradients "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probability_gradients>`\\"
" \\(...\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:41:<autosummary>:1
msgid ""
":obj:`SamplingNeuralNetwork.sample "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sample>`\\"
" \\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.backward.rst:4
msgid "SamplingNeuralNetwork.backward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.forward.rst:4
msgid "SamplingNeuralNetwork.forward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_inputs.rst:4
msgid "SamplingNeuralNetwork.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.num_weights.rst:4
msgid "SamplingNeuralNetwork.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.output_shape.rst:4
msgid "SamplingNeuralNetwork.output_shape"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probabilities.rst:4
msgid "SamplingNeuralNetwork.probabilities"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probability_gradients.rst:4
msgid "SamplingNeuralNetwork.probability_gradients"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sample.rst:4
msgid "SamplingNeuralNetwork.sample"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling.rst:4
msgid "SamplingNeuralNetwork.sampling"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sparse.rst:4
msgid "SamplingNeuralNetwork.sparse"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:4
msgid "TwoLayerQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:1
msgid ""
"Two Layer Quantum Neural Network consisting of a feature map, a ansatz, "
"and an observable."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:4
msgid "Initializes the Two Layer Quantum Neural Network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:7
msgid ""
"The number of qubits to represent the network, if None and neither the "
"feature_map not the ansatz are given, raise exception."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:10
msgid ""
"The (parametrized) circuit to be used as feature map. If None is given, "
"the `ZZFeatureMap` is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:13
msgid ""
"The (parametrized) circuit to be used as ansatz. If None is given, the "
"`RealAmplitudes` circuit is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:16
msgid ""
"observable to be measured to determine the output of the network. If None"
" is given, the `Z^{\\otimes num_qubits}` observable is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:19
msgid "In case of inconsistent num_qubits, feature_map, ansatz."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.ansatz "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.circuit "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.feature_map "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.num_inputs "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.num_qubits "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.num_weights "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.operator "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.operator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.output_shape "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:35:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.sparse "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:42:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.backward "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.backward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:42:<autosummary>:1
msgid ""
":obj:`TwoLayerQNN.forward "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.forward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz.rst:4
msgid "TwoLayerQNN.ansatz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.backward.rst:4
msgid "TwoLayerQNN.backward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit.rst:4
msgid "TwoLayerQNN.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map.rst:4
msgid "TwoLayerQNN.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.forward.rst:4
msgid "TwoLayerQNN.forward"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.num_inputs.rst:4
msgid "TwoLayerQNN.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits.rst:4
msgid "TwoLayerQNN.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.num_weights.rst:4
msgid "TwoLayerQNN.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.operator.rst:4
msgid "TwoLayerQNN.operator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.output_shape.rst:4
msgid "TwoLayerQNN.output_shape"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.sparse.rst:4
msgid "TwoLayerQNN.sparse"
msgstr ""

