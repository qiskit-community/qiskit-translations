# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2021, Qiskit Machine Learning Development Team
# This file is distributed under the same license as the Qiskit Machine
# Learning package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Machine Learning 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-12 22:21+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../stubs/qiskit_machine_learning.QiskitMachineLearningError.rst:4
msgid "QiskitMachineLearningError"
msgstr ""

#: of qiskit_machine_learning.exceptions.QiskitMachineLearningError:1
msgid "Class for errors returned by Qiskit's machine learning module."
msgstr ""

#: of qiskit_machine_learning.exceptions.QiskitMachineLearningError:3
msgid "Set the error message."
msgstr ""

#: of qiskit_machine_learning.QiskitMachineLearningError.with_traceback:1
msgid ""
"Exception.with_traceback(tb) -- set self.__traceback__ to tb and return "
"self."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:4
msgid "BinaryObjectiveFunction"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:1
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:1
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:1
msgid ""
"An objective function for binary representation of the output, e.g. "
"classes of ``-1`` and ``+1``."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.algorithms.regressors.qsvr.QSVR
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient
msgid "Parameters"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:4
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:4
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:4
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:5
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:5
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:5
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:5
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:4
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:4
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit:4
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict:4
msgid "The input data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:6
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:6
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:7
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:7
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:7
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:7
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:6
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit:6
msgid "The target values."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:9
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:9
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:9
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:9
msgid ""
"An instance of an quantum neural network to be used by this objective "
"function."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction:12
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:12
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:12
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:12
msgid "A target loss function to be used in training."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:22
#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:22
#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:30
#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:22
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:29
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:29
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:30
#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:22
#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:22
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:30
#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:39
#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:30
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:30
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:33
#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:34
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:33
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:32
#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:31
#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:33
#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:31
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:34
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:34
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:31
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:30
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:33
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:22
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:22
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:22
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:22
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:22
msgid "Methods"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.algorithms.BinaryObjectiveFunction.gradient>`\\ "
"\\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:27:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient:1
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient:1
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient:1
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient:1
msgid "Computes gradients of this objective function given weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`objective "
"<qiskit_machine_learning.algorithms.BinaryObjectiveFunction.objective>`\\"
" \\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:27:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective:1
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective:1
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective:1
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective:1
msgid "Computes the value of this objective function given weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.gradient.rst:4
msgid "BinaryObjectiveFunction.gradient"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient:4
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective:4
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient:4
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective:4
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient:4
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective:4
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient:4
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective:4
msgid "an array of weights to be used in the objective function."
msgstr ""

#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.QGAN.backend
#: qiskit_machine_learning.algorithms.QGAN.d_loss
#: qiskit_machine_learning.algorithms.QGAN.g_loss
#: qiskit_machine_learning.algorithms.QGAN.quantum_instance
#: qiskit_machine_learning.algorithms.QGAN.rel_entr
#: qiskit_machine_learning.algorithms.QSVC.quantum_kernel
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel
#: qiskit_machine_learning.algorithms.QuantumGenerator.discriminator
#: qiskit_machine_learning.algorithms.QuantumGenerator.optimizer
#: qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values
#: qiskit_machine_learning.algorithms.QuantumGenerator.seed
#: qiskit_machine_learning.algorithms.TrainableModel.initial_point
#: qiskit_machine_learning.algorithms.TrainableModel.optimizer
#: qiskit_machine_learning.algorithms.TrainableModel.warm_start
#: qiskit_machine_learning.algorithms.VQC.ansatz
#: qiskit_machine_learning.algorithms.VQC.circuit
#: qiskit_machine_learning.algorithms.VQC.feature_map
#: qiskit_machine_learning.algorithms.VQC.num_qubits
#: qiskit_machine_learning.algorithms.VQR.ansatz
#: qiskit_machine_learning.algorithms.VQR.feature_map
#: qiskit_machine_learning.algorithms.VQR.num_qubits
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits
#: qiskit_machine_learning.connectors.TorchConnector.neural_network
#: qiskit_machine_learning.connectors.TorchConnector.sparse
#: qiskit_machine_learning.connectors.TorchConnector.weight
#: qiskit_machine_learning.connectors.TorchConnector.weights
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward
#: qiskit_machine_learning.kernels.QuantumKernel.feature_map
#: qiskit_machine_learning.kernels.QuantumKernel.quantum_instance
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit
#: qiskit_machine_learning.neural_networks.CircuitQNN.input_gradients
#: qiskit_machine_learning.neural_networks.CircuitQNN.input_params
#: qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance
#: qiskit_machine_learning.neural_networks.CircuitQNN.weight_params
#: qiskit_machine_learning.neural_networks.NeuralNetwork.input_gradients
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights
#: qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape
#: qiskit_machine_learning.neural_networks.NeuralNetwork.sparse
#: qiskit_machine_learning.neural_networks.OpflowQNN.input_gradients
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.__call__
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient
msgid "Return type"
msgstr ""

#: of qiskit_machine_learning.algorithms.TrainableModel.initial_point:3
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:8
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient:6
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient:6
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient:6
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:8
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict:8
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:14
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.gradient:4
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.__call__:4
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:10
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:10
msgid ":py:class:`~numpy.ndarray`"
msgstr ""

#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net
#: qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient
msgid "Returns"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.gradient:7
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.gradient:7
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.gradient:7
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.gradient:7
msgid "Gradients of the function."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.BinaryObjectiveFunction.objective.rst:4
msgid "BinaryObjectiveFunction.objective"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:12
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr:4
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective:6
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective:6
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective:6
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:12
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:12
msgid ":py:class:`float`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.BinaryObjectiveFunction.objective:7
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction.objective:7
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction.objective:7
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction.objective:7
msgid "Value of the function."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:4
msgid "DiscriminativeNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork:1
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss:1
msgid "Bases: :class:`abc.ABC`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork:1
msgid "Base class for discriminative Quantum or Classical Neural Networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork:3
msgid ""
"This method should initialize the module but raise an exception if a "
"required component of the module is not available."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`get_label "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.get_label>`\\ "
"\\(x\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:1
msgid ""
"Apply quantum/classical neural network to the given input sample and "
"compute the respective data label"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`loss "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.loss>`\\ "
"\\(x\\, y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.loss:1
msgid "Loss function used for optimization"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`save_model "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model:1
msgid "Save discriminator model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`set_seed "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed:1
msgid "Set seed."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
msgid ""
":obj:`train "
"<qiskit_machine_learning.algorithms.DiscriminativeNetwork.train>`\\ "
"\\(data\\, weights\\[\\, penalty\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:1
msgid "Perform one training step w.r.t to the discriminator's parameters"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.get_label.rst:4
msgid "DiscriminativeNetwork.get_label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:5
msgid "input, i.e. data sample."
msgstr ""

#: of qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork
#: qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient
msgid "Raises"
msgstr ""

#: of qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.get_label:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:12
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:21
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:15
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:13
msgid "not implemented"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.loss.rst:4
msgid "DiscriminativeNetwork.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:4
msgid "output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:6
msgid "the data point"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:7
msgid "Data weights."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.loss:10
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:10
msgid "Loss w.r.t to the generated data points."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.save_model.rst:4
msgid "DiscriminativeNetwork.save_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.save_model:4
msgid "Directory to save the model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.set_seed.rst:4
msgid "DiscriminativeNetwork.set_seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.set_seed:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.set_seed:4
msgid "seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.train.rst:4
msgid "DiscriminativeNetwork.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:4
msgid "Data batch."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:6
msgid "Data sample weights."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:8
msgid ""
"Indicate whether or not penalty function is applied to the loss function."
" Ignored if no penalty function defined."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:11
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:11
msgid "used to run Quantum network. Ignored for a classical network."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:15
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:15
msgid ""
"Number of shots for hardware or qasm execution. Ignored for classical "
"network"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork.train:18
msgid "with discriminator loss and updated parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:4
msgid "GenerativeNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork:1
msgid "Base class for generative Quantum and Classical Neural Networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork:3
msgid ""
"This method should initialize the module, but raise an exception if a "
"required component of the module is not available."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:18
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:18
#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:18
#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:18
#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:18
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:18
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:18
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:18
#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:18
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:18
msgid "Attributes"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:28:<autosummary>:1
msgid ""
":obj:`parameter_values "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:28:<autosummary>:1
#: of qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values:1
msgid "Get parameter values from the generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`get_output "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.get_output>`\\ "
"\\(quantum\\_instance\\[\\, params\\, shots\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:1
msgid ""
"Apply quantum/classical neural network to given input and get the "
"respective output"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`loss <qiskit_machine_learning.algorithms.GenerativeNetwork.loss>`\\"
" \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`train "
"<qiskit_machine_learning.algorithms.GenerativeNetwork.train>`\\ "
"\\(\\[quantum\\_instance\\, shots\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.rst:36:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:1
msgid "Perform one training step w.r.t to the generator's parameters"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.get_output.rst:4
msgid "GenerativeNetwork.get_output"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:8
msgid "Quantum Instance, used to run the generator circuit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:6
msgid ""
"parameters which should be used to run the generator, if None use "
"self._params"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:9
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:14
msgid ""
"if not None use a number of shots that is different from the number set "
"in quantum_instance"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:12
msgid ""
":py:data:`~typing.Tuple`\\[:py:class:`~typing.List`, "
":py:class:`~typing.List`]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.get_output:13
msgid "Neural network output"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.loss.rst:4
msgid "GenerativeNetwork.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.parameter_values.rst:4
msgid "GenerativeNetwork.parameter_values"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.train.rst:4
msgid "GenerativeNetwork.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:3
msgid "used to run generator network. Ignored for a classical network."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork.train:10
msgid "generator loss and updated parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:4
msgid "MultiClassObjectiveFunction"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.MultiClassObjectiveFunction:1
msgid ""
"An objective function for multiclass representation of the output, e.g. "
"classes of ``0``, ``1``, ``2``, etc."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.gradient>`\\"
" \\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`objective "
"<qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.objective>`\\"
" \\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.gradient.rst:4
msgid "MultiClassObjectiveFunction.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.MultiClassObjectiveFunction.objective.rst:4
msgid "MultiClassObjectiveFunction.objective"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:4
msgid "NeuralNetworkClassifier"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.trainable_model.TrainableModel`,"
" :class:`sklearn.base.ClassifierMixin`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:1
msgid ""
"Quantum neural network classifier. Implements Scikit-Learn compatible "
"methods for classification and extends ``ClassifierMixin``. See `Scikit-"
"Learn <https://scikit-learn.org>`__ for more details."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:6
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:4
msgid ""
"An instance of an quantum neural network. If the neural network has a "
"one-dimensional output, i.e., `neural_network.output_shape=(1,)`, then it"
" is expected to return values in [-1, +1] and it can only be used for "
"binary classification. If the output is multi-dimensional, it is assumed "
"that the result is a probability distribution, i.e., that the entries are"
" non-negative and sum up to one. Then there are two options, either one-"
"hot encoding or not. In case of one-hot encoding, each probability vector"
" resulting a neural network is considered as one sample and the loss "
"function is applied to the whole vector. Otherwise, each entry of the "
"probability vector is considered as an individual sample and the loss "
"function is applied to the index and weighted with the corresponding "
"probability."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:17
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:17
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:15
msgid ""
"A target loss function to be used in training. Default is "
"`squared_error`, i.e. L2 loss. Can be given either as a string for "
"'absolute_error' (i.e. L1 Loss), 'squared_error', 'cross_entropy', "
"'cross_entropy_sigmoid', or as a loss function implementing the Loss "
"interface."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:22
msgid ""
"Determines in the case of a multi-dimensional result of the "
"neural_network how to interpret the result. If True it is interpreted as "
"a single one-hot-encoded sample (e.g. for 'CrossEntropy' loss function), "
"and if False as a set of individual predictions with occurrence "
"probabilities (the index would be the prediction and the value the "
"corresponding frequency, e.g. for absolute/squared loss). This option is "
"ignored in case of a one-dimensional output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:29
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:13
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:22
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR:18
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:20
msgid ""
"An instance of an optimizer to be used in training. When `None` defaults "
"to SLSQP."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:31
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:15
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:24
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR:20
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:22
msgid "Use weights from previous fit to start next fit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:33
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC:17
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:26
#: qiskit_machine_learning.algorithms.regressors.vqr.VQR:22
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:24
msgid "Initial point for the optimizer to start from."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier:35
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:28
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:26
msgid "unknown loss, invalid neural network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
msgid ""
":obj:`fit "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.fit>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:1
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:1
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit:1
msgid "Fit the model to data matrix X and target(s) y."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
msgid ""
":obj:`predict "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:1
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:1
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict:1
msgid "Predict using the network specified to the model."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
msgid ""
":obj:`score "
"<qiskit_machine_learning.algorithms.NeuralNetworkClassifier.score>`\\ "
"\\(X\\, y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
msgid ""
"Returns a score of this model given samples and true values for the "
"samples."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.fit.rst:4
msgid "NeuralNetworkClassifier.fit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:8
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:8
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit:8
msgid "returns a trained model."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.fit:11
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.fit:11
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.fit:11
msgid "In case of invalid data (e.g. incompatible with network)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.predict.rst:4
msgid "NeuralNetworkClassifier.predict"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:6
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict:6
msgid "Model needs to be fit to some training data first"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.predict:9
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.predict:9
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.predict:9
msgid "The predicted classes."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.score.rst:4
msgid "NeuralNetworkClassifier.score"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:1
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:1
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:1
msgid ""
"Returns a score of this model given samples and true values for the "
"samples. In case of classification this should be mean accuracy, in case "
"of regression the coefficient of determination :math:`R^2` of the "
"prediction."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:6
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:6
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:6
msgid "Test samples."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:8
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:8
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:8
msgid "True values for ``X``."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:10
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:10
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:10
msgid "Sample weights. Default is ``None``."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier.score:13
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor.score:13
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel.score:13
msgid "a float score of the model."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:4
msgid "NeuralNetworkRegressor"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.trainable_model.TrainableModel`,"
" :class:`sklearn.base.RegressorMixin`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor:1
msgid ""
"Quantum neural network regressor. Implements Scikit-Learn compatible "
"methods for regression and extends ``RegressorMixin``. See `Scikit-Learn "
"<https://scikit-learn.org>`__ for more details."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
msgid ""
":obj:`fit "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.fit>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
msgid ""
":obj:`predict "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.predict>`\\ "
"\\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.rst:35:<autosummary>:1
msgid ""
":obj:`score "
"<qiskit_machine_learning.algorithms.NeuralNetworkRegressor.score>`\\ "
"\\(X\\, y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.fit.rst:4
msgid "NeuralNetworkRegressor.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.predict.rst:4
msgid "NeuralNetworkRegressor.predict"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.score.rst:4
msgid "NeuralNetworkRegressor.score"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:4
msgid "NumPyDiscriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:1
msgid "Discriminator based on NumPy"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:4
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:4
msgid "Dimension of input data vector."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator:6
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:6
msgid "Dimension of the discriminator's output vector."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:28:<autosummary>:1
msgid ""
":obj:`discriminator_net "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:28:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:28:<autosummary>:1
#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net:1
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net:1
msgid "Get discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`get_label "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.get_label>`\\ "
"\\(x\\[\\, detach\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:1
msgid "Get data sample labels, i.e. true or fake."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`load_model "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.load_model>`\\ "
"\\(load\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model:1
msgid "Load discriminator model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`loss "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.loss>`\\ \\(x\\, "
"y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:1
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:1
msgid "Loss function"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`save_model "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`set_seed "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.rst:39:<autosummary>:1
msgid ""
":obj:`train "
"<qiskit_machine_learning.algorithms.NumPyDiscriminator.train>`\\ "
"\\(data\\, weights\\[\\, penalty\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net.rst:4
msgid "NumPyDiscriminator.discriminator_net"
msgstr ""

#: of qiskit_machine_learning.algorithms.NumPyDiscriminator.discriminator_net:3
#: qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net:3
msgid "discriminator object"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.get_label.rst:4
msgid "NumPyDiscriminator.get_label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:3
msgid "Discriminator input, i.e. data sample."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:5
msgid "depreciated for numpy network"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.get_label:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:8
msgid "Discriminator output, i.e. data label"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.load_model.rst:4
msgid "NumPyDiscriminator.load_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.load_model:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.load_model:4
msgid "file with stored pytorch discriminator model to be loaded"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.loss.rst:4
msgid "NumPyDiscriminator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:3
msgid "sample label (equivalent to discriminator output)"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:5
msgid "target label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:7
msgid "customized scaling for each sample (optional)"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.loss:10
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:8
msgid "loss function"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.save_model.rst:4
msgid "NumPyDiscriminator.save_model"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.save_model:3
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.save_model:4
msgid "directory path for saving the model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.set_seed.rst:4
msgid "NumPyDiscriminator.set_seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.set_seed:1
msgid "Set seed. :param seed: seed :type seed: int"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.train.rst:4
msgid "NumPyDiscriminator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:3
msgid ""
"real_batch: array, Training data batch. generated_batch: array, Generated"
" data batch."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:6
msgid "real problem, generated problem"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:8
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:10
msgid "Depreciated for classical networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:12
msgid ""
"Number of shots for hardware or qasm execution. Ignored for classical "
"networks."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.numpy_discriminator.NumPyDiscriminator.train:16
msgid "with Discriminator loss and updated parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:4
msgid "ObjectiveFunction"
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:1
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:1
#: qiskit_machine_learning.algorithms.trainable_model.TrainableModel:1
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:1
msgid "Bases: :class:`object`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.ObjectiveFunction:1
msgid ""
"An abstract objective function. Provides methods for computing objective "
"value and gradients for forward and backward passes."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.algorithms.ObjectiveFunction.gradient>`\\ "
"\\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`objective "
"<qiskit_machine_learning.algorithms.ObjectiveFunction.objective>`\\ "
"\\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.gradient.rst:4
msgid "ObjectiveFunction.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.ObjectiveFunction.objective.rst:4
msgid "ObjectiveFunction.objective"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:4
msgid "OneHotObjectiveFunction"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.objective_functions.OneHotObjectiveFunction:1
msgid ""
"An objective function for one hot encoding representation of the output, "
"e.g. classes like ``[1, 0, 0]``, ``[0, 1, 0]``, ``[0, 0, 1]``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.algorithms.OneHotObjectiveFunction.gradient>`\\ "
"\\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.rst:27:<autosummary>:1
msgid ""
":obj:`objective "
"<qiskit_machine_learning.algorithms.OneHotObjectiveFunction.objective>`\\"
" \\(weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.gradient.rst:4
msgid "OneHotObjectiveFunction.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.OneHotObjectiveFunction.objective.rst:4
msgid "OneHotObjectiveFunction.objective"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:4
msgid "PyTorchDiscriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:1
msgid "Discriminator based on PyTorch"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator:8
msgid "Pytorch not installed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:28:<autosummary>:1
msgid ""
":obj:`discriminator_net "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`get_label "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.get_label>`\\ "
"\\(x\\[\\, detach\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`gradient_penalty "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.gradient_penalty>`\\"
" \\(x\\[\\, lambda\\_\\, k\\, c\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:1
msgid "Compute gradient penalty for discriminator optimization"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`load_model "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.load_model>`\\ "
"\\(load\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`loss "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.loss>`\\ \\(x\\,"
" y\\[\\, weights\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`save_model "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.save_model>`\\ "
"\\(snapshot\\_dir\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`set_seed "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.set_seed>`\\ "
"\\(seed\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.rst:40:<autosummary>:1
msgid ""
":obj:`train "
"<qiskit_machine_learning.algorithms.PyTorchDiscriminator.train>`\\ "
"\\(data\\, weights\\[\\, penalty\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.discriminator_net.rst:4
msgid "PyTorchDiscriminator.discriminator_net"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.get_label.rst:4
msgid "PyTorchDiscriminator.get_label"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.get_label:5
msgid "if None detach from torch tensor variable (optional)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.gradient_penalty.rst:4
msgid "PyTorchDiscriminator.gradient_penalty"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:3
msgid "Generated data sample."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:5
msgid "Gradient penalty coefficient 1."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:7
msgid "Gradient penalty coefficient 2."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:9
msgid "Gradient penalty coefficient 3."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.gradient_penalty:12
msgid "Gradient penalty."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.load_model.rst:4
msgid "PyTorchDiscriminator.load_model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.loss.rst:4
msgid "PyTorchDiscriminator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:3
msgid "Discriminator output."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.loss:5
msgid "Label of the data point"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.save_model.rst:4
msgid "PyTorchDiscriminator.save_model"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.set_seed.rst:4
msgid "PyTorchDiscriminator.set_seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.train.rst:4
msgid "PyTorchDiscriminator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:18
msgid ""
"with discriminator loss and updated parameters.data, weights, "
"penalty=True,   quantum_instance=None, shots=None) -> Dict[str, Any]:"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:20
msgid ""
"with discriminator loss and updated parameters.data, weights, "
"penalty=True,"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.pytorch_discriminator.PyTorchDiscriminator.train:21
msgid "quantum_instance=None, shots=None) -> Dict[str, Any]:"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:4
msgid "QGAN"
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:1
msgid "The Quantum Generative Adversarial Network algorithm."
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:3
msgid ""
"The qGAN [1] is a hybrid quantum-classical algorithm used for generative "
"modeling tasks."
msgstr ""

#: of qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:5
msgid ""
"This adaptive algorithm uses the interplay of a generative "
":class:`~qiskit_machine_learning.neural_networks.GenerativeNetwork` and a"
" discriminative "
":class:`~qiskit_machine_learning.neural_networks.DiscriminativeNetwork` "
"network to learn the probability distribution underlying given training "
"data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:10
msgid ""
"These networks are trained in alternating optimization steps, where the "
"discriminator tries to differentiate between training data samples and "
"data samples from the generator and the generator aims at generating "
"samples which the discriminator classifies as training data samples. "
"Eventually, the quantum generator learns the training data's underlying "
"probability distribution. The trained quantum generator loads a quantum "
"state which is a model of the target distribution."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:17
msgid "**References:**"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:21
msgid "[1] Zoufal et al.,"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:20
msgid ""
"`Quantum Generative Adversarial Networks for learning and loading random "
"distributions <https://www.nature.com/articles/s41534-019-0223-2>`_"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:24
msgid "Training data of dimension k"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:26
msgid ""
"k min/max data values [[min_0,max_0],...,[min_k-1,max_k-1]] if univariate"
" data: [min_0,max_0]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:29
msgid ""
"k numbers of qubits to determine representation resolution, i.e. n qubits"
" enable the representation of 2**n values [num_qubits_0,..., "
"num_qubits_k-1]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:33
msgid "Batch size, has a min. value of 1."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:35
msgid "Number of training epochs"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:37
msgid "Random number seed"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:39
msgid "Discriminates between real and fake data samples"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:41
msgid "Generates 'fake' data samples"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:43
msgid ""
"Set tolerance level for relative entropy. If the training achieves "
"relative entropy equal or lower than tolerance it finishes."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:46
msgid ""
"Directory in to which to store cvs file with parameters, if None "
"(default) then no cvs file is created."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:49
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:28
msgid "Quantum Instance or Backend"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN:51
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:15
msgid "invalid input"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`backend <qiskit_machine_learning.algorithms.QGAN.backend>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.backend:1
msgid "Returns backend."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`d_loss <qiskit_machine_learning.algorithms.QGAN.d_loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.d_loss:1
msgid "Returns discriminator loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ""
":obj:`discriminator "
"<qiskit_machine_learning.algorithms.QGAN.discriminator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.discriminator:1
msgid "Returns discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`g_loss <qiskit_machine_learning.algorithms.QGAN.g_loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.g_loss:1
msgid "Returns generator loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`generator <qiskit_machine_learning.algorithms.QGAN.generator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.generator:1
msgid "Returns generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ""
":obj:`quantum_instance "
"<qiskit_machine_learning.algorithms.QGAN.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.quantum_instance:1
msgid "Returns quantum instance."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`random <qiskit_machine_learning.algorithms.QGAN.random>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.random:1
msgid "Return a numpy random."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`rel_entr <qiskit_machine_learning.algorithms.QGAN.rel_entr>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.rel_entr:1
msgid "Returns relative entropy between target and trained distribution"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`seed <qiskit_machine_learning.algorithms.QGAN.seed>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.seed:1
msgid "Returns random seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
msgid ":obj:`tol_rel_ent <qiskit_machine_learning.algorithms.QGAN.tol_rel_ent>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:37:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QGAN.tol_rel_ent:1
msgid "Returns tolerance for relative entropy"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ""
":obj:`get_rel_entr "
"<qiskit_machine_learning.algorithms.QGAN.get_rel_entr>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.get_rel_entr:1
msgid "Get relative entropy between target and trained distribution"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ""
":obj:`run <qiskit_machine_learning.algorithms.QGAN.run>`\\ "
"\\(\\[quantum\\_instance\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid "Execute the algorithm with selected backend."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ""
":obj:`set_backend "
"<qiskit_machine_learning.algorithms.QGAN.set_backend>`\\ \\(backend\\, "
"\\*\\*kwargs\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend:1
msgid "Sets backend with configuration."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ""
":obj:`set_discriminator "
"<qiskit_machine_learning.algorithms.QGAN.set_discriminator>`\\ "
"\\(\\[discriminator\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator:1
msgid "Initialize discriminator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ""
":obj:`set_generator "
"<qiskit_machine_learning.algorithms.QGAN.set_generator>`\\ "
"\\(\\[generator\\_circuit\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:1
msgid "Initialize generator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
msgid ":obj:`train <qiskit_machine_learning.algorithms.QGAN.train>`\\ \\(\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rst:48:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train:1
msgid "Train the qGAN"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.backend.rst:4
msgid "QGAN.backend"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.backend:3
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~qiskit.providers.backend.Backend`,"
" :py:class:`~qiskit.providers.basebackend.BaseBackend`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.d_loss.rst:4
msgid "QGAN.d_loss"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.d_loss:3
#: qiskit_machine_learning.algorithms.QGAN.g_loss:3
#: qiskit_machine_learning.algorithms.QGAN.rel_entr:3
msgid ":py:class:`~typing.List`\\[:py:class:`float`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.discriminator.rst:4
msgid "QGAN.discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.g_loss.rst:4
msgid "QGAN.g_loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.generator.rst:4
msgid "QGAN.generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.get_rel_entr.rst:4
msgid "QGAN.get_rel_entr"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.quantum_instance.rst:4
msgid "QGAN.quantum_instance"
msgstr ""

#: of qiskit_machine_learning.algorithms.QGAN.quantum_instance:3
msgid ":py:data:`~typing.Optional`\\[:py:class:`~qiskit.utils.quantum_instance.QuantumInstance`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.random.rst:4
msgid "QGAN.random"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.rel_entr.rst:4
msgid "QGAN.rel_entr"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.run.rst:4
msgid "QGAN.run"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:1
msgid ""
"Execute the algorithm with selected backend. :type quantum_instance: "
":py:data:`~typing.Union`\\[:py:class:`~qiskit.utils.quantum_instance.QuantumInstance`,"
" :py:class:`~qiskit.providers.basebackend.BaseBackend`, "
":py:class:`~qiskit.providers.backend.Backend`, :py:obj:`None`] :param "
"quantum_instance: the experimental setting. :param kwargs: kwargs :type "
"kwargs: dict"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:7
msgid "results of an algorithm."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.run:10
msgid "If a quantum instance or     backend has not been provided"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.seed.rst:4
msgid "QGAN.seed"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_backend.rst:4
msgid "QGAN.set_backend"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_backend:4
msgid ":py:obj:`None`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_discriminator.rst:4
msgid "QGAN.set_discriminator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_discriminator:3
msgid "discriminator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.set_generator.rst:4
msgid "QGAN.set_generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:4
msgid ""
"parameterized quantum circuit which sets the structure of the quantum "
"generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:7
msgid "initial parameters for the generator circuit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:9
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:23
msgid "optimizer to be used for the training of the generator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.set_generator:11
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:25
msgid ""
"A Gradient object, or a function returning partial derivatives of the "
"loss function w.r.t. the generator variational params."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.tol_rel_ent.rst:4
msgid "QGAN.tol_rel_ent"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QGAN.train.rst:4
msgid "QGAN.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.qgan.QGAN.train:3
msgid "Batch size bigger than the number of     items in the truncated data set"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:4
msgid "QSVC"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:1
msgid "Bases: :class:`sklearn.svm._classes.SVC`"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:1
msgid "Quantum Support Vector Classifier."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:3
msgid ""
"This class shows how to use a quantum kernel for classification. The "
"class extends `sklearn.svm.SVC <https://scikit-"
"learn.org/stable/modules/generated/sklearn.svm.SVC.html>`_, and thus "
"inherits its methods like ``fit`` and ``predict`` used in the example "
"below. Read more in the `sklearn user guide <https://scikit-"
"learn.org/stable/modules/svm.html#svm-classification>`_."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:9
#: qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:9
msgid "**Example**"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:18
msgid "QuantumKernel to be used for classification."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:19
msgid "Variable length argument list to pass to SVC constructor."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.qsvc.QSVC:20
msgid "Arbitrary keyword arguments to pass to SVC constructor."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:28:<autosummary>:1
msgid ""
":obj:`quantum_kernel "
"<qiskit_machine_learning.algorithms.QSVC.quantum_kernel>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.rst:28:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:28:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QSVC.quantum_kernel:1
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel:1
msgid "Returns quantum kernel"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVC.quantum_kernel.rst:4
msgid "QSVC.quantum_kernel"
msgstr ""

#: of qiskit_machine_learning.algorithms.QSVC.quantum_kernel:3
#: qiskit_machine_learning.algorithms.QSVR.quantum_kernel:3
msgid ":py:class:`~qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:4
msgid "QSVR"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:1
msgid "Bases: :class:`sklearn.svm._classes.SVR`"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:1
msgid "Quantum Support Vector Regressor."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:3
msgid ""
"This class shows how to use a quantum kernel for regression. The class "
"extends `sklearn.svm.SVR <https://scikit-"
"learn.org/stable/modules/generated/sklearn.svm.SVR.html>`_, and thus "
"inherits its methods like ``fit`` and ``predict`` used in the example "
"below. Read more in the `sklearn user guide <https://scikit-"
"learn.org/stable/modules/svm.html#svm-regression>`_."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:18
msgid "QuantumKernel to be used for regression."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:19
msgid "Variable length argument list to pass to SVR constructor."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.qsvr.QSVR:20
msgid "Arbitrary keyword arguments to pass to SVR constructor."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.rst:28:<autosummary>:1
msgid ""
":obj:`quantum_kernel "
"<qiskit_machine_learning.algorithms.QSVR.quantum_kernel>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QSVR.quantum_kernel.rst:4
msgid "QSVR.quantum_kernel"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:4
msgid "QuantumGenerator"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.distribution_learners.qgan.generative_network.GenerativeNetwork`"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:1
msgid "Quantum Generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:3
msgid ""
"The quantum generator is a parametrized quantum circuit which can be "
"trained with the :class:`~qiskit_machine_learning.algorithms.QGAN` "
"algorithm to generate a quantum state which approximates the probability "
"distribution of given training data. At the beginning of the training the"
" parameters will be set randomly, thus, the output will is random. "
"Throughout the training the quantum generator learns to represent the "
"target distribution. Eventually, the trained generator can be used for "
"state preparation e.g. in QAE."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:12
msgid ""
"k min/max data values [[min_1,max_1],...,[min_k,max_k]], given input data"
" dim k"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:15
msgid ""
"k numbers of qubits to determine representation resolution, i.e. n qubits"
" enable the representation of 2**n values [n_1,..., n_k]"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:18
msgid "a QuantumCircuit implementing the generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:20
msgid "1D numpy array or list, Initialization for the generator's parameters."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:29
msgid ""
"str or None, if not None save the optimizer's parameter after every "
"update step to the given directory"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator:32
msgid ""
"Set multivariate variational distribution     to represent multivariate "
"data"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
msgid ""
":obj:`discriminator "
"<qiskit_machine_learning.algorithms.QuantumGenerator.discriminator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.discriminator:1
msgid "Get discriminator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
msgid ""
":obj:`optimizer "
"<qiskit_machine_learning.algorithms.QuantumGenerator.optimizer>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.optimizer:1
msgid "Get optimizer."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
msgid ""
":obj:`parameter_values "
"<qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:1
msgid "Get parameter values from the quantum generator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
msgid ":obj:`seed <qiskit_machine_learning.algorithms.QuantumGenerator.seed>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.QuantumGenerator.seed:1
msgid "Get seed."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
msgid ""
":obj:`construct_circuit "
"<qiskit_machine_learning.algorithms.QuantumGenerator.construct_circuit>`\\"
" \\(\\[params\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:1
msgid "Construct generator circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
msgid ""
":obj:`get_output "
"<qiskit_machine_learning.algorithms.QuantumGenerator.get_output>`\\ "
"\\(quantum\\_instance\\[\\, params\\, shots\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
msgid "Get classical data samples from the generator."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
msgid ""
":obj:`loss <qiskit_machine_learning.algorithms.QuantumGenerator.loss>`\\ "
"\\(x\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:1
msgid "Loss function for training the generator's parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.rst:40:<autosummary>:1
msgid ""
":obj:`train "
"<qiskit_machine_learning.algorithms.QuantumGenerator.train>`\\ "
"\\(\\[quantum\\_instance\\, shots\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.construct_circuit.rst:4
msgid "QuantumGenerator.construct_circuit"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:3
msgid "parameters which should be used to run the generator."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.construct_circuit:6
msgid "construct the quantum circuit and return as gate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.discriminator.rst:4
msgid "QuantumGenerator.discriminator"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.discriminator:3
msgid ":py:class:`~qiskit_machine_learning.algorithms.distribution_learners.qgan.discriminative_network.DiscriminativeNetwork`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.get_output.rst:4
msgid "QuantumGenerator.get_output"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:1
msgid ""
"Get classical data samples from the generator. Running the quantum "
"generator circuit results in a quantum state. To train this generator "
"with a classical discriminator, we need to sample classical outputs by "
"measuring the quantum state and mapping them to feature space defined by "
"the training data."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:11
msgid ""
"array or None, parameters which should be used to run the generator, if "
"None use self._params"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.get_output:17
msgid "sample occurrence in percentage"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.loss.rst:4
msgid "QuantumGenerator.loss"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.loss:5
msgid "probability for measuring the sample"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.optimizer.rst:4
msgid "QuantumGenerator.optimizer"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.optimizer:3
#: qiskit_machine_learning.algorithms.TrainableModel.optimizer:3
msgid ":py:class:`~qiskit.algorithms.optimizers.optimizer.Optimizer`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values.rst:4
msgid "QuantumGenerator.parameter_values"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:3
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~typing.List`, "
":py:class:`~numpy.ndarray`]"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.parameter_values:4
msgid "Current parameter values"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.seed.rst:4
msgid "QuantumGenerator.seed"
msgstr ""

#: of qiskit_machine_learning.algorithms.QuantumGenerator.seed:3
#: qiskit_machine_learning.algorithms.VQC.num_qubits:3
#: qiskit_machine_learning.algorithms.VQR.num_qubits:3
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:3
#: qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs:3
#: qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits:3
msgid ":py:class:`int`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.QuantumGenerator.train.rst:4
msgid "QuantumGenerator.train"
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:3
msgid "used to run the generator circuit."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:5
msgid "Number of shots for hardware or qasm execution."
msgstr ""

#: of
#: qiskit_machine_learning.algorithms.distribution_learners.qgan.quantum_generator.QuantumGenerator.train:8
msgid "generator loss(float) and updated parameters (array)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:4
msgid "TrainableModel"
msgstr ""

#: of qiskit_machine_learning.algorithms.trainable_model.TrainableModel:1
msgid ""
"Base class for ML model. This class defines Scikit-Learn like interface "
"to implement."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
msgid ""
":obj:`initial_point "
"<qiskit_machine_learning.algorithms.TrainableModel.initial_point>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
#: of qiskit_machine_learning.algorithms.TrainableModel.initial_point:1
msgid "Returns current initial point"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
msgid ":obj:`loss <qiskit_machine_learning.algorithms.TrainableModel.loss>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.TrainableModel.loss:1
#: qiskit_machine_learning.algorithms.TrainableModel.neural_network:1
#: qiskit_machine_learning.connectors.TorchConnector.neural_network:1
msgid "Returns the underlying neural network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
msgid ""
":obj:`neural_network "
"<qiskit_machine_learning.algorithms.TrainableModel.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
msgid ""
":obj:`optimizer "
"<qiskit_machine_learning.algorithms.TrainableModel.optimizer>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
#: of qiskit_machine_learning.algorithms.TrainableModel.optimizer:1
msgid "Returns an optimizer to be used in training."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
msgid ""
":obj:`warm_start "
"<qiskit_machine_learning.algorithms.TrainableModel.warm_start>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:32:<autosummary>:1
#: of qiskit_machine_learning.algorithms.TrainableModel.warm_start:1
msgid "Returns the warm start flag."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
msgid ""
":obj:`fit <qiskit_machine_learning.algorithms.TrainableModel.fit>`\\ "
"\\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
msgid ""
":obj:`predict "
"<qiskit_machine_learning.algorithms.TrainableModel.predict>`\\ \\(X\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.rst:40:<autosummary>:1
msgid ""
":obj:`score <qiskit_machine_learning.algorithms.TrainableModel.score>`\\ "
"\\(X\\, y\\[\\, sample\\_weight\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.fit.rst:4
msgid "TrainableModel.fit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.initial_point.rst:4
msgid "TrainableModel.initial_point"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.loss.rst:4
msgid "TrainableModel.loss"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.neural_network.rst:4
msgid "TrainableModel.neural_network"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.optimizer.rst:4
msgid "TrainableModel.optimizer"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.predict.rst:4
msgid "TrainableModel.predict"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.score.rst:4
msgid "TrainableModel.score"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.TrainableModel.warm_start.rst:4
msgid "TrainableModel.warm_start"
msgstr ""

#: of qiskit_machine_learning.algorithms.TrainableModel.warm_start:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.input_gradients:4
#: qiskit_machine_learning.neural_networks.NeuralNetwork.input_gradients:4
#: qiskit_machine_learning.neural_networks.NeuralNetwork.sparse:3
#: qiskit_machine_learning.neural_networks.OpflowQNN.input_gradients:4
#: qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling:5
msgid ":py:class:`bool`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:4
msgid "VQC"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.classifiers.neural_network_classifier.NeuralNetworkClassifier`"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:1
msgid "Quantum neural network classifier."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:4
msgid ""
"The number of qubits for the underlying CircuitQNN. If None, derive from "
"feature_map or ansatz. If neither of those is given, raise exception."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:7
msgid "The feature map for underlying CircuitQNN. If None, use ZZFeatureMap."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:9
msgid "The ansatz for the underlying CircuitQNN. If None, use RealAmplitudes."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:11
msgid "A target loss function to be used in training. Default is cross entropy."
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC:19
msgid ""
"Needs at least one out of num_qubits, feature_map or     ansatz to be "
"given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
msgid ":obj:`ansatz <qiskit_machine_learning.algorithms.VQC.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.ansatz:1
#: qiskit_machine_learning.algorithms.VQR.ansatz:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz:1
msgid "Returns the used ansatz."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
msgid ":obj:`circuit <qiskit_machine_learning.algorithms.VQC.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.circuit:1
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit:1
msgid "Returns the underlying quantum circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
msgid ":obj:`feature_map <qiskit_machine_learning.algorithms.VQC.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.feature_map:1
#: qiskit_machine_learning.algorithms.VQR.feature_map:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map:1
msgid "Returns the used feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
msgid ":obj:`num_qubits <qiskit_machine_learning.algorithms.VQC.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:31:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
#: of qiskit_machine_learning.algorithms.VQC.num_qubits:1
#: qiskit_machine_learning.algorithms.VQR.num_qubits:1
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits:1
msgid "Returns the number of qubits used by ansatz and feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:37:<autosummary>:1
msgid ":obj:`fit <qiskit_machine_learning.algorithms.VQC.fit>`\\ \\(X\\, y\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.rst:37:<autosummary>:1 of
#: qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:1
msgid "Fit the model to data matrix X and targets y."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.ansatz.rst:4
msgid "VQC.ansatz"
msgstr ""

#: of qiskit_machine_learning.algorithms.VQC.ansatz:3
#: qiskit_machine_learning.algorithms.VQC.circuit:3
#: qiskit_machine_learning.algorithms.VQC.feature_map:3
#: qiskit_machine_learning.algorithms.VQR.ansatz:3
#: qiskit_machine_learning.algorithms.VQR.feature_map:3
#: qiskit_machine_learning.kernels.QuantumKernel.feature_map:3
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:16
#: qiskit_machine_learning.neural_networks.CircuitQNN.circuit:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit:3
#: qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map:3
msgid ":py:class:`~qiskit.circuit.quantumcircuit.QuantumCircuit`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.circuit.rst:4
msgid "VQC.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.feature_map.rst:4
msgid "VQC.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.fit.rst:4
msgid "VQC.fit"
msgstr ""

#: of qiskit_machine_learning.algorithms.classifiers.vqc.VQC.fit:8
msgid "returns a trained classifier."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQC.num_qubits.rst:4
msgid "VQC.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:4
msgid "VQR"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.algorithms.regressors.neural_network_regressor.NeuralNetworkRegressor`"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:1
msgid "Quantum neural network regressor using TwoLayerQNN"
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:4
msgid ""
"The number of qubits to be used. If None, and neither feature_map nor "
"ansatz are given, it is initially set to 2, i.e., the default of the "
"TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:7
msgid ""
"The feature map to be used to construct a TwoLayerQNN. If None, use the "
"ZZFeatureMap, i.e., the default of the TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:10
msgid ""
"The ansatz to be used to construct a TwoLayerQNN. If None, use the "
"RealAmplitudes, i.e., the default of the TwoLayerQNN."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:13
msgid ""
"The observable to be measured in the underlying TwoLayerQNN. If  None, "
"use the default from the TwoLayerQNN, i.e., `Z^{\\otimes num_qubits}`."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:16
msgid "A target loss function to be used in training. Default is squared error."
msgstr ""

#: of qiskit_machine_learning.algorithms.regressors.vqr.VQR:24
msgid "Neither num_qubits, nor feature_map, nor ansatz given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
msgid ":obj:`ansatz <qiskit_machine_learning.algorithms.VQR.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
msgid ":obj:`feature_map <qiskit_machine_learning.algorithms.VQR.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.rst:30:<autosummary>:1
msgid ":obj:`num_qubits <qiskit_machine_learning.algorithms.VQR.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.ansatz.rst:4
msgid "VQR.ansatz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.feature_map.rst:4
msgid "VQR.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.algorithms.VQR.num_qubits.rst:4
msgid "VQR.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:4
msgid "RawFeatureVector"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:1
msgid "Bases: :class:`qiskit.circuit.library.blueprintcircuit.BlueprintCircuit`"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:1
msgid "The raw feature vector circuit."
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:3
msgid ""
"This circuit acts as parameterized initialization for statevectors with "
"``feature_dimension`` dimensions, thus with ``log2(feature_dimension)`` "
"qubits. The circuit contains a placeholder instruction that can only be "
"synthesized/defined when all parameters are bound."
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:7
msgid ""
"In ML, this circuit can be used to load the training data into qubit "
"amplitudes. It does not apply an kernel transformation. (Therefore, it is"
" a \"raw\" feature vector.)"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:10
msgid "Examples:"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.raw_feature_vector.RawFeatureVector:43
msgid "The feature dimension and number of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:29:<autosummary>:1
msgid ""
":obj:`feature_dimension "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:29:<autosummary>:1
#: of
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:1
msgid "Return the feature dimension."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:29:<autosummary>:1
msgid ""
":obj:`num_qubits "
"<qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.rst:29:<autosummary>:1
#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:1
msgid "Returns the number of qubits in this circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension.rst:4
msgid "RawFeatureVector.feature_dimension"
msgstr ""

#: of
#: qiskit_machine_learning.circuit.library.RawFeatureVector.feature_dimension:4
msgid "The feature dimension, which is ``2 ** num_qubits``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits.rst:4
msgid "RawFeatureVector.num_qubits"
msgstr ""

#: of qiskit_machine_learning.circuit.library.RawFeatureVector.num_qubits:4
msgid "The number of qubits."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:4
msgid "TorchConnector"
msgstr ""

#: of qiskit_machine_learning.connectors.torch_connector.TorchConnector:1
msgid "Bases: :class:`qiskit_machine_learning.connectors.torch_connector.Module`"
msgstr ""

#: of qiskit_machine_learning.connectors.torch_connector.TorchConnector:1
msgid "Connects a Qiskit (Quantum) Neural Network to PyTorch."
msgstr ""

#: of qiskit_machine_learning.connectors.torch_connector.TorchConnector:4
msgid ""
"The neural network to be connected to PyTorch. Remember that "
"``input_gradients``  must be set to ``True`` in the neural network "
"initialization before passing it to the ``TorchConnector`` for the "
"gradient computations to work properly during training."
msgstr ""

#: of qiskit_machine_learning.connectors.torch_connector.TorchConnector:9
msgid ""
"The initial weights to start training the network. If this is None, the "
"initial weights are chosen uniformly at random from [-1, 1]."
msgstr ""

#: of qiskit_machine_learning.connectors.torch_connector.TorchConnector:12
msgid ""
"Whether this connector should return sparse output or not. If sparse is "
"set to None, then the setting from the given neural network is used. Note"
" that sparse output is only returned if the underlying neural network "
"also returns sparse output, otherwise it will be dense independent of the"
" setting. Also note that PyTorch currently does not support sparse back "
"propagation, i.e., if sparse is set to True, the backward pass of this "
"module will return None."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
msgid ""
":obj:`neural_network "
"<qiskit_machine_learning.connectors.TorchConnector.neural_network>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
msgid ":obj:`sparse <qiskit_machine_learning.connectors.TorchConnector.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
#: of qiskit_machine_learning.connectors.TorchConnector.sparse:1
msgid "Returns whether this connector returns sparse output or not."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
msgid ":obj:`weight <qiskit_machine_learning.connectors.TorchConnector.weight>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
#: of qiskit_machine_learning.connectors.TorchConnector.weight:1
#: qiskit_machine_learning.connectors.TorchConnector.weights:8
msgid "Returns the weights of the underlying network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:31:<autosummary>:1
msgid ""
":obj:`weights "
"<qiskit_machine_learning.connectors.TorchConnector.weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:37:<autosummary>:1
msgid ""
":obj:`forward "
"<qiskit_machine_learning.connectors.TorchConnector.forward>`\\ "
"\\(\\[input\\_data\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.rst:37:<autosummary>:1
#: of
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward:1
msgid "Forward pass."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.forward.rst:4
msgid "TorchConnector.forward"
msgstr ""

#: of
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward:4
msgid "data to be evaluated."
msgstr ""

#: of qiskit_machine_learning.connectors.TorchConnector.weight:3
#: qiskit_machine_learning.connectors.TorchConnector.weights:10
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward:6
msgid ":py:class:`~qiskit_machine_learning.connectors.torch_connector.Tensor`"
msgstr ""

#: of
#: qiskit_machine_learning.connectors.torch_connector.TorchConnector.forward:7
msgid "Result of forward pass of this model."
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.neural_network.rst:4
msgid "TorchConnector.neural_network"
msgstr ""

#: of qiskit_machine_learning.connectors.TorchConnector.neural_network:3
msgid ":py:class:`~qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.sparse.rst:4
msgid "TorchConnector.sparse"
msgstr ""

#: of qiskit_machine_learning.connectors.TorchConnector.sparse:3
msgid ":py:data:`~typing.Optional`\\[:py:class:`bool`]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.weight.rst:4
msgid "TorchConnector.weight"
msgstr ""

#: ../../stubs/qiskit_machine_learning.connectors.TorchConnector.weights.rst:4
msgid "TorchConnector.weights"
msgstr ""

#: of qiskit_machine_learning.connectors.TorchConnector.weights:5
msgid "Use :meth:`weight` instead."
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.ad_hoc_data.rst:4
msgid "ad_hoc_data"
msgstr ""

#: of qiskit_machine_learning.datasets.ad_hoc.ad_hoc_data:1
msgid "returns ad hoc dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.breast_cancer.rst:4
msgid "breast_cancer"
msgstr ""

#: of qiskit_machine_learning.datasets.breast_cancer.breast_cancer:1
msgid "returns breast cancer dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.digits.rst:4
msgid "digits"
msgstr ""

#: of qiskit_machine_learning.datasets.digits.digits:1
msgid "returns digits dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.gaussian.rst:4
msgid "gaussian"
msgstr ""

#: of qiskit_machine_learning.datasets.gaussian.gaussian:1
msgid "returns gaussian dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.iris.rst:4
msgid "iris"
msgstr ""

#: of qiskit_machine_learning.datasets.iris.iris:1
msgid "returns iris dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.sample_ad_hoc_data.rst:4
msgid "sample_ad_hoc_data"
msgstr ""

#: of qiskit_machine_learning.datasets.ad_hoc.sample_ad_hoc_data:1
msgid "returns sample ad hoc data"
msgstr ""

#: ../../stubs/qiskit_machine_learning.datasets.wine.rst:4
msgid "wine"
msgstr ""

#: of qiskit_machine_learning.datasets.wine.wine:1
msgid "returns wine dataset"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:4
msgid "QuantumKernel"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:1
msgid "Quantum Kernel."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:3
msgid ""
"The general task of machine learning is to find and study patterns in "
"data. For many algorithms, the datapoints are better understood in a "
"higher dimensional feature space, through the use of a kernel function:"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:7
msgid "K(x, y) = \\langle f(x), f(y)\\rangle."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:11
msgid ""
"Here K is the kernel function, x, y are n dimensional inputs. f is a map "
"from n-dimension to m-dimension space. :math:`\\langle x, y \\rangle` "
"denotes the dot product. Usually m is much larger than n."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:15
msgid ""
"The quantum kernel algorithm calculates a kernel matrix, given datapoints"
" x and y and feature map f, all of n dimension. This kernel matrix can "
"then be used in classical machine learning algorithms such as support "
"vector classification, spectral clustering or ridge regression."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:20
msgid ""
"Parameterized circuit to be used as the feature map. If None is given, "
"the `ZZFeatureMap` is used with two qubits."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:23
msgid ""
"Project to closest positive semidefinite matrix if x = y. Only enforced "
"when not using the state vector simulator. Default True."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel:26
msgid "Number of circuits to batch together for computation. Default 1000."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:29:<autosummary>:1
msgid ""
":obj:`feature_map "
"<qiskit_machine_learning.kernels.QuantumKernel.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:29:<autosummary>:1
#: of qiskit_machine_learning.kernels.QuantumKernel.feature_map:1
msgid "Returns feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:29:<autosummary>:1
msgid ""
":obj:`quantum_instance "
"<qiskit_machine_learning.kernels.QuantumKernel.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:29:<autosummary>:1
#: of qiskit_machine_learning.kernels.QuantumKernel.quantum_instance:1
msgid "Returns quantum instance"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:36:<autosummary>:1
msgid ""
":obj:`construct_circuit "
"<qiskit_machine_learning.kernels.QuantumKernel.construct_circuit>`\\ "
"\\(x\\[\\, y\\, measurement\\, ...\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:36:<autosummary>:1
#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:1
msgid "Construct inner product circuit for given datapoints and feature map."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:36:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.kernels.QuantumKernel.evaluate>`\\ "
"\\(x\\_vec\\[\\, y\\_vec\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.rst:36:<autosummary>:1
#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:1
msgid "Construct kernel matrix for given data and feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.construct_circuit.rst:4
msgid "QuantumKernel.construct_circuit"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:3
msgid ""
"If using `statevector_simulator`, only construct circuit for "
":math:`\\Psi(x)|0\\rangle`, otherwise construct :math:`Psi^dagger(y) x "
"Psi(x)|0>` If y is None and not using `statevector_simulator`, self inner"
" product is calculated."
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:8
msgid "first data point parameter vector"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:10
msgid "second data point parameter vector, ignored if using statevector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:12
msgid "include measurement if not using statevector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:14
msgid "use state vector simulator"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:17
msgid "QuantumCircuit"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:19
msgid "- x and/or y have incompatible dimension with feature map"
msgstr ""

#: of
#: qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.construct_circuit:19
msgid "x and/or y have incompatible dimension with feature map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.evaluate.rst:4
msgid "QuantumKernel.evaluate"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:3
msgid ""
"If y_vec is None, self inner product is calculated. If using "
"`statevector_simulator`, only build circuits for "
":math:`\\Psi(x)|0\\rangle`, then perform inner product classically."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:8
msgid ""
"1D or 2D array of datapoints, NxD, where N is the number of datapoints, D"
" is the feature dimension"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:11
msgid ""
"1D or 2D array of datapoints, MxD, where M is the number of datapoints, D"
" is the feature dimension"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:15
msgid "2D matrix, NxM"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:17
msgid "- A quantum instance or backend has not been provided"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:17
msgid "A quantum instance or backend has not been provided"
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:18
msgid ""
"- x_vec and/or y_vec are not one or two dimensional arrays     - x_vec "
"and y_vec have have incompatible dimensions     - x_vec and/or y_vec have"
" incompatible dimension with feature map and         and feature map can "
"not be modified to match."
msgstr ""

#: of qiskit_machine_learning.kernels.quantum_kernel.QuantumKernel.evaluate:18
msgid ""
"x_vec and/or y_vec are not one or two dimensional arrays     - x_vec and "
"y_vec have have incompatible dimensions     - x_vec and/or y_vec have "
"incompatible dimension with feature map and         and feature map can "
"not be modified to match."
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.feature_map.rst:4
msgid "QuantumKernel.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.kernels.QuantumKernel.quantum_instance.rst:4
msgid "QuantumKernel.quantum_instance"
msgstr ""

#: of qiskit_machine_learning.kernels.QuantumKernel.quantum_instance:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance:3
msgid ":py:class:`~qiskit.utils.quantum_instance.QuantumInstance`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:4
msgid "CircuitQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork`"
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:1
msgid "A Sampling Neural Network based on a given quantum circuit."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:4
msgid ""
"The parametrized quantum circuit that generates the samples of this "
"network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:6
msgid "The parameters of the circuit corresponding to the input."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:8
msgid "The parameters of the circuit corresponding to the trainable weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.NeuralNetwork.sparse:1
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:10
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:9
msgid "Returns whether the output is sparse or not."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:12
msgid ""
"Determines whether the network returns a batch of samples or (possibly "
"sparse) array of probabilities in its forward pass. In case of "
"probabilities, the backward pass returns the probability gradients, while"
" it returns ``(None, None)`` in the case of samples. Note that "
"``sampling==True`` will always result in a dense return array independent"
" of the other settings."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:18
msgid ""
"A callable that maps the measured integer to another unsigned integer or "
"tuple of unsigned integers. These are used as new indices for the "
"(potentially sparse) output array. If this is used, and "
"``sampling==False``, the output shape of the output needs to be given as "
"a separate argument."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:23
msgid ""
"The output shape of the custom interpretation, only used in the case "
"where an interpret function is provided and ``sampling==False``. Note "
"that in the remaining cases, the output shape is automatically inferred "
"by: ``2^num_qubits`` if ``sampling==False`` and ``interpret==None``, "
"``(num_samples,1)`` if ``sampling==True`` and ``interpret==None``, and "
"``(num_samples, interpret_shape)`` if ``sampling==True`` and an interpret"
" function is provided."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:31
msgid "The gradient converter to be used for the probability gradients."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:33
msgid ""
"The quantum instance to evaluate the circuits. Note that if "
"``sampling==True``, a statevector simulator is not a valid backend for "
"the quantum instance."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:37
#: qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:16
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:18
#: qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:17
msgid ""
"Determines whether to compute gradients with respect to input data. Note "
"that this parameter is ``False`` by default, and must be explicitly set "
"to ``True`` for a proper gradient computation when using "
"``TorchConnector``."
msgstr ""

#: of qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN:41
msgid "if ``interpret`` is passed without ``output_shape``."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
msgid ""
":obj:`circuit "
"<qiskit_machine_learning.neural_networks.CircuitQNN.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
msgid ""
":obj:`input_gradients "
"<qiskit_machine_learning.neural_networks.CircuitQNN.input_gradients>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:29:<autosummary>:1
msgid ""
"Returns whether gradients with respect to input data are computed by this"
" neural network in the ``backward`` method or not."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
msgid ""
":obj:`input_params "
"<qiskit_machine_learning.neural_networks.CircuitQNN.input_params>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.input_params:1
msgid "Returns the list of input parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
msgid ""
":obj:`quantum_instance "
"<qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance:1
msgid "Returns the quantum instance to evaluate the circuit."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
msgid ""
":obj:`weight_params "
"<qiskit_machine_learning.neural_networks.CircuitQNN.weight_params>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.CircuitQNN.weight_params:1
msgid "Returns the list of trainable weights parameters."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:38:<autosummary>:1
msgid ""
":obj:`set_interpret "
"<qiskit_machine_learning.neural_networks.CircuitQNN.set_interpret>`\\ "
"\\(interpret\\[\\, output\\_shape\\]\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.rst:38:<autosummary>:1
msgid "Change 'interpret' and corresponding 'output_shape'."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.circuit.rst:4
msgid "CircuitQNN.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.input_gradients.rst:4
msgid "CircuitQNN.input_gradients"
msgstr ""

#: of qiskit_machine_learning.neural_networks.CircuitQNN.input_gradients:1
#: qiskit_machine_learning.neural_networks.NeuralNetwork.input_gradients:1
#: qiskit_machine_learning.neural_networks.OpflowQNN.input_gradients:1
msgid ""
"Returns whether gradients with respect to input data are computed by this"
" neural network in the ``backward`` method or not. By default such "
"gradients are not computed."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.input_params.rst:4
msgid "CircuitQNN.input_params"
msgstr ""

#: of qiskit_machine_learning.neural_networks.CircuitQNN.input_params:3
#: qiskit_machine_learning.neural_networks.CircuitQNN.weight_params:3
msgid ":py:class:`~typing.List`"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.quantum_instance.rst:4
msgid "CircuitQNN.quantum_instance"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.set_interpret.rst:4
msgid "CircuitQNN.set_interpret"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.circuit_qnn.CircuitQNN.set_interpret:1
msgid ""
"Change 'interpret' and corresponding 'output_shape'. If "
"self.sampling==True, the output _shape does not have to be set and is "
"inferred from the interpret function. Otherwise, the output_shape needs "
"to be given."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.CircuitQNN.weight_params.rst:4
msgid "CircuitQNN.weight_params"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:4
msgid "NeuralNetwork"
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:1
msgid ""
"Abstract Neural Network class providing forward and backward pass and "
"handling batched inputs. This is to be implemented by other (quantum) "
"neural networks."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:5
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:5
msgid "The number of input features."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:7
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:7
msgid "The number of trainable weights."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:9
msgid "Determines whether the output is a sparse array or not."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:11
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:16
msgid "The shape of the output."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:13
msgid "Determines whether to compute gradients with respect to input data."
msgstr ""

#: of qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork:15
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:22
msgid "Invalid parameter values."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
msgid ""
":obj:`input_gradients "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.input_gradients>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
msgid ""
":obj:`num_inputs "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs:1
msgid "Returns the number of input features."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
msgid ""
":obj:`num_weights "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights:1
msgid "Returns the number of trainable weights."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
msgid ""
":obj:`output_shape "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape:1
msgid "Returns the output shape."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:32:<autosummary>:1
msgid ""
":obj:`sparse "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.sparse>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:39:<autosummary>:1
msgid ""
":obj:`backward "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.backward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:1
msgid "Backward pass of the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:39:<autosummary>:1
msgid ""
":obj:`forward "
"<qiskit_machine_learning.neural_networks.NeuralNetwork.forward>`\\ "
"\\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.rst:39:<autosummary>:1
#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:1
msgid "Forward pass of the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.backward.rst:4
msgid "NeuralNetwork.backward"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:4
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:4
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:5
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:7
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:5
msgid ""
"input data of the shape (num_inputs). In case of a single scalar input it"
" is directly cast to and interpreted like a one-element array."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:7
msgid ""
"trainable weights of the shape (num_weights). In case of a single scalar "
"weight"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:10
msgid ""
":py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`,"
" "
":py:class:`~qiskit_machine_learning.neural_networks.neural_network.SparseArray`,"
" :py:obj:`None`], :py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~qiskit_machine_learning.neural_networks.neural_network.SparseArray`,"
" :py:obj:`None`]]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.backward:11
msgid ""
"The result of the neural network of the backward pass, i.e., a tuple with"
" the gradients for input and weights of shape (output_shape, num_input) "
"and (output_shape, num_weights), respectively."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.forward.rst:4
msgid "NeuralNetwork.forward"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:7
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:8
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:10
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:8
msgid ""
"trainable weights of the shape (num_weights). In case of a single scalar "
"weight it is directly cast to and interpreted like a one-element array."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:10
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~qiskit_machine_learning.neural_networks.neural_network.SparseArray`]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork.forward:11
msgid "The result of the neural network of the shape (output_shape)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.input_gradients.rst:4
msgid "NeuralNetwork.input_gradients"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.num_inputs.rst:4
msgid "NeuralNetwork.num_inputs"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.num_weights.rst:4
msgid "NeuralNetwork.num_weights"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape.rst:4
msgid "NeuralNetwork.output_shape"
msgstr ""

#: of qiskit_machine_learning.neural_networks.NeuralNetwork.output_shape:3
msgid ":py:data:`~typing.Tuple`\\[:py:class:`int`, ...]"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.NeuralNetwork.sparse.rst:4
msgid "NeuralNetwork.sparse"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:4
msgid "OpflowQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:1
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.neural_networks.neural_network.NeuralNetwork`"
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:1
msgid "Opflow Quantum Neural Network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:4
msgid "The parametrized operator that represents the neural network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:6
msgid "The operator parameters that correspond to the input of the network."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:8
msgid "The operator parameters that correspond to the trainable weights."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:10
msgid "The Expected Value converter to be used for the operator."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:12
msgid "The Gradient converter to be used for the operator's backward pass."
msgstr ""

#: of qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN:14
msgid "The quantum instance to evaluate the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:29:<autosummary>:1
msgid ""
":obj:`input_gradients "
"<qiskit_machine_learning.neural_networks.OpflowQNN.input_gradients>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:29:<autosummary>:1
msgid ""
":obj:`operator "
"<qiskit_machine_learning.neural_networks.OpflowQNN.operator>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.rst:29:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.OpflowQNN.operator:1
msgid "Returns the underlying operator of this QNN."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.input_gradients.rst:4
msgid "OpflowQNN.input_gradients"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.OpflowQNN.operator.rst:4
msgid "OpflowQNN.operator"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:4
msgid "SamplingNeuralNetwork"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:1
msgid ""
"A Sampling Neural Network abstract class for all (quantum) neural "
"networks within Qiskit's machine learning module that generate samples "
"instead of (expected) values."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork:11
msgid ""
"Determines whether the network returns a batch of samples or (possibly "
"sparse) array of probabilities in its forward pass. In case of "
"probabilities, the backward pass returns the probability gradients, while"
" it returns (None, None) in the case of samples."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:28:<autosummary>:1
msgid ""
":obj:`sampling "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:28:<autosummary>:1
#: of qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling:1
msgid ""
"Returns: ``True`` if the network returns a batch of samples and ``False``"
" if a sparse vector (dictionary) of probabilities in its forward pass."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`probabilities "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probabilities>`\\"
" \\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid "Histogram (as dict) of the samples from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`probability_gradients "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probability_gradients>`\\"
" \\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid "Probability gradients of histogram resulting from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid ""
":obj:`sample "
"<qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sample>`\\"
" \\(input\\_data\\, weights\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.rst:36:<autosummary>:1
msgid "Samples from the network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probabilities.rst:4
msgid "SamplingNeuralNetwork.probabilities"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:1
msgid ""
"Histogram (as dict) of the samples from the network. Returns an array of "
"samples. Format depends on the set interpret function."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:11
msgid ""
":py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~qiskit_machine_learning.neural_networks.sampling_neural_network.SparseArray`]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probabilities:12
msgid "The sample histogram of the neural network."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.probability_gradients.rst:4
msgid "SamplingNeuralNetwork.probability_gradients"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:1
msgid ""
"Probability gradients of histogram resulting from the network. Format "
"depends on the set interpret function. Shape is (input_grad, "
"weights_grad), where each grad has one dict for each parameter and each "
"dict contains as value the derivative of the probability of measuring the"
" key."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:13
msgid ""
":py:data:`~typing.Tuple`\\[:py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`,"
" "
":py:class:`~qiskit_machine_learning.neural_networks.sampling_neural_network.SparseArray`],"
" :py:data:`~typing.Union`\\[:py:class:`~numpy.ndarray`, "
":py:class:`~qiskit_machine_learning.neural_networks.sampling_neural_network.SparseArray`]]"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.probability_gradients:14
msgid "The probability gradients."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sample.rst:4
msgid "SamplingNeuralNetwork.sample"
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:1
msgid ""
"Samples from the network. Returns an array of samples. Format depends on "
"the set interpret function."
msgstr ""

#: of
#: qiskit_machine_learning.neural_networks.sampling_neural_network.SamplingNeuralNetwork.sample:12
msgid "The sample results of the neural network of the shape (output_shape)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.SamplingNeuralNetwork.sampling.rst:4
msgid "SamplingNeuralNetwork.sampling"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:4
msgid "TwoLayerQNN"
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.neural_networks.opflow_qnn.OpflowQNN`"
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:1
msgid ""
"Two Layer Quantum Neural Network consisting of a feature map, a ansatz, "
"and an observable."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:5
msgid ""
"The number of qubits to represent the network, if None and neither the "
"feature_map not the ansatz are given, raise exception."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:8
msgid ""
"The (parametrized) circuit to be used as feature map. If None is given, "
"the `ZZFeatureMap` is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:11
msgid ""
"The (parametrized) circuit to be used as ansatz. If None is given, the "
"`RealAmplitudes` circuit is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:14
msgid ""
"observable to be measured to determine the output of the network. If None"
" is given, the `Z^{\\otimes num_qubits}` observable is used."
msgstr ""

#: of qiskit_machine_learning.neural_networks.two_layer_qnn.TwoLayerQNN:21
msgid "In case of inconsistent num_qubits, feature_map, ansatz."
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
msgid ""
":obj:`ansatz "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
msgid ""
":obj:`circuit "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
msgid ""
":obj:`feature_map "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.rst:31:<autosummary>:1
msgid ""
":obj:`num_qubits "
"<qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits>`\\"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.ansatz.rst:4
msgid "TwoLayerQNN.ansatz"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.circuit.rst:4
msgid "TwoLayerQNN.circuit"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.feature_map.rst:4
msgid "TwoLayerQNN.feature_map"
msgstr ""

#: ../../stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.num_qubits.rst:4
msgid "TwoLayerQNN.num_qubits"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:4
msgid "CrossEntropyLoss"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss:1
msgid ""
"Bases: "
":class:`qiskit_machine_learning.utils.loss_functions.loss_functions.Loss`"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss:1
msgid "This class computes the cross entropy loss for each sample as:"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss:3
msgid ""
"\\text{CrossEntropyLoss}(predict, target) = "
"-\\sum_{i=0}^{N_{\\text{classes}}}\n"
"target_i * log(predict_i)."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:27:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.evaluate>`\\"
" \\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid "An abstract method for evaluating the loss function."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.gradient>`\\"
" \\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.rst:27:<autosummary>:1
#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.gradient:1
msgid ""
"Assume softmax is used, and target vector may or may not be one-hot "
"encoding"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.evaluate.rst:4
msgid "CrossEntropyLoss.evaluate"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:1
msgid ""
"An abstract method for evaluating the loss function. Inputs are expected "
"in a shape of ``(N, *)``. Where ``N`` is a number of samples. Loss is "
"computed for each sample individually."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:6
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:6
msgid "an array of predicted values using the model."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:8
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:8
msgid "an array of the true values."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:11
msgid "An array with values of the loss function of the shape ``(N, 1)``."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropyLoss.evaluate:13
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.evaluate:13
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.evaluate:13
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.evaluate:13
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.evaluate:13
msgid "shapes of predict and target do not match"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropyLoss.gradient.rst:4
msgid "CrossEntropyLoss.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:4
msgid "CrossEntropySigmoidLoss"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss:1
msgid ""
"This class computes the cross entropy sigmoid loss and should be used for"
" binary classification."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:27:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.evaluate>`\\"
" \\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.gradient>`\\"
" \\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:27:<autosummary>:1
#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid "An abstract method for computing the gradient."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.evaluate.rst:4
msgid "CrossEntropySigmoidLoss.evaluate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.CrossEntropySigmoidLoss.gradient.rst:4
msgid "CrossEntropySigmoidLoss.gradient"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:1
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:1
msgid ""
"An abstract method for computing the gradient. Inputs are expected in a "
"shape of ``(N, *)``. Where ``N`` is a number of samples. Gradient is "
"computed for each sample individually."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:11
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:11
msgid ""
"An array with gradient values of the shape ``(N, *)``. The output shape "
"depends on the loss function."
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.CrossEntropySigmoidLoss.gradient:14
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss.gradient:14
#: qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss.gradient:14
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.gradient:14
msgid "shapes of predict and target do not match."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:4
msgid "L1Loss"
msgstr ""

#: of qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss:1
msgid "This class computes the L1 loss (i.e. absolute error) for each sample as:"
msgstr ""

#: of qiskit_machine_learning.utils.loss_functions.loss_functions.L1Loss:3
msgid ""
"\\text{L1Loss}(predict, target) = \\sum_{i=0}^{N_{\\text{elements}}} "
"\\left| predict_i -\n"
"target_i \\right|."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:27:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.utils.loss_functions.L1Loss.evaluate>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.utils.loss_functions.L1Loss.gradient>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.evaluate.rst:4
msgid "L1Loss.evaluate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L1Loss.gradient.rst:4
msgid "L1Loss.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:4
msgid "L2Loss"
msgstr ""

#: of qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss:1
msgid "This class computes the L2 loss (i.e. squared error) for each sample as:"
msgstr ""

#: of qiskit_machine_learning.utils.loss_functions.loss_functions.L2Loss:3
msgid ""
"\\text{L2Loss}(predict, target) = \\sum_{i=0}^{N_{\\text{elements}}} "
"(predict_i - target_i)^2."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:27:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.utils.loss_functions.L2Loss.evaluate>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.rst:27:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.utils.loss_functions.L2Loss.gradient>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.evaluate.rst:4
msgid "L2Loss.evaluate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.L2Loss.gradient.rst:4
msgid "L2Loss.gradient"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:4
msgid "Loss"
msgstr ""

#: of qiskit_machine_learning.utils.loss_functions.loss_functions.Loss:1
msgid "Abstract base class for computing Loss."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid ""
":obj:`__call__ "
"<qiskit_machine_learning.utils.loss_functions.Loss.__call__>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid "This method calls the ``evaluate`` method."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid ""
":obj:`evaluate "
"<qiskit_machine_learning.utils.loss_functions.Loss.evaluate>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.rst:28:<autosummary>:1
msgid ""
":obj:`gradient "
"<qiskit_machine_learning.utils.loss_functions.Loss.gradient>`\\ "
"\\(predict\\, target\\)"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.__call__.rst:4
msgid "Loss.__call__"
msgstr ""

#: of
#: qiskit_machine_learning.utils.loss_functions.loss_functions.Loss.__call__:1
msgid ""
"This method calls the ``evaluate`` method. This is a convenient method to"
" compute loss."
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.evaluate.rst:4
msgid "Loss.evaluate"
msgstr ""

#: ../../stubs/qiskit_machine_learning.utils.loss_functions.Loss.gradient.rst:4
msgid "Loss.gradient"
msgstr ""

