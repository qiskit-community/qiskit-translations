# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, 2021, Qiskit Machine Learning Development Team
# This file is distributed under the same license as the Qiskit Machine
# Learning package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Qiskit Machine Learning 0.3.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-17 23:23+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "This page was generated from `docs/tutorials/03_quantum_kernel.ipynb`__."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid ""
"The general task of machine learning is to find and study patterns in "
"data. For many datasets, the datapoints are better understood in a higher"
" dimensional feature space, through the use of a kernel function: "
":math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) "
"\\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, "
"\\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from "
":math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b "
"\\rangle` denotes the dot product. When considering finite data, a kernel"
" function can be represented as a matrix: :math:`K_{ij} = "
"k(\\vec{x}_i,\\vec{x}_j)`."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid ""
"In quantum kernel machine learning, a quantum feature map "
":math:`\\phi(\\vec{x})` is used to map a classical feature vector "
":math:`\\vec{x}` to a quantum Hilbert space, :math:`| "
"\\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that "
":math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| "
"\\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with "
"quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__"
" for more details."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid ""
"In this notebook, we use ``qiskit`` to calculate a kernel matrix using a "
"quantum feature map, then use this kernel matrix in ``scikit-learn`` "
"classification and clustering algorithms."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:53
msgid "Classification"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid ""
"For our classification example, we will use the *ad hoc dataset* as "
"described in `Supervised learning with quantum enhanced feature spaces "
"<https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` "
"`support vector machine <https://scikit-"
"learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:142
msgid ""
"With our training and testing datasets ready, we set up the "
"``QuantumKernel`` class to calculate a kernel matrix using the "
"`ZZFeatureMap "
"<https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__,"
" and the ``BasicAer`` ``qasm_simulator`` using 1024 shots."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:169
msgid ""
"The ``scikit-learn`` ``svc`` algorithm allows us to define a `custom "
"kernel <https://scikit-learn.org/stable/modules/svm.html#custom-"
"kernels>`__ in two ways: by providing the kernel as a callable function "
"or by precomputing the kernel matrix. We can do either of these using the"
" ``QuantumKernel`` class in ``qiskit``."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:171
msgid "The following code gives the kernel as a callable function:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:219
msgid ""
"The following code precomputes and plots the training and testing kernel "
"matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:288
msgid ""
"``qiskit`` also contains the ``qsvc`` class that extends the ``sklearn "
"svc`` class, that can be used as follows:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:337
msgid "Clustering"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:339
msgid ""
"For our clustering example, we will again use the *ad hoc dataset* as "
"described in `Supervised learning with quantum enhanced feature spaces "
"<https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` "
"``spectral`` clustering algorithm."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:341
msgid ""
"We will regenerate the dataset with a larger gap between the two classes,"
" and as clustering is an unsupervised machine learning task, we donâ€™t "
"need a test sample."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:411
msgid ""
"We again set up the ``QuantumKernel`` class to calculate a kernel matrix "
"using the `ZZFeatureMap "
"<https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__,"
" and the BasicAer ``qasm_simulator`` using 1024 shots."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:438
msgid ""
"The scikit-learn spectral clustering algorithm allows us to define a "
"[custom kernel] in two ways: by providing the kernel as a callable "
"function or by precomputing the kernel matrix. Using the QuantumKernel "
"class in qiskit, we can only use the latter."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:440
msgid ""
"The following code precomputes and plots the kernel matrices before "
"providing it to the scikit-learn spectral clustering algorithm, and "
"scoring the labels using normalized mutual information, since we a priori"
" know the class labels."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:504
msgid ""
"``scikit-learn`` has other algorithms that can use a precomputed kernel "
"matrix, here are a few:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:506
msgid ""
"`Agglomerative clustering <https://scikit-"
"learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:507
msgid ""
"`Support vector regression <https://scikit-"
"learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:508
msgid ""
"`Ridge regression <https://scikit-"
"learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:509
msgid ""
"`Gaussian process regression <https://scikit-"
"learn.org/stable/modules/gaussian_process.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:510
msgid ""
"`Principal component analysis <https://scikit-"
"learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr ""

