msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-29 19:30+0000\n"
"PO-Revision-Date: 2021-09-29 20:24\n"
"Last-Translator: \n"
"Language-Team: Italian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: it\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: it_IT\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Questa pagina è stata generata da `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Neural Network Classifier & Regressor"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "In questo tutorial mostriamo come vengono utilizzati ``NeuralNetworkClassifier`` e ``NeuralNetworkRegressor``. Entrambi accettano come input una ``NeuralNetwork`` (quantistica), e la sfruttano in un contesto specifico. In entrambi i casi forniamo, per comodità, anche una variante pre-configurata, il Variational Quantum Classifier (``VQC``) ed il Variational Quantum Regressor (``VQR``). Il tutorial è strutturato come segue:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classificazione <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Classificazione con un ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:297
msgid "Classification with a ``CircuitQNN``"
msgstr "Classificazione con ``CircuitQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:463
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Variational Quantum Classifier (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regressione <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:621
msgid "Regression with an ``OpflowQNN``"
msgstr "Regressione con un ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Variational Quantum Regressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "Classification"
msgstr "Classificazione"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Per illustrare i seguenti algoritmi, prepariamo un semplice dataset per la classificazione."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "Classification with the an ``OpflowQNN``"
msgstr "Classificazione con un ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Per prima cosa mostriamo come un ``OpflowQNN`` può essere utilizzato per la classificazione con ``NeuralNetworkClassifier``. In questo contesto, ``OpflowQNN`` dovrebbe restituire un output unidimensionale in :math:`[-1, +1]`. Questo funziona solo per la classificazione binaria, e quindi assegniamo le due classi a :math:`\\{-1, +1\\}`. Per comodità, usiamo la ``TwoLayerQNN``, la quale è un tipo speciale di ``OpflowQNN`` definita tramite una feature map ed un ansatz."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:174
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:299
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Successivamente mostriamo come si può utilizzare ``CircuitQNN`` per una classificazione con ``NeuralNetworkClassifier``. In questo contesto, ``CircuitQNN`` deve restituire come output un vettore di probabilità :math:`d`-dimensionale, dove :math:`d` indica il numero di classi. Campionare da un ``QuantumCircuit`` risulta automaticamente in una distribuzione di probabilità, e dobbiamo solo definire una mappatura delle bitstring misurate nelle diverse classi. Per la classificazione binaria usiamo la mappatura di parità."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:465
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` è una variante particolare del ``NeuralNetworkClassifier`` con un ``CircuitQNN``. Applica una mappa di parità (o estensioni a più classi) per mappare la bitstring alla classificazione, cosa che si traduce in un vettore di probabilità interpretato come un risultato codificato con il metodo one-hot encoding. Di default, il ``VQC`` applica la funzione ``CrossEntropyLoss`` che si aspetta i label in formato one-hot encoded e restituirà anche le previsioni in quel formato."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:578
msgid "Regression"
msgstr "Regressione"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:580
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Per illustrare i seguenti algoritmi prepariamo un semplice dataset su cui eseguire un metodo di regressione."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:623
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Qui ci limitiamo alla regressione con un ``OpflowQNN`` che restituisce valori in :math:`[-1, +1]`. Si potrebbero costruire modelli più complessi e anche multidimensionali, sempre basati su ``CircuitQNN``, ma questo va oltre l'ambito di questo tutorial."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:747
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Regressione con il Variational Quantum Regressor (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:749
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "Come nel caso del ``VQC`` per la classificazione, il ``VQR`` è una variante speciale del ``NeuralNetworkRegressor`` con un ``OpflowQNN``. Di default, il ``VQR`` utilizza la funzione ``L2Loss`` per minimizzare l'errore quadratico medio tra predizioni e target."

