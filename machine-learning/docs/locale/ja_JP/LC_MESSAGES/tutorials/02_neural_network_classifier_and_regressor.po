msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-29 19:30+0000\n"
"PO-Revision-Date: 2021-10-09 09:29\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: ja_JP\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "このページは `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__ から生成されました。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "ニューラル・ネットワーク分類器と回帰器"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "このチュートリアルでは、``NeuralNetworkClassifier`` と ``NeuralNetworkRegressor`` がどのように使用されるかを示します。どちらも入力として (量子) ``NeuralNetwork`` を受け取り、特定のコンテキストでそれを活用します。どちらの場合も、利便性のためにあらかじめ設定されたバリエーション、変分量子分類器 (Variational Quantum Classifier, ``VQC``) と変分量子回帰器 (Variational Quantum Regressor, ``VQR``) を提供しています。チュートリアルの構成は以下の通りです。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`分類 <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:297
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:463
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "変分量子分類器 (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`回帰 <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:621
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` による回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "変分量子回帰器 (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "Classification"
msgstr "分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "以下のアルゴリズムを説明するために、簡単な分類データセットを用意します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "まず、 ``OpflowQNN`` が ``NeuralNetworkClassifier`` の中でどのように分類に使われるかを示します。ここでは、 ``OpflowQNN`` は、 :math:`[-1, +1]` の1次元の出力を返すことが期待されています。 これは、二値分類にしか使えないので、2つのクラスを :math:`\\{-1, +1\\}` に割り当てます。ここでは、便宜上、特徴マップとansatzを用いて定義された ``OpflowQNN`` の特別なタイプである ``TwoLayerQNN`` を使用します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:174
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "``callback_graph`` というコールバック関数を追加します。 これはオプティマイザの反復ごとに呼び出され、現在の重みとその重みでの目的関数の値という、2つのパラメータが渡されます。 ここでは関数に、目的関数の値を配列に追加します。これによって反復と目的関数の値をプロットし、反復ごとにグラフを更新することができます。とはいえ、2つのパラメータが渡される限り、コールバック関数であなたは何でも好きなことをすることができます。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:299
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "次に、 ``CircuitQNN`` が ``NeuralNetworkClassifier`` の中でどのように分類に使われるかを示します。ここでは、 ``CircuitQNN`` は、 :math:`d` -次元の確率ベクトルを出力として返すことが期待されます。ここで :math:`d` はクラス数です。``QuantumCircuit`` からのサンプリングは、自動的に確率分布になりますので、測定されたビット列から異なるクラスへのマッピングを定義するだけです。バイナリー分類には，パリティー・マッピングを使います。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:465
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` は、 ``CircuitQNN`` を用いた ``NeuralNetworkClassifier`` の特別なバリエーションです。これは、パリティー・マッピング（または複数のクラスへの拡張）を適用して、ビット列から分類にマッピングし、その結果、確率ベクトルが得られ、ワンショットでエンコードされた結果として解釈されます。デフォルトでは、 ``CrossEntropyLoss`` 関数を適用します。この関数は、ワンショットでエンコードされたフォーマットで与えられたラベルを想定しており、そのフォーマットでも予測値を返します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:578
msgid "Regression"
msgstr "回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:580
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "以下のアルゴリズムを説明するために、簡単な回帰データセットを用意します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:623
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "ここでは、 :math:`[-1, +1]` の値を返す ``OpflowQNN`` を使った回帰に限定します。もっと複雑で多次元のモデルを ``CircuitQNN`` をベースにして構築することもできますが、このチュートリアルの範囲を超えています。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:747
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "変分量子回帰器 (``VQR``) による回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:749
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "``VQR`` は、分類用の ``VQC`` と同様に、 ``OpflowQNN`` を用いた ``NeuralNetworkRegressor`` の特別な改良版です。デフォルトでは、予測値と目標値の間の平均二乗誤差を最小化するために、 ``L2Loss`` 関数を考慮します。"

