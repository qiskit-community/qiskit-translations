msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-05-09 11:07\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "このページは `docs/tutorials/08_quantum_kernel_trainer.ipynb`__ から生成されました。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "機械学習アプリケーション向けの量子カーネルトレーニング"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `\"Covariant quantum kernels for data with group structure.\" <https://arxiv.org/abs/2105.03406>`__"
msgstr "このチュートリアルでは、機械学習アプリケーション用のラベル付きデータセットで量子カーネルをトレーニングします。基本的な手順を説明するために、二値分類タスクに Quantum Kernel Alignment（QKA）を使用します。QKAは、最大SVMマージンに収束しながら、パラメーター化された量子カーネルをデータセットに繰り返し適応させる手法です。QKAの詳細については、プレプリントの `“Covariant quantum kernels for data with group structure” <https://arxiv.org/abs/2105.03406>`__ を参照してください。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "量子カーネルをトレーニングするためのエントリポイントは、 ``QuantumKernelTrainer`` クラスです。基本的な手順は次のとおりです。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "データセットを準備する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "量子特徴マップを定義する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up an instance of ``TrainableKernel`` and ``QuantumKernelTrainer`` objects"
msgstr "``TrainableKernel`` インスタンスと ``QuantumKernelTrainer`` オブジェクトを設定する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "``QuantumKernelTrainer.fit`` メソッドを使用して、データセットのカーネルパラメーターをトレーニングする"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "トレーニングされた量子カーネルを機械学習モデルに渡す"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "ローカル、外部、Qiskitパッケージをインポートし、オプティマイザーのコールバッククラスを定義する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:96
msgid "Prepare the Dataset"
msgstr "データセットを準備する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:98
msgid "In this guide, we will use Qiskit Machine Learning's ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr "このガイドでは、Qiskit Machine Learning の ``ad_hoc.py`` データセットを使用して、カーネルトレーニングプロセスを示します。 `こちら <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__ のドキュメントを参照してください。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:186
msgid "Define the Quantum Feature Map"
msgstr "量子特徴マップを定義する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:188
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "次に、古典的なデータを量子状態空間にエンコードする量子特徴マップを設定します。ここでは、 ``QuantumCircuit`` を使用してトレーニング可能な回転レイヤーを設定し、 ``Qiskit`` の ``ZZFeatureMap`` を使用して入力データを表します。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:262
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "量子カーネルと量子カーネルトレーナーを設定する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:264
msgid "To train the quantum kernel, we will use an instance of ``TrainableFidelityQuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr "量子カーネルをトレーニングするには、 ``TrainableFidelityQuantumKernel`` （特徴マップとそのパラメーターを保持）と ``QuantumKernelTrainer`` （トレーニングプロセスを管理）が必要です。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:266
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "``QuantumKernelTrainer`` への入力としてカーネル損失関数 ``SVCLoss`` を選択することにより、Quantum Kernel Alignment 手法を使用してトレーニングします。これはQiskitでサポートされている損失であるため、文字列 ``svc_loss`` を使用できます。ただし、損失を文字列として渡す場合は、デフォルト設定が使用されることに注意してください。カスタム設定の場合は、必要なオプションを使用して明示的にインスタンス化し、 ``KernelLoss`` オブジェクトを ``QuantumKernelTrainer`` に渡します。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:268
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "オプティマイザーとして SPSA を選択し、 ``initial_point`` 引数を使用してトレーニング可能なパラメーターを初期化します。注： ``initial_point`` 引数として渡されるリストの長さは、特徴量マップ内のトレーニング可能なパラメーターの数と等しくなければなりません。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:300
msgid "Train the Quantum Kernel"
msgstr "量子カーネルをトレーニングする"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:302
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "データセット（サンプルとラベル）で量子カーネルをトレーニングするために、 ``QuantumKernelTrainer`` の ``fit`` メソッドを呼び出します。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:304
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``TrainableKernel`` object with optimal values bound to the feature map"
msgstr "``QuantumKernelTrainer.fit`` の出力は、 ``QuantumKernelTrainerResult`` オブジェクトです。結果オブジェクトには、次のクラスフィールドが含まれます。 - ``optimal_parameters`` ： {parameter: optimal value} ペアを含む辞書 - ``optimal_point`` ：トレーニングで見つかった最適なパラメーター値 - ``optimal_value`` ：最適なポイントでの損失関数の値 - ``optimizer_evals`` ：数値 オプティマイザーによって実行される評価の数 - ``optimizer_time`` ：最適化の実行にかかる時間 - ``quantum_kernel`` ：特徴マップにバインドされた最適値を持つ ``TrainableKernel`` オブジェクト"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:375
msgid "Fit and Test the Model"
msgstr "モデルの適合とテスト"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:377
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit's ``QSVC`` for classification."
msgstr "トレーニングされた量子カーネルを機械学習モデルに渡し、モデルを適合させて新しいデータでテストすることができます。ここでは、分類に Qiskit の ``QSVC`` を使用します。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:434
msgid "Visualize the Kernel Training Process"
msgstr "カーネルトレーニングプロセスを視覚化する"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:436
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches high test accuracy on this dataset with our choice of inputs."
msgstr "コールバックデータから、トレーニングプロセス中に損失がどのように変化するかをプロットできます。入力を選択すると、急速に収束し、このデータセットで高いテスト精度に達することがわかります。"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:438
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "トレーニングサンプル間の類似性の尺度である最終的なカーネル行列を表示することもできます。"

