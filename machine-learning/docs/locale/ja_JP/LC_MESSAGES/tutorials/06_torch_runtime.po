msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:59+0000\n"
"PO-Revision-Date: 2021-12-16 00:29\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/06_torch_runtime.po\n"
"X-Crowdin-File-ID: 9719\n"
"Language: ja_JP\n"

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/06_torch_runtime.ipynb`__."
msgstr "このページは `docs/tutorials/06_torch_runtime.ipynb`__ から生成されました。"

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "Torch Runtime"
msgstr "Torch ランタイム"

#: ../../tutorials/06_torch_runtime.ipynb:11
msgid "In this tutorial, we introduce Torch Runtime, and show how to use it via the ``TorchRuntimeClient`` class in Qiskit Machine Learning. Torch Runtime leverages Qiskit Runtime for hybrid quantum-classical machine learning based on a PyTorch ``Module``. It allows training models or predicting the outputs with trained models significantly faster. We show how to use Torch Runtime with two simple examples for regression and classification tasks in the following."
msgstr "このチュートリアルでは、Torch Runtimeを紹介し、Qiskit機械学習の ``TorchRuntimeClient`` クラスを介してそれを使用する方法を示します。Torch Runtime は、Qiskit Runtime を活用して、PyTorch ``Module`` に基づくハイブリッド量子古典機械学習を実現します。これにより、モデルのトレーニングや、トレーニングされたモデルを使用した出力の予測が大幅に高速化されます。以下に、回帰タスクと分類タスクの2つの簡単な例を使用してTorchRuntimeを使用する方法を示します。"

#: ../../tutorials/06_torch_runtime.ipynb:23
msgid "1. Regression"
msgstr "1. 回帰"

#: ../../tutorials/06_torch_runtime.ipynb:25
msgid "First, we show how to use Torch Runtime via ``TorchRuntimeClient`` using the simple regression example. In the example, we will perform a regression task on a randomly generated dataset following a sin wave."
msgstr "最初に、単純な回帰の例を使用して、 ``TorchRuntimeClient`` を介して Torch Runtime を使用する方法を示します。この例では、正弦波に続いてランダムに生成されたデータセットに対し、回帰タスクを実行します。"

#: ../../tutorials/06_torch_runtime.ipynb:99
msgid "``TorchRuntimeClient`` requires a PyTorch ``DataLoader`` as an input for training/predicting. For that purpose, we create a custom torch dataset class."
msgstr "``TorchRuntimeClient`` には、トレーニング／予測 の入力として PyTorch ``DataLoader`` が必要です。そのために、カスタムトーチデータセットクラスを作成します。"

#: ../../tutorials/06_torch_runtime.ipynb:146
msgid "Create an instance of ``TorchConnector`` to wrap a QNN model and be able to use pytorch to train the model, then set up an optimizer and a loss function as usual."
msgstr "``TorchConnector`` のインスタンスを作成してQNNモデルをラップし、pytorchを使用してモデルをトレーニングできるようにしてから、通常どおりオプティマイザーと損失関数を設定します。"

#: ../../tutorials/06_torch_runtime.ipynb:222
msgid "Load a provider and specify a backend for the runtime service."
msgstr "プロバイダーをロードし、ランタイムサービスのバックエンドを指定します。"

#: ../../tutorials/06_torch_runtime.ipynb:249
msgid "Create a Torch Runtime Client instance with the model, the optimizer, and other configurations."
msgstr "モデル、オプティマイザ、およびその他の構成を使用して Torch Runtime Client インスタンスを作成します。"

#: ../../tutorials/06_torch_runtime.ipynb:278
#: ../../tutorials/06_torch_runtime.ipynb:816
msgid "Call ``fit()`` to train the model"
msgstr "``fit()`` を呼び出してモデルをトレーニングする"

#: ../../tutorials/06_torch_runtime.ipynb:280
msgid "Call the ``fit`` method in ``TorchRuntimeClient`` with the data loader to train the model."
msgstr "データローダーを使用して ``TorchRuntimeClient`` の ``fit`` メソッドを呼び出し、モデルをトレーニングします。"

#: ../../tutorials/06_torch_runtime.ipynb:301
msgid "You can access training result information by querying properties of the ``fit_result`` variable, that is an instance of the ``TorchRuntimeResult`` class. Also, model’s parameters in ``TorchRuntimeClient`` are updated with trained ones."
msgstr "``TorchRuntimeResult`` クラスのインスタンスである ``fit_result`` 変数のプロパティを照会することでトレーニング結果情報にアクセスできます。また、 ``TorchRuntimeClient`` のモデルのパラメーターは、トレーニングされたパラメーターで更新されます。"

#: ../../tutorials/06_torch_runtime.ipynb:347
msgid "You can also query the ``train_history`` property, which is a list of dictionaries, each per epoch. In a dictionary you can find properties like: - ``epoch``, epoch index - ``loss``, loss value at this epoch - ``forward_time``, time spent in the forward pass, in seconds - ``backward_time``, time spent in the backward pass, in seconds - ``epoch_time``, epoch time, in seconds.\""
msgstr "また、エポックごとに辞書のリストである ``train_history`` プロパティをクエリすることもできます。辞書には、次のようなプロパティがあります。 - ``epoch``、エポックインデックス - ``loss`` 、このエポックでの損失値 - ``forward_time`` 、フォワード・パスに費やされた時間（秒） - ``backward_time`` 、バックワード・パスに費やされた時間（秒） - ``epoch_time`` 、エポック時間、秒単位。"

#: ../../tutorials/06_torch_runtime.ipynb:359
msgid "Training with validation"
msgstr "検証を伴うトレーニング"

#: ../../tutorials/06_torch_runtime.ipynb:361
msgid "Torch Runtime can also perform validation while training a model by passing a validation data loader to the ``fit`` method."
msgstr "Torch Runtime は、検証データローダーを ``fit`` メソッドに渡すことにより、モデルのトレーニング中に検証を実行することもできます。"

#: ../../tutorials/06_torch_runtime.ipynb:446
msgid "You can query the ``val_history`` property, which is a list of dictionaries for the validation processes, each per epoch. In a dictionary you can find the same properties as ``train_history``."
msgstr "エポックごとに、検証プロセスのディクショナリのリストである ``val_history`` プロパティをクエリできます。辞書には、 ``train_history`` と同じプロパティがあります。"

#: ../../tutorials/06_torch_runtime.ipynb:458
#: ../../tutorials/06_torch_runtime.ipynb:881
msgid "Call ``predict()`` to perform prediction"
msgstr "予測の実行のため ``predict()`` を呼び出す"

#: ../../tutorials/06_torch_runtime.ipynb:460
msgid "Call the ``predict`` method in ``TorchRuntimeClient`` with the data loader to perform prediction on the passed data using the trained model."
msgstr "データローダーを使用して ``TorchRuntimeClient`` の ``predict`` メソッドを呼び出し、トレーニング済みモデルを使用して渡されたデータの予測を実行します。"

#: ../../tutorials/06_torch_runtime.ipynb:542
msgid "A red line, blue dots, and a green line on the plot show the original function, the training data, and a function constructed out of the predicted values, respectively."
msgstr "プロット上の赤い線、青い点、および緑の線は、それぞれ元の関数、トレーニングデータ、および予測値から構築された関数を示しています。"

#: ../../tutorials/06_torch_runtime.ipynb:554
#: ../../tutorials/06_torch_runtime.ipynb:982
msgid "Call ``score()`` to calculate a score"
msgstr "スコアを計算するには、 ``score()`` を呼び出す"

#: ../../tutorials/06_torch_runtime.ipynb:556
msgid "Call the ``score`` method in ``TorchRuntimeClient`` with the data loader to calculate a score, for the trained model. You should pass either ``\"regression\\\"`` or ``\"classification\"`` to the ``score_func`` argument to use one of the pre-defined scores functions. Also, you can pass a custom scoring function defined as:"
msgstr "トレーニングされたモデルのスコアを計算するには、データローダーを使用して ``TorchRuntimeClient`` の ``score`` メソッドを呼び出します。事前定義されたスコア関数の1つを使用するには、 ``score_func`` 引数に ``\"regression\"`` または ``\"classification\"`` のいずれかを渡す必要があります。また、次のように定義されたカスタムスコアリング関数を渡すことができます。"

#: ../../tutorials/06_torch_runtime.ipynb:562
msgid "where: - ``model_output`` are the values predicted by the model, - ``target`` ground truth values."
msgstr "ここで、 - ``model_output`` はモデルによって予測された値であり、 - ``target`` はの正解値です。"

#: ../../tutorials/06_torch_runtime.ipynb:564
msgid "Note that the result of the ``score`` call also contains predicted values that were calculated in the process of scoring the model."
msgstr "``score`` 呼び出しの結果には、モデルのスコアリングの過程で計算された予測値も含まれていることに注意してください。"

#: ../../tutorials/06_torch_runtime.ipynb:621
msgid "2. Classification"
msgstr "2.分類"

#: ../../tutorials/06_torch_runtime.ipynb:623
msgid "Second, we show how to perform a simple classification task using Torch Runtime. In the example, we will perform binary classification on a randomly generated dataset."
msgstr "次に、Torch Runtime を使用して簡単な分類タスクを実行する方法を示します。この例では、ランダムに生成されたデータセットに対して二値分類を実行します。"

#: ../../tutorials/06_torch_runtime.ipynb:869
msgid "You can also query the ``train_history`` and the ``val_history`` properties."
msgstr "``train_history`` プロパティと ``val_history`` プロパティをクエリすることもできます。"

#: ../../tutorials/06_torch_runtime.ipynb:970
msgid "The red circles indicate wrongly classified data points."
msgstr "赤い丸は、誤って分類されたデータポイントを示します。"

#: ../../tutorials/06_torch_runtime.ipynb:993
msgid "In the example, we use the following custom scoring function to calculate a score. The scoring function returns 1, if the trained model successfully classified the input. Otherwise, it returns 0. An overall average is calculated in ``score()`` in the end."
msgstr "この例では、次のカスタムスコアリング関数を使用してスコアを計算します。トレーニングされたモデルが入力を正常に分類した場合、スコアリング関数は1を返します。それ以外の場合は0を返します。全体の平均は最終的に ``score()`` で計算されます。"

#: ../../tutorials/06_torch_runtime.ipynb:1066
msgid "3. How to use hooks in training"
msgstr "3.トレーニングでフックを使用する方法"

#: ../../tutorials/06_torch_runtime.ipynb:1068
msgid "Qiskit Machine Learning offers a base hook class, ``HookBase``. It is a base class for a hook that is a set of callback functions used in the training process. Users can implement their own hook classes from this base class to handle complicated callback processes. This structure provides high flexibility in the callback processes. Each hook can implement 6 methods, and each method is called before/after the corresponding processes during training. The way they are called is demonstrated in the following snippet:"
msgstr "Qiskit Machine Learning は、基本フッククラスである ``HookBase`` を提供します。これは、トレーニングプロセスで使用されるコールバック関数のセットであるフックの基本クラスです。ユーザーは、この基本クラスから独自のフッククラスを実装して、複雑なコールバックプロセスを処理できます。この構造は、コールバックプロセスに高い柔軟性を提供します。各フックは6つのメソッドを実装でき、各メソッドはトレーニング中に対応するプロセスの前後に呼び出されます。それらが呼び出される方法は、次のスニペットに示されています。"

#: ../../tutorials/06_torch_runtime.ipynb:1085
msgid "In the hook methods, users can access ``TorchTrainer`` via ``self.trainer`` to access more context properties(e.g., model, current iteration, or config). The following snippet describes available properties that might be useful for a hook."
msgstr "フックメソッドでは、ユーザーは ``self.trainer`` を介して ``TorchTrainer`` にアクセスし、より多くのコンテキストプロパティ（モデル、現在の反復、構成など）にアクセスできます。次のスニペットは、フックに役立つ可能性のある使用可能なプロパティについて説明しています。"

#: ../../tutorials/06_torch_runtime.ipynb:1087
msgid "TorchTrainer has:"
msgstr "TorchTrainer は以下を持ちます："

#: ../../tutorials/06_torch_runtime.ipynb:1089
msgid "``model``: A model to be trained."
msgstr "``model`` ：トレーニングされるモデル。"

#: ../../tutorials/06_torch_runtime.ipynb:1090
msgid "``optimizer``: An optimizer used for the training."
msgstr "``optimizer`` ：トレーニングに使用されるオプティマイザー。"

#: ../../tutorials/06_torch_runtime.ipynb:1091
msgid "``loss_func``: A loss function for the training."
msgstr "``loss_func`` ：トレーニングの損失関数。"

#: ../../tutorials/06_torch_runtime.ipynb:1092
msgid "``train_loader``: A PyTorch data loader object containing a training dataset."
msgstr "``train_loader`` ：トレーニングデータセットを含む PyTorch データローダーオブジェクト。"

#: ../../tutorials/06_torch_runtime.ipynb:1093
msgid "``val_loader``: A PyTorch data loader object containing a validation dataset."
msgstr "``val_loader`` ：検証データセットを含む PyTorch データローダーオブジェクト。"

#: ../../tutorials/06_torch_runtime.ipynb:1094
msgid "``max_epoch``: The maximum number of training epochs."
msgstr "``max_epoch`` ：トレーニングエポックの最大数。"

#: ../../tutorials/06_torch_runtime.ipynb:1095
msgid "``log_period``: A logging period for a train history and a validation history. By default, there will be logs every epoch (``log_period``\\ =1)."
msgstr "``log_period`` ：学習の履歴と検証の履歴のログ期間。 デフォルトでは、エポックごとにログがあります（ ``log_period = 1``）。"

#: ../../tutorials/06_torch_runtime.ipynb:1096
msgid "``start_epoch``: An initial epoch for warm-start training. By default, 0."
msgstr "``start_epoch`` ：ウォームスタート学習の初期エポック。デフォルトでは、0です。"

#: ../../tutorials/06_torch_runtime.ipynb:1097
msgid "``epoch``: The current number of epochs."
msgstr "``epoch`` ：現在のエポック数。"

#: ../../tutorials/06_torch_runtime.ipynb:1098
msgid "``global_step``: The current number of steps."
msgstr "``global_step`` ：現在のステップ数。"

#: ../../tutorials/06_torch_runtime.ipynb:1099
msgid "``train_logger``: A logger for a training history. Use ``train_logger.metrics`` to access a list of logs. A log for each epoch is stored as a dictionary similar to ``TorchRuntimeResult.train_history``"
msgstr "``train_logger`` ：学習履歴のロガー。 ``train_logger.metrics`` を使用して、ログのリストにアクセスします。各エポックのログは、 ``TorchRuntimeResult.train_history`` のような辞書として保存されます。"

#: ../../tutorials/06_torch_runtime.ipynb:1100
msgid "``val_logger``: A logger for a validation history. Logs are stored in the same way as train_logger."
msgstr "``val_logger`` ：検証履歴のロガー。ログは train_logger と同じ方法で保存されます。"

#: ../../tutorials/06_torch_runtime.ipynb:1102
msgid "Users can pass a single hook instance or a list of hook instances to ``hooks`` argument."
msgstr "ユーザーは、単一のフックインスタンスまたはフックインスタンスのリストを ``hooks`` 引数に渡すことができます。"

#: ../../tutorials/06_torch_runtime.ipynb:1113
msgid "The following example is a hook for early stopping. If the current loss is smaller than the threshold after an epoch, the training will be terminated."
msgstr "次の例は、早期停止のフックです。エポック後、現在の損失がしきい値よりも小さい場合、トレーニングは終了します。"

#: ../../tutorials/06_torch_runtime.ipynb:1219
msgid "As we can see, training was interrupted after the first epoch despite we set the number of epochs to 5 in the ``TorchRuntimeClient`` configuration."
msgstr "ご覧のとおり、 ``TorchRuntimeClient`` 構成でエポック数を5に設定したにもかかわらず、最初のエポックの後でトレーニングが中断されました。"

