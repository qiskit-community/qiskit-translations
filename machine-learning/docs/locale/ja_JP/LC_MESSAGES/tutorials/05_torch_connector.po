msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-03-28 08:39+0000\n"
"PO-Revision-Date: 2023-03-28 10:33\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/05_torch_connector.po\n"
"X-Crowdin-File-ID: 9636\n"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "This page was generated from `docs/tutorials/05_torch_connector.ipynb`__."
msgstr "このページは `docs/tutorials/05_torch_connector.ipynb`__ から生成されました。"

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr "Torch コネクターおよびハイブリッド QNN"

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit's ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "目次:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr "`パート 1: 簡単な分類と回帰 <#Part-1:-Simple-Classification-&-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch's automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr "`分類 <#1.-Classification>`__"

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``EstimatorQNN``"
msgstr "PyTorch と ``EstimatorQNN`` による分類"

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``SamplerQNN``"
msgstr "PyTorch と ``SamplerQNN`` を用いた分類"

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr "`回帰 <#2.-Regression>`__"

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``SamplerQNN``"
msgstr "PyTorchと ``SamplerQNN`` による回帰"

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr "`パート 2: MNIST 分類、ハイブリッドQNN <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr "このチュートリアルの 2 番目の部分では、ハイブリッドの量子古典的な方法で MNIST データを分類するため、 (量子) ``NeuralNetwork`` をターゲットの PyTorch ワークフロー ( この場合は、典型的な CNN アーキテクチャー) に組み込む方法を説明しています。"

#: ../../tutorials/05_torch_connector.ipynb:73
msgid "Part 1: Simple Classification & Regression"
msgstr "パート 1: 簡単な分類と回帰"

#: ../../tutorials/05_torch_connector.ipynb:85
msgid "1. Classification"
msgstr "1. 分類"

#: ../../tutorials/05_torch_connector.ipynb:87
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch's automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:140
msgid "A. Classification with PyTorch and ``EstimatorQNN``"
msgstr "A. PyTorch と ``EstimatorQNN`` による分類"

#: ../../tutorials/05_torch_connector.ipynb:142
msgid "Linking an ``EstimatorQNN`` to PyTorch is relatively straightforward. Here we illustrate this by using the ``EstimatorQNN`` constructed from a feature map and an ansatz."
msgstr "``EstimatorQNN`` と PyTorch のリンクは比較的簡単です。ここでは、特徴量マップとansatzから構築された ``EstimatorQNN`` を使って説明します。"

#: ../../tutorials/05_torch_connector.ipynb:262
msgid "Optimizer"
msgstr "オプティマイザー"

#: ../../tutorials/05_torch_connector.ipynb:264
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training's outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:268
msgid "Loss Function"
msgstr "損失関数"

#: ../../tutorials/05_torch_connector.ipynb:270
msgid "As for the loss function, we can also take advantage of PyTorch's pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:272
msgid "**💡 Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the :math:`[0, 1]` range (usually this is achieved through a Softmax layer). Because the following example for ``EstimatorQNN`` does not include such layer, and we don't apply any mapping to the output (the following section shows an example of application of parity mapping with ``SamplerQNN``\\ s), the QNN's output can take any value in the range :math:`[-1, 1]`. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:482
#: ../../tutorials/05_torch_connector.ipynb:752
msgid "The red circles indicate wrongly classified data points."
msgstr "赤い丸は、誤って分類されたデータポイントを示します。"

#: ../../tutorials/05_torch_connector.ipynb:494
msgid "B. Classification with PyTorch and ``SamplerQNN``"
msgstr "B. PyTorch と ``SamplerQNN`` を用いた分類"

#: ../../tutorials/05_torch_connector.ipynb:496
msgid "Linking a ``SamplerQNN`` to PyTorch requires a bit more attention than ``EstimatorQNN``. Without the correct setup, backpropagation is not possible."
msgstr "``SamplerQNN`` を PyTorch にリンクするには、``EstimatorQNN``` よりも少し注意が必要です。正しい設定がなければ、誤差逆伝播はできません。"

#: ../../tutorials/05_torch_connector.ipynb:498
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network's forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:500
msgid "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``SamplerQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__."
msgstr "**⚠️ 注意:** カスタムのinterpret関数を定義した場合 (例: ``parity``) 、期待する出力の形状 (例: ``2``) を明示的に指定する必要があります。 ``SamplerQNN`` の初期設定に関する詳細は、 `公式のQiskitドキュメンテーション <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ を参照してください。"

#: ../../tutorials/05_torch_connector.ipynb:571
#: ../../tutorials/05_torch_connector.ipynb:860
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr "オプティマイザーと損失関数の選択について思い出すには、`このセクション <#Optimizer>`__ に戻ってください。"

#: ../../tutorials/05_torch_connector.ipynb:764
msgid "2. Regression"
msgstr "2. 回帰"

#: ../../tutorials/05_torch_connector.ipynb:766
msgid "We use a model based on the ``EstimatorQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr "``EstimatorQNN`` に基づいたモデルを使用して、回帰タスクの実行方法を説明します。 今回選択されたデータセットは、正弦波に沿ってランダムに生成されたものです。"

#: ../../tutorials/05_torch_connector.ipynb:807
msgid "A. Regression with PyTorch and ``EstimatorQNN``"
msgstr "A. PyTorchと ``EstimatorQNN`` による回帰"

#: ../../tutorials/05_torch_connector.ipynb:818
msgid "The network definition and training loop will be analogous to those of the classification task using ``EstimatorQNN``. In this case, we define our own feature map and ansatz, but let's do it a little different."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:999
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr "パート 2: MNIST 分類、ハイブリッドQNN"

#: ../../tutorials/05_torch_connector.ipynb:1001
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr "2番目の部分では、``TorchConnector`` を使用したハイブリッドの量子古典的なニューラルネットワークの活用方法を示します。 より複雑な画像分類タスクをMNISTの手書きの数字データセットで実行します。"

#: ../../tutorials/05_torch_connector.ipynb:1003
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr "ハイブリッドの量子古典ニューラルネットワークの詳細(``TorchConnector`` の前)については、`Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__ の対応するセクションを参照してください。"

#: ../../tutorials/05_torch_connector.ipynb:1042
msgid "Step 1: Defining Data-loaders for train and test"
msgstr "ステップ 1: 学習とテスト用のデータ・ローダーの定義"

#: ../../tutorials/05_torch_connector.ipynb:1053
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr "``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ を利用して、 `MNIST データセット <https://en.wikipedia.org/wiki/MNIST_database>`__ のサブセットを直接ロードし、学習とテストのための ``DataLoader`` (`リンク <https://pytorch.org/docs/stable/data.html>`__) を定義します。"

#: ../../tutorials/05_torch_connector.ipynb:1398
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr "簡単な可視化を実行すると、学習のデータセットは手書きの0と1の画像で構成されていることがわかります。"

#: ../../tutorials/05_torch_connector.ipynb:1472
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr "ステップ 2: QNNとハイブリッド・モデルの定義"

#: ../../tutorials/05_torch_connector.ipynb:1483
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``EstimatorQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr "この2番目のステップは、 ``TorchConnector`` の実力を示します。 量子ニューラルネットワーク層を定義した後 (この場合は ``EstimatorQNN``) 、torchコネクターを ``TorchConnector(qnn)`` として初期化することで、torch ``Module`` のレイヤーに埋め込むことができます。"

#: ../../tutorials/05_torch_connector.ipynb:1485
msgid "**⚠️ Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr "**⚠️ 注意:** ハイブリッド・モデルで、適切な勾配バックプロパゲーションを行うためには、QNNの初期化中に、初期パラメーター ``input_gradients`` を TRUE に設定する必要があります。"

#: ../../tutorials/05_torch_connector.ipynb:1564
msgid "Step 3: Training"
msgstr "ステップ 3: 学習"

#: ../../tutorials/05_torch_connector.ipynb:1678
msgid "Now we'll save the trained model, just to show how a hybrid model can be saved and re-used later for inference. To save and load hybrid models, when using the TorchConnector, follow the PyTorch recommendations of saving and loading the models."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1700
msgid "Step 4: Evaluation"
msgstr "ステップ 4: 評価"

#: ../../tutorials/05_torch_connector.ipynb:1711
msgid "We start from recreating the model and loading the state from the previously saved file. You create a QNN layer using another simulator or a real hardware. So, you can train a model on real hardware available on the cloud and then for inference use a simulator or vice verse. For a sake of simplicity we create a new quantum neural network in the same way as above."
msgstr "モデルを再作成し、以前に保存したファイルから状態をロードすることから始めます。別のシミュレーターまたは実際のハードウェアを使用してQNNレイヤーを作成します。したがって、クラウドで利用可能な実際のハードウェアでモデルをトレーニングしてから、推論にシミュレーターまたはその逆を使用できます。簡単にするために、上記と同じ方法で新しい量子ニューラルネットワークを作成します。"

#: ../../tutorials/05_torch_connector.ipynb:1859
msgid "🎉🎉🎉🎉 **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr "🎉🎉🎉🎉🎉 **これで、Qiskit 機械学習を使用して、独自のハイブリッド・データセットとアーキテクチャを試すことができます。** **頑張ってください!**"

