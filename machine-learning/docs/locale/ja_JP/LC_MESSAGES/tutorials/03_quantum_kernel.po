msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-08 23:29+0000\n"
"PO-Revision-Date: 2022-11-08 23:43\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/03_quantum_kernel.po\n"
"X-Crowdin-File-ID: 9632\n"
"Language: ja_JP\n"

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "This page was generated from `docs/tutorials/03_quantum_kernel.ipynb`__."
msgstr "このページは `docs/tutorials/03_quantum_kernel.ipynb`__ から生成されました。"

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr "量子カーネル法機械学習"

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid "The general task of machine learning is to find and study patterns in data. For many datasets, the datapoints are better understood in a higher dimensional feature space, through the use of a kernel function: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, \\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from :math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b \\rangle` denotes the dot product. When considering finite data, a kernel function can be represented as a matrix: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."
msgstr "機械学習の一般的タスクはデータからパターンを発見したり学習することです。多くのデータセットに対し、データポイントはカーネル関数: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` を用いて高次元特徴空間で理解することができます。ここで、:math:`k` はカーネル関数、:math:`\\vec{x}_i, \\vec{x}_j`  は n 次元のインプット、:math:`f` は :math:`n`-次元空間から :math:`m`-次元空間への写像、:math:`\\langle a,b \\rangle` は内積を表します。有限のデータに対して、カーネル関数は行列 :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)` で表現することができます。"

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid "In quantum kernel machine learning, a quantum feature map :math:`\\phi(\\vec{x})` is used to map a classical feature vector :math:`\\vec{x}` to a quantum Hilbert space, :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ for more details."
msgstr "量子カーネル法機械学習において、量子特徴マップ :math:`\\phi(\\vec{x})` は古典特徴ベクトル :math:`\\vec{x}` を :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}` なる量子ヒルベルト空間 :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|` にマップする際に使用されます。詳細は `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ を参照してください。"

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid "In this notebook, we use ``qiskit`` to calculate a kernel matrix using a quantum feature map, then use this kernel matrix in ``scikit-learn`` classification and clustering algorithms."
msgstr "このノートブックでは、量子特徴マップを使ってカーネル行列を計算するために ``qiskit`` を使用し、 ``scikit-learn`` の分類とクラスタリングアルゴリズムでこのカーネル行列を使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid "Classification"
msgstr "分類"

#: ../../tutorials/03_quantum_kernel.ipynb:57
msgid "For our classification example, we will use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr "分類の例では、`Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ で説明されている *アドホック・データセット* と ``scikit-learn`` の `サポートベクターマシン <https://scikit-learn.org/stable/modules/svm.html>`__ (svc) 分類アルゴリズムを使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:144
msgid "With our training and testing datasets ready, we set up the ``FidelityQuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__. We use the reference implementation of the ``Sampler`` primitive and the ``ComputeUncompute`` fidelity that computes overlaps between states. These are the default values and if you don’t pass a ``Sampler`` or ``Fidelity`` instance, the same objects will be created automatically for you."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:169
msgid "The ``scikit-learn`` ``SVC`` algorithm allows us to define a `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. We can do either of these using the ``FidelityQuantumKernel`` class in ``qiskit``."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:171
msgid "The following code gives the kernel as a callable function:"
msgstr "次のコードは、カーネルを呼び出し可能な関数として提供します。"

#: ../../tutorials/03_quantum_kernel.ipynb:220
msgid "The following code precomputes and plots the training and testing kernel matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr "以下のコードは、``scikit-learn`` ``svc`` アルゴリズムにそれらを提供する前に、カーネル行列の学習とテストを事前計算してプロットします。"

#: ../../tutorials/03_quantum_kernel.ipynb:290
msgid "Qiskit Machine Learning also contains the ``QSVC`` class that extends the ``SVC`` class from scikit-learn, that can be used as follows:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:340
msgid "Clustering"
msgstr "クラスタリング"

#: ../../tutorials/03_quantum_kernel.ipynb:342
msgid "For our clustering example, we will again use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` ``spectral`` clustering algorithm."
msgstr "クラスタリングの例では、`Supervised learning, with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ で説明されている *アドホック・データセット* と ``scikit-learn`` の ``spectral`` クラスタリング・アルゴリズムを再度使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:344
msgid "We will regenerate the dataset with a larger gap between the two classes, and as clustering is an unsupervised machine learning task, we don’t need a test sample."
msgstr "2 つのクラス間に大きなギャップがあるデータ・セットを再生成します。クラスタリングは教師なし機械学習タスクであるため、テスト・サンプルは必要ありません。"

#: ../../tutorials/03_quantum_kernel.ipynb:414
msgid "We again set up the ``FidelityQuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the default values this time."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:437
msgid "The scikit-learn spectral clustering algorithm allows us to define a custom kernel in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. Using the ``FidelityQuantumKernel`` class in Qiskit Machine Learning, we can only use the latter."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:439
msgid "The following code precomputes and plots the kernel matrices before providing it to the scikit-learn spectral clustering algorithm, and scoring the labels using normalized mutual information, since we a priori know the class labels."
msgstr "クラス・ラベルを前もって知っているので、以下のコードは、scikit-learnのスペクトラル・クラスタリング・アルゴリズムに投入し正規化相互情報量でラベルをスコアリングする前に、カーネル行列を事前計算してプロットします。"

#: ../../tutorials/03_quantum_kernel.ipynb:504
msgid "``scikit-learn`` has other algorithms that can use a precomputed kernel matrix, here are a few:"
msgstr "``scikit-learn`` には、事前計算されたカーネル行列を使用できる次のような他のアルゴリズムがあります:"

#: ../../tutorials/03_quantum_kernel.ipynb:506
msgid "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:507
msgid "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:508
msgid "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:509
msgid "`Gaussian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"
msgstr "`Gaussian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:510
msgid "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"

