msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-24 12:38+0000\n"
"PO-Revision-Date: 2021-08-30 06:26\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: ja_JP\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "このページは `docs/tutorials/01_neural_networks.ipynb`__ から生成されました。"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "量子ニューラル・ネットワーク"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "このノートブックでは、 Qiskit 機械学習で提供される、さまざまな汎用的な量子ニューラル・ネットワーク (QNN) の実装を紹介します。 このネットワークは、アプリケーションに依存しない計算ユニットとして、様々なユースケースに使用することができます。アプリケーションによっては、特定のタイプのネットワークが適していたり、適していなかったり、特定の方法でセットアップする必要があったりします。ここでは、次のような種類のニューラルネットワークについて、詳しく説明します。"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: ニューラル・ネットワークのインターフェース。"

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OflowQNN``: 量子力学的観測量の評価に基づくネットワーク。"

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: 利便性のための特別な ``OpflowQNN`` の実装。"

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: 量子回路を測定することによって得られたサンプルに基づいたネットワーク。"

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr " ``NeuralNetwork`` は、Qiskit MachineLearningで利用可能なすべてのニューラルネットワークのインターフェースを表します。データサンプルとトレーニング可能な重みを入力として取得する順伝播パスと逆伝搬パスを公開します。  ``NeuralNetwork`` にはトレーニング機能は含まれていません。これらは、実際のアルゴリズム/アプリケーションにプッシュされます。したがって、  ``NeuralNetwork`` は、トレーニング可能な重みの値も格納しません。以下では、このインターフェースのさまざまな実装を紹介します。"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "``nn`` という ``NeuralNetwork``  を想定します。次に、 ``nn.forward(input, weights)``  パスは、データのフラット入力と、サイズ　``nn.num_inputs`` および ``nn.num_weights`` の重みをそれぞれ受け取ります。 ``NeuralNetwork`` は入力のバッチ処理をサポートし、対応する形状の出力のバッチを返します。"

#: ../../tutorials/01_neural_networks.ipynb:80
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN`` "

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` は、Qiskitから（パラメーター化された）演算子を取得し、Qiskitのgradientフレームワークを利用して逆伝搬パスを提供します。このような演算子は、たとえば、パラメーター化された量子状態に関する量子力学における観測量の期待値です。パラメーターを使用して、古典的なデータをロードしたり、トレーニング可能な重みを表すことができます。``OpflowQNN`` を使用すると、演算子のリストとより複雑な構造を使用して、より複雑なQNNを構築することもできます。"

#: ../../tutorials/01_neural_networks.ipynb:321
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "``ListOp`` で複数の観測量（オブザーバブル）を組み合わせることで、より複雑なQNNを作ることもできます。"

#: ../../tutorials/01_neural_networks.ipynb:412
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:414
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` は、:math:`n` 量子ビット上の特別な ``OpflowQNN`` で、第一にデータを挿入する特徴マップ、第二に学習されるアンサツから構成されています。デフォルトの観測値は :math:`Z^{\\otimes n}` 、すなわちパリティです。"

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` は、（パラメータ化された） ``QuantumCircuit`` をベースにしています。これは、入力だけでなくウェイトパラメーターも取ることができ、測定からサンプルを生成します。サンプルは、ビット列に対応する整数インデックスを測定する確率として解釈することも、バイナリー出力のバッチとして直接解釈することもできます。確率の場合、勾配を効率的に推定することができ、 ``CircuitQNN`` は逆伝搬パスも提供します。サンプルの場合、微分は不可能であり、逆伝搬パスは ``(None, None)`` を返します。"

#: ../../tutorials/01_neural_networks.ipynb:617
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr "さらに、 ``CircuitQNN`` では、サンプルを後処理するための ``interpret`` 関数を指定することができます。これは、（ビット列から）測定された整数を受け取り、それを新しいインデックス、すなわち非負の整数にマッピングすることが期待されます。この場合、出力の形を提供する必要があり、それに応じて確率が調整されます。"

#: ../../tutorials/01_neural_networks.ipynb:619
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr " ``CircuitQNN`` は、密な確率ベクトルだけでなく、疎な確率ベクトルを返すように設定できます。 ``interpret`` 関数を使用しない場合、確率ベクトルの次元は量子ビット数に応じて指数関数的に増加するため、通常は疎なものを推奨します。 ``interpret`` 関数を使用する場合は、期待される結果に依存します。例えば、インデックスが対応するビット列のパリティにマッピングされる場合、つまり0または1にマッピングされる場合、密な出力が意味を持ち、結果は長さ2の確率ベクトルになります。"

#: ../../tutorials/01_neural_networks.ipynb:662
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 出力: 疎な整数の確率"

#: ../../tutorials/01_neural_networks.ipynb:761
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 出力: 密なパリティ確率"

#: ../../tutorials/01_neural_networks.ipynb:869
msgid "4.3 Output: Samples"
msgstr "4.3 出力: サンプル"

#: ../../tutorials/01_neural_networks.ipynb:985
msgid "4.4 Output: Parity Samples"
msgstr "4.4 出力: パリティー・サンプル"

