msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-07 03:44+0000\n"
"PO-Revision-Date: 2023-02-15 13:22\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/12_quantum_autoencoder.po\n"
"X-Crowdin-File-ID: 9929\n"

#: ../../tutorials/12_quantum_autoencoder.ipynb:9
msgid "This page was generated from `docs/tutorials/12_quantum_autoencoder.ipynb`__."
msgstr "このページは `docs/tutorials/12_quantum_autoencoder.ipynb`__ から生成されました。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:22
#: ../../tutorials/12_quantum_autoencoder.ipynb:52
msgid "The Quantum Autoencoder"
msgstr "量子オートエンコーダー"

#: ../../tutorials/12_quantum_autoencoder.ipynb:33
msgid "The goal of this tutorial is to build an Quantum Autoencoder, a circuit which can compress a quantum state onto a smaller amount of qubits, while retaining the information from the initial state."
msgstr "このチュートリアルの目的は、量子オートエンコーダを作ることです。量子オートエンコーダーは、初期状態からの情報を保持しながら、より少ない量子ビットに量子状態を圧縮できる回路です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:35
msgid "Throughout this tutorial, we explain the architecture of a Quantum Autoencoder and how one can design and train such a system to compress and encode information. Following this discussion, we give two examples to demonstrate the capabilities of such a system to compress different quantum states, as well as the ability to compress images of zeros and ones."
msgstr "このチュートリアルでは、量子オートエンコーダーのアーキテクチャーと、情報を圧縮し符号化するためにどのように設計し訓練できるかを説明します。この議論に続いて、このようなシステムが異なる量子状態を圧縮する能力と、0と1の画像を圧縮する能力を示すために、2つの例を挙げます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:47
msgid "Contents"
msgstr "目次"

#: ../../tutorials/12_quantum_autoencoder.ipynb:49
msgid "The following tutorial is broken down as follows:"
msgstr "チュートリアルは、以下のように構成されています。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:51
msgid "What is an Autoencoder?"
msgstr "オートエンコーダーとは何か?"

#: ../../tutorials/12_quantum_autoencoder.ipynb:53
msgid "Components of a Quantum Autoencoder"
msgstr "量子オートエンコーダーの構成要素"

#: ../../tutorials/12_quantum_autoencoder.ipynb:54
msgid "Choosing a Loss Function"
msgstr "損失関数の選択"

#: ../../tutorials/12_quantum_autoencoder.ipynb:55
msgid "Building our Autoencoder"
msgstr "オートエンコーダーの構築"

#: ../../tutorials/12_quantum_autoencoder.ipynb:56
msgid "A Simple Example: The Domain Wall"
msgstr "簡単な例：領域の壁"

#: ../../tutorials/12_quantum_autoencoder.ipynb:57
msgid "A Quantum Autoencoder for Noisy Images of Digits"
msgstr "ノイズがある数字の画像のための量子オートエンコーダー"

#: ../../tutorials/12_quantum_autoencoder.ipynb:58
msgid "Applications of a Quantum Autoencoder"
msgstr "量子オートエンコーダーの応用"

#: ../../tutorials/12_quantum_autoencoder.ipynb:59
msgid "References"
msgstr "参考文献"

#: ../../tutorials/12_quantum_autoencoder.ipynb:71
msgid "1. What is an Autoencoder?"
msgstr "1. オートエンコーダーとは何か?"

#: ../../tutorials/12_quantum_autoencoder.ipynb:82
msgid "A classical autoencoder (CAE) is a type of neural network architecture that is commonly used to efficiently compress and encode information from the input using of representation learning. Following compression, one can then uncompress the data through the use of a decoder."
msgstr "古典的オートエンコーダー (CAE) はニューラルネットワークの一種で、表現学習を利用して入力から情報を効率的に圧縮し、符号化するためによく使われるアーキテクチャーです。圧縮した後、デコーダーを使ってデータを復元することができます"

#: ../../tutorials/12_quantum_autoencoder.ipynb:84
msgid "Typical autoencoders are commonly divided into three layers, as seen in Figure 1."
msgstr "一般的なオートエンコーダーは、図 1に示すように 3 つの層に分けられています。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:95
msgid "|qae_fig1_wide.png| Figure 1: Example of a Classical Autoencoder which includes the input, bottleneck and output layer."
msgstr "| qae_fig1_wide.png| 図 1:入力層、ボトルネック層、出力層を含む古典的なオートエンコーダーの例。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:97
msgid "qae_fig1_wide.png"
msgstr "qae_fig1_wide.png"

#: ../../tutorials/12_quantum_autoencoder.ipynb:108
msgid "The first layer is called the Input Layer (1) and is the layer of which we input our data of length :math:`n`."
msgstr "最初の層は入力層 (1)と呼ばれ、長さ :math:`n` のデータを入力する層です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:110
msgid "The input data then passes through an encoder and travels to the next layer, which has less nodes or is reduced in dimensions and is known as the Bottleneck Layer (2). The input layer is compressed through this process. Common CAEs may have several layers."
msgstr "入力データはエンコーダーを通過し、次の層に移動します。この層はノード数が少ないか、次元が小さく、ボトルネック層 (2) と呼ばれます。入力層は、このプロセスを通じて圧縮されます。一般的なCAEでは、いくつかの層を持つことがあります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:112
msgid "The final layer is called the Output Layer (3). Here the compressed data is reconstructed to its original size, :math:`n`, from the compressed data through the process of a decoder."
msgstr "最後の層は出力層 (3) と呼ばれます。ここでは、圧縮されたデータから、デコーダーの処理によって元のサイズである :math:`n` に復元されます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:114
msgid "By passing our input data through a CAE, we are therefore able to reduce the dimensionality of our input data, as seen in the bottleneck layer, while retaining as much information as possible from the input data. Because of this feature, common uses of CAE are Image Denoising, Anomaly Detection and Facial Recognition devices. For more information on classical autoencoders, see [1]."
msgstr "このように、入力データをCAEに通すことで、入力データからできるだけ多くの情報を保持したまま、ボトルネック層に見られるように入力データの次元を小さくできるのです。この特徴から、CAEの一般的な用途としては、画像ノイズ除去、異常検出、顔認識装置などが挙げられます。古典的なオートエンコーダの詳細については、[1] を参照してください。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:126
msgid "2. The Quantum Autoencoder"
msgstr "2. 量子オートエンコーダー"

#: ../../tutorials/12_quantum_autoencoder.ipynb:137
msgid "We can also define a quantum counterpart to the CAE, the Quantum Autoencoder. Much like the CAE, the Quantum Autoencoder aims to reduce the dimensionality of the input of the neural network, in this case a quantum state. A pictorial representation of this can be seen in Figure 2."
msgstr "CAEに対応する量子オートエンコーダーを定義することもできます。CAEと同様に、量子オートエンコーダーはニューラルネットワークの入力（この場合は量子状態）の次元を小さくすることを目的としています。図2にそのイメージを示します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:148
msgid "|qae_fig2_wide.png| Figure 2: Pictorial Representation of a Quantum Autoencoder. Here one can see the similarities with the CAE, with the circuit having an input state, bottleneck state and an output state."
msgstr "|qae_fig2_wide.png| 図2：量子オートエンコーダの図解。ここでは、回路が入力状態、ボトルネック状態、出力状態を持つという、CAEとの類似性を見ることができます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:150
msgid "qae_fig2_wide.png"
msgstr "qae_fig2_wide.png"

#: ../../tutorials/12_quantum_autoencoder.ipynb:161
msgid "Much like its classical counterpart, our circuit contains three layers. We first input our state :math:`|\\psi>` (which contains :math:`n` qubits), of which we wish to compress. This is our input layer (1)."
msgstr "古典的なものと同じように、この回路は3つの層で構成されています。まず、圧縮したい状態 :math:`|psi>` (これは :math:`n` 個の量子ビットを含む) を入力します。これが入力層 (1) です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:163
msgid "We then apply our parametrized circuit on our input state, which will act as our encoder and ‘compresses’ our quantum state, reducing the dimensionality of our state to :math:`n-k` qubits. Our new compressed state is of the form :math:`|\\psi_{comp}> \\otimes |0>^{\\otimes k}`, where :math:`|\\psi_{comp}>` contains :math:`n-k` qubits."
msgstr "この回路はエンコーダーとして働き、量子状態を「圧縮」し、量子ビットの次元を :math:`n-k` まで減少させます。圧縮された新しい状態は :math:`|psi_{comp}> \\otimes |0>^{\\otimes k}` という形式で、ここで :math:`|psi_{comp}>` は :math:`n-k` 個の量子ビットを含みます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:165
msgid "This parametrized circuit will depend on a set of parameters, which will be the nodes of our Quantum Autoencoder. Throughout the training process, these parameters will be updated to optimize the loss function."
msgstr "このパラメーター化された回路は、量子オートエンコーダーのノードとなるパラメーターのセットに依存します。学習プロセスを通じて、これらのパラメーターは損失関数を最適化するために更新されます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:167
msgid "We disregard the remaining :math:`k` qubits for the remainder of the circuit. This is our bottleneck layer (2) and our input state is now compressed."
msgstr "残りの :math:`k` 量子ビットは無視します。これがボトルネック層(2)であり、入力状態は圧縮された状態です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:169
msgid "The final layer consists of the addition of :math:`k` qubits (all in the state :math:`|0\\rangle`) and applying another parametrized circuit between the compressed state and the new qubits. This parametrized circuit acts as our decoder and reconstructs the input state from the compressed state using the new qubits. After the decoder, we retain the original state as the state travels to the output layer (3)."
msgstr "最後の層は :math:`k` 個の量子ビット (全て :math:`|0\\rangle` 状態) を追加し、圧縮された状態と新しい量子ビットの間に別のパラメーター化された回路を適用します。このパラメーター化された回路はデコーダーとして機能し、新しい量子ビットを使って圧縮された状態から入力状態を再構成します。デコーダーの後、状態が出力層 (3) に移動する際に元の状態を保持します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:181
msgid "3. Components of a Quantum Autoencoder"
msgstr "3. 量子オートエンコーダーの構成要素"

#: ../../tutorials/12_quantum_autoencoder.ipynb:192
msgid "Before building our Quantum Autoencoder, we must note a few subtleties."
msgstr "量子オートエンコーダーを構築する前に、いくつかの微妙な点について注意しなければなりません。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:194
msgid "We first note that we cannot introduce or disregard qubits in the middle of a Quantum Circuit when implementing an autoencoder using Qiskit."
msgstr "まず、Qiskitを使ってオートエンコーダーを実装するとき、量子回路の途中で量子ビットを導入したり無視したりできないことに注意します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:196
msgid "Because of this we must include our reference state as well as our auxiliary qubits (whose role will be described in later sections) at the beginning of the circuit."
msgstr "このため、回路の最初に参照状態と補助量子ビット (その役割は後のセクションで説明します) を含めなければなりません。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:198
msgid "Therefore our input state will consist of our input state, reference state and one auxiliary qubit, as well as a classical register to perform measurements (which will be described in the next section). A pictorial representation of this can be seen in Figure 3."
msgstr "したがって、入力状態は、入力状態、参照状態、1つの補助量子ビット、そして測定を行うための古典的なレジスター (次のセクションで説明します) で構成されることになります。これを絵で表したのが図3です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:209
msgid "|qae_fig3_wide.png| Figure 3: Pictorial Representation of input state of Quantum Autoencoder. Note that we must also include an auxiliary qubit, the reference state and classical register at the beginning of the circuit, even though they are not used until later in the circuit."
msgstr "|qae_fig3_wide.png| 図3：量子オートエンコーダーの入力状態の図解。補助量子ビット、参照状態、古典レジスターも、回路の後半まで使用されないにもかかわらず、回路の最初に含めなければならないことに注意してください。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:211
msgid "qae_fig3_wide.png"
msgstr "qae_fig3_wide.png"

#: ../../tutorials/12_quantum_autoencoder.ipynb:223
msgid "4. Choosing a Loss Function"
msgstr "4. 損失関数の選択"

#: ../../tutorials/12_quantum_autoencoder.ipynb:234
msgid "We now define our cost function, which we will use to train our Quantum Autoencoder, to return the input state. There’s a bit of math involved here, so skip this section if you’re not interested!"
msgstr "量子オートエンコーダーの訓練に使用する、入力状態を返すためのコスト関数を定義します。ここで少し数学が絡んでくるので、興味のない方はこのセクションを飛ばしてください。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:236
msgid "We take the cost function as defined in [2], which tries to maximize the fidelity between the input and output state of our Quantum Autoencoder."
msgstr "この関数は、量子オートエンコーダーの入力と出力の状態の間の忠実度を最大化しようとするもので、[2] で定義されているように、コスト関数を取ります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:238
msgid "We first define subsystems :math:`A` and :math:`B` to contain :math:`n` and :math:`k` qubits respectively, while :math:`B'` is the space which will contain our reference space. We call the subsystem :math:`A` our latent space, which will contain the compressed qubit state, and :math:`B` our trash space, which contain the qubits of which we disregard throughout compression."
msgstr "まず、サブシステム :math:`A` と :math:`B` を定義し、それぞれ :math:`n` と :math:`k` の量子ビットを格納することにします。:math:`B'` は参照空間です。我々は、サブシステム :math:`A` を潜在空間と呼び、圧縮された量子ビットの状態を格納します。また、 :math:`B` をゴミ空間と呼び、圧縮時に無視された量子ビットを格納します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:240
msgid "Our input state therefore :math:`|\\psi_{AB}>` contains :math:`n + k` qubits. We define the reference space :math:`B'` which contains the reference state :math:`|a>_{B'}`. This space will contain the additional :math:`k` qubits we use in the decoder. All of these subsystems can be seen in Figure 3."
msgstr "したがって、入力状態 :math:`|psi_{AB}>` は :math:`n + k` 個の量子ビットを含んでいます。参照状態 :math:`|a>_{B'}` を含む参照空間 :math:`B'` を定義します。この空間には、デコーダーで使用する追加の :math:`k` 量子ビットが含まれます。これらの全てのサブシステムを図3に示します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:242
msgid "We define the parameterized circuit as :math:`U(\\theta)` which we will use as our encoder. However the structure and parameters of our parametrized circuit is currently unknown to us and may vary for different input states. To determine the parameters to compress our input state, we must train our device to maximally compress the state by adjusting the values of the parameters :math:`\\theta`. For the decoder we will use :math:`U^{\\dagger}(\\theta)`."
msgstr "パラメーター化された回路を :math:`U(\\theta)` と定義し、これをエンコーダーとして使用することにします。しかし、パラメーター化された回路の構造やパラメーターは今のところ不明であり、異なる入力状態に対して変化する可能性があります。入力状態を圧縮するためのパラメーターを決定するために、パラメーター :math:`\\theta` の値を調整することによって、状態を最大限に圧縮するようにデバイスを訓練する必要があります。デコーダーには :math:`U^{\\dagger}(\\theta)` を使用します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:244
msgid "Our goal therefore is to maximize the fidelity between the input and output states, i.e."
msgstr "したがって、我々の目標は、入力と出力の状態の間の忠実度を最大化すること、つまり、以下を最大化します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:246
msgid "\\text{max }F(\\psi_{AB}, \\rho_{out})\n\n"
msgstr "\\text{max }F(\\psi_{AB}, \\rho_{out})\n\n"

#: ../../tutorials/12_quantum_autoencoder.ipynb:248
msgid "where"
msgstr "ここで"

#: ../../tutorials/12_quantum_autoencoder.ipynb:250
msgid "\\rho_{out} = U^{\\dagger}(\\theta)_{AB'} \\text{Tr}_{B} [U(\\theta)_{AB}[\\psi_{AB} \\otimes a_{B'}]U^{\\dagger}(\\theta)_{AB}]U(\\theta)_{AB'}\n\n"
msgstr "\\rho_{out} = U^{\\dagger}(\\theta)_{AB'} \\text{Tr}_{B} [U(\\theta)_{AB}[\\psi_{AB} \\otimes a_{B'}]U^{\\dagger}(\\theta)_{AB}]U(\\theta)_{AB'}\n\n"

#: ../../tutorials/12_quantum_autoencoder.ipynb:252
msgid "We can maximize this fidelity by tuning the parameters :math:`\\theta` in our parametrized circuit. However, this fidelity can at times be complicated to determine and may require a large amount of gates needed to calculate the fidelity between two states, i.e. the larger the number of qubits, the more gates required which results to deeper circuits. Therefore we look for alternative means of comparing the input and output states."
msgstr "この忠実度は、パラメーター化された回路のパラメーター :math:`\\theta` を調整することで最大化することができます。しかし、この忠実度を決定するのは複雑で、2つの状態の忠実度を計算するために大量のゲートを必要とすることがあります。つまり、量子ビットの数が大きくなればなるほど、より多くのゲートが必要となり、結果として回路が深くなってしまいます。そこで私たちは、入力と出力の状態を比較する別の方法を探します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:254
msgid "As shown in [2] a simpler way of determining an optimally compressed state is to perform a swap gate between the trash state and reference state. These states usually have a smaller number of qubits and are therefore easier to compare, due to the smaller amount of gates required. As shown in [2] maximizing the fidelity of such these two states is equivalent to maximizing the fidelity of the input and output state and thus determining an optimal compression of our input circuit."
msgstr "[2] で示したように、最適な圧縮状態を決定するより簡単な方法は、ゴミ状態と参照状態との間でスワップゲートを実行することです。これらの状態は通常、より少ない数の量子ビットを持ち、したがって、必要なゲートの量が少ないため、比較しやすくなっています。[2] で示したように、これら2つの状態の忠実度を最大化することは、入力と出力の状態の忠実度を最大化することと等しく、したがって、入力回路の最適な圧縮を決定できるのです。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:256
msgid "Keeping our reference state fixed, our cost function will now be a function of the trash state and is denoted as;"
msgstr "参照状態を固定すると、コスト関数はゴミ状態の関数となり、次のように示されます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:258
msgid "\\text{max }F(\\text{Tr}_{A} [ U(\\theta)_{AB}\\psi_{AB} U^{\\dagger}(\\theta)_{AB}], a_{B'})\n\n"
msgstr "\\text{max }F(\\text{Tr}_{A} [ U(\\theta)_{AB}\\psi_{AB} U^{\\dagger}(\\theta)_{AB}], a_{B'})\n\n"

#: ../../tutorials/12_quantum_autoencoder.ipynb:260
msgid "Throughout the training process, we adjust the parameters :math:`\\theta` in our encoder and perform a swap test (as described below) to determine the fidelity between these trash and reference states. In doing so, we must include an additional qubit, our auxiliary qubit, which will be used throughout the swap test and measured to determine the overall fidelity of the trash and reference states. This is the reason why we included both an auxiliary qubit and classical register in the previous section when initializing our circuit."
msgstr "学習プロセスを通して、エンコーダーのパラメーター :math:`\\theta` を調整し、スワップテスト (後述) を行い、ゴミ状態と参照状態の間の忠実度を決定します。その際、補助量子ビットを追加する必要があります。この量子ビットはスワップテストの間中使用され、ゴミ状態と参照状態の全体的な忠実度を決定するために測定されます。これが、前節で回路の初期化時に補助量子ビットと古典レジスターの両方を含めた理由です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:273
msgid "The SWAP Test"
msgstr "SWAP テスト"

#: ../../tutorials/12_quantum_autoencoder.ipynb:284
msgid "The SWAP Test is a procedure commonly used to compare two states by applying CNOT gates to each qubit (for further information see [3]). By running the circuit :math:`M` times, and applying the SWAP test, we then measure the auxiliary qubit. We use the number of states in the state :math:`|1\\rangle` to compute:"
msgstr "SWAPテストとは、各量子ビットに対してCNOTゲートを適用し、2つの状態を比較するためによく使われる手順です (詳しくは[3]を参照してください)。回路を :math:`M` 回走らせ、SWAPテストを適用し、次に補助量子ビットを測定します。このとき、状態 :math:`|1\\rangle` である状態の数を使って計算します:"

#: ../../tutorials/12_quantum_autoencoder.ipynb:286
msgid "S = 1 - \\frac{2}{M}L\n\n"
msgstr "S = 1 - \\frac{2}{M}L\n\n"

#: ../../tutorials/12_quantum_autoencoder.ipynb:288
msgid "where :math:`L` is the count for the states in the :math:`|1\\rangle` state. As shown in [3], maximizing this function corresponds to the two states of which we are comparing being identical. We therefore aim to maximize this function, i.e. minimize :math:`\\frac{2}{M}L`. This value will be therefore be our cost function."
msgstr "ここで、 :math:`L` は :math:`|1\\rangle` 状態の数です。[3]で示したように、この関数を最大化することは、比較する2つの状態が同一であることに対応します。したがって、この関数を最大化すること、すなわち :math:`\\frac{2}{M}L` を最小化することを目指します。したがって、この値が我々のコスト関数となります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:300
msgid "5. Building the Quantum Autoencoder Ansatz"
msgstr "5. 量子オートエンコーダーAnsatz の構築"

#: ../../tutorials/12_quantum_autoencoder.ipynb:311
msgid "First, we implement IBM’s Qiskit to build our Quantum Autoencoder. We first begin by importing in the necessary libraries and fixing the seed."
msgstr "まず、IBMのQiskitを実装して、量子オートエンコーダーを構築します。まず、必要なライブラリーをインポートし、シードを指定するところから始めます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:349
msgid "We begin by defining our parametrized ansatz for the Quantum Autoencoder. This will be our parametrized circuit where we can tune the parameters to maximize the fidelity between the trash and reference states."
msgstr "まず、量子オートエンコーダーのためのパラメーター化されたansatzを定義することから始めます。この回路はパラメーターを調整することで、ゴミ状態と参照状態の間の忠実度を最大にできる、パラメーター化された回路となります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:352
msgid "The Parametrized Circuit"
msgstr "パラメーター化された回路"

#: ../../tutorials/12_quantum_autoencoder.ipynb:354
msgid "The parametrized circuit we will use below for our encoder is the RealAmplitude Ansatz available in Qiskit. One of the reasons why we have chosen this ansatz is because it is a 2-local circuit, the prepared quantum states will only have real amplitudes, and does not rely on full connectivity between each qubits, which is hard to implement or can lead to deep circuits."
msgstr "私たちのエンコーダーに使用するパラメーター化された回路は、Qiskitで利用可能なRealAmplitude Ansatzです。この回路を選んだ理由の1つは、2ローカル回路であり、準備された量子状態は実振幅のみを持ち、実装が困難で深い回路になってしまう各量子ビット間の完全な接続性に依存しないからです。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:356
msgid "We define our parametrized circuit for our Encoder below, where we set the repetition parameter to ``reps=5``, to increase the number of parameters in our circuit allowing greater flexibility."
msgstr "この回路では、繰り返しパラメーターを ``reps=5`` とし、パラメーター数を増やすことでより柔軟な回路を実現しています。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:378
msgid "Let’s draw this ansatz with :math:`5` qubits and see what it looks like."
msgstr "このansatzを :math:`5` 量子ビットで描いて見ましょう。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:410
msgid "We now apply this Encoder to the state we wish to compress. In this example, we divide our initial :math:`5` qubit state into a :math:`3` qubit latent state (:math:`n = 3`) and :math:`2` qubit trash space (:math:`k = 2`)."
msgstr "次に、このエンコーダーを圧縮したい状態に適用します。この例では、最初の :math:`5` 個の量子ビットの状態を :math:`3` 個の量子ビット潜在状態 (:math:`n = 3`) と :math:`2` 個の量子ビットゴミ空間 (:math:`k = 2`) に分割しています。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:412
msgid "As explained in the previous section, we must also include a :math:`2` qubit reference space in our circuit, as well as an auxiliary qubit to perform the swap test between the reference and trash states. We will therefore have a total of :math:`2 + 3 + 2 + 1 = 8` qubits and :math:`1` classical register in our circuit."
msgstr "前のセクションで説明したように、私たちの回路には :math:`2` 量子ビットの参照空間と、参照状態とゴミ状態の間でスワップテストを行うための補助量子ビットも含める必要があります。したがって、私たちの回路には合計で :math:`2 + 3 + 2 + 1 = 8` 個の量子ビットと :math:`1` 個の古典レジスターが含まれることになります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:414
msgid "After initializing our state, we apply our parametrized circuit."
msgstr "状態を初期化した後、パラメーター化された回路を適用します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:416
msgid "Following this, we then split our initial state into the latent space (the compressed state) and trash space (the part of the state we will disregard) and perform the swap test between the reference state and the trash space. The last qubit is then measured to determine the fidelity between the reference and trash states. A pictorial representation of this is given below in Figure 4."
msgstr "続いて、初期状態を潜在空間 (圧縮された状態) とゴミ空間 (無視する部分) に分割し、参照状態とゴミ空間とのスワップテストを行います。そして、最後の量子ビットを測定して、参照状態とゴミ状態の間の忠実度を決定します。これを絵で表したのが、以下の図4です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:427
msgid "|qae_fig4_wide.png|"
msgstr "|qae_fig4_wide.png|"

#: ../../tutorials/12_quantum_autoencoder.ipynb:429
msgid "qae_fig4_wide.png"
msgstr "qae_fig4_wide.png"

#: ../../tutorials/12_quantum_autoencoder.ipynb:440
msgid "Figure 4: Example of a Quantum Autoencoder in the training process. We use the swap test to determine the fidelity between the trash and reference space."
msgstr "図4：学習過程における量子オートエンコーダーの例。ゴミ空間と参照空間の間の忠実度を判断するためにスワップテストを用います。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:451
msgid "We define a function below to implement the above circuit configuration to the :math:`5` qubit domain wall state :math:`|00111\\rangle` and plot an example below. Here qubits :math:`5` and :math:`6` are the reference state, :math:`0, 1, 2, 3, 4` are the initial state we wish to compress and qubit :math:`7` is our auxiliary qubit which is used in the swap test. We also include a classical register to measure the results of qubit :math:`7` in the swap test."
msgstr "ここでは、 :math:`5` 量子ビットのドメインウォール状態 :math:`|00111\\rangle` に対して上記の回路を実装するための関数を定義し、その例を以下に示します。ここで、量子ビット :math:`5` と :math:`6` は参照状態、 :math:`0, 1, 2, 3, 4` は圧縮したい初期状態、量子ビット :math:`7` はスワップテストに使用する補助的な量子ビットです。また、スワップテストにおける量子ビット :math:`7` の結果を測定するための古典的なレジスターも含まれています。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:501
msgid "In order to reconstruct the original input state, we must apply the adjoint of our parametrized circuit after the swap test. However, during training, we are only interested in the trash state and the reference state. We can therefore exclude the gates following compression until we wish to reconstruct our initial input."
msgstr "元の入力状態を復元するためには、スワップテスト後にパラメーター化された回路の随伴行列を適用する必要があります。しかし、学習中はゴミ状態と参照状態にしか興味がありません。したがって、最初の入力を再構成したいときまで、圧縮後のゲートを除外することができます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:503
msgid "After building our Quantum Autoencoder, the next step is to train our Quantum Autoencoder to compress the state and maximize the cost function and determine the parameters :math:`\\theta`."
msgstr "量子オートエンコーダーを構築したら、次は量子オートエンコーダーを訓練して状態を圧縮し、コスト関数を最大化し、パラメータ :math:`\\theta` を決定する必要があります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:515
msgid "6. A Simple Example: The Domain Wall Autoencoder"
msgstr "6. 簡単な例：ドメインウォール・オートエンコーダー"

#: ../../tutorials/12_quantum_autoencoder.ipynb:526
msgid "Let’s first begin with a simple example, a state known as the Domain Wall, which for :math:`5` qubits is given by :math:`|00111\\rangle`. Here we will try and compress this state from :math:`5` qubits to :math:`3` qubits, with the remaining qubits in the trash space, in the state :math:`|00\\rangle`. We can create a function to build the domain wall state below."
msgstr "まず、簡単な例から始めましょう。ドメインウォールとして知られる状態は、 :math:`5` 量子ビットに対して :math:`|00111\\rangle` によって与えられます。ここで、この状態を :math:`5` 量子ビットから :math:`3` 量子ビットに圧縮しようと試み、残りの量子ビットはゴミ状態 :math:`|00\\rangle` に入れましょう。 以下のドメインウォール状態を構築する関数を作成できます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:564
msgid "Now let’s train our Autoencoder to compress this state from 5 qubits to 3 qubits (qubits 0,1 and 2), with the remaining qubits in the trash space (qubits 3 and 4) being in the \\|00> state."
msgstr "さて、この状態を5量子ビットから3量子ビット (量子ビット0、1、2) に圧縮し、ゴミ空間の残りの量子ビット (量子ビット3、4) は \\|00> 状態になるようにオートエンコーダーを学習させましょう。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:575
msgid "We create a circuit to be used in the loss function, as described in Section 4, which determines the fidelity between the two states below using the swap test for our particular AutoEncoder function. For further information on the swap test, see [1]."
msgstr "我々は、セクション4で説明するように、損失関数で使用する回路を作成し、我々の特定のAutoEncoder関数に対するスワップテストを使用して、以下の2つの状態間の忠実度を決定します。スワップテストの詳細については、[1] を参照してください。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:609
msgid "Then, we create a quantum neural network and pass the circuit as a parameter. We note that this network must take an interpret function, which determines how we map the output of the network to the output shape. Since we measure only one qubit, the output of the network is a bit string either :math:`0` or :math:`1`, so the output shape is :math:`2`, the number of possible outcomes. Then, we introduce an identity mapping. The output of the network is a vector of probabilities of getting interpret-mapped bit strings. Thus, we get probabilities of getting :math:`0` or :math:`1` and this is exactly what we are looking for. In the cost function we make use of the probability of getting :math:`1` and penalize the outcomes that lead to :math:`1`, therefore maximizing the fidelity between the trash space and the reference space."
msgstr "次に、量子ニューラルネットワークを作成し、その回路をパラメーターとして渡します。このネットワークは、ネットワークの出力をどのように出力形状にマッピングするかを決定する、解釈関数を受け取らなければならないことに注意してください。量子ビットは1つだけなので、ネットワークの出力は :math:`0` か :math:`1` のビット列となり、出力形状は :math:`2` となります (これは可能な結果の数です)。次に、恒等写像を導入します。ネットワークの出力は、解釈マッピングされたビット文字列を得る確率のベクトルです。つまり、 :math:`0` や :math:`1` を得る確率が得られ、これはまさに我々が求めているものです。コスト関数では、:math:`1` を得る確率を利用し、 :math:`1` につながる結果にペナルティを与えることで、ゴミ空間と参照空間の間の忠実度を最大化します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:642
msgid "Next we create our cost function. As described in the previous section, our aim is to minimize :math:`\\frac{2}{M}L`, which is the twice the probability of getting the final qubit in the :math:`|1\\rangle` state. We therefore wish to minimize the of getting a :math:`|1\\rangle` on qubit 7."
msgstr "次に、コスト関数を作成します。前のセクションで説明したように、我々の目的は:math:`\\frac{2}{M}L` を最小化することで、これは最終的に量子ビットが :math:`|1\\rangle` 状態となる確率の2倍です。したがって、量子ビット7で :math:`|1\\rangle` を得る確率を最小にしたいのです。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:644
msgid "The cost function will also plot out the objective value at each cost function evaluation."
msgstr "また、コスト関数は、各コスト関数評価時の目的値をプロットすることになります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:678
msgid "Now we will train our Autoencoder to reduce the dimension of the Hilbert space from :math:`5` qubits to :math:`3`, while leaving the trash space in the state :math:`|00\\rangle`. We initially set the parameters :math:`\\theta` to random values and tune these parameters to minimize our cost function through the use of the COBYLA optimizer."
msgstr "ここでは、Hilbert空間の次元を :math:`5` 量子ビットから :math:`3` に減らし、ゴミ空間は :math:`|00\\rangle` の状態のままにして、オートエンコーダーを学習させます。パラメーター :math:`\\theta` をランダムな値に初期設定し、COBYLAオプティマイザーを使用してコスト関数を最小化するようにこれらのパラメーターをチューニングします。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:743
msgid "Looks like it has converged! After training our Quantum Autoencoder, let’s build it and see how well it compresses the state!"
msgstr "どうやら収束したようです! 量子オートエンコーダーを学習させた後、それを構築し、状態をどれだけ圧縮できるかを見てみましょう。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:745
msgid "To do this, we first apply our Autoencoder to a :math:`5` qubit Domain Wall state. After applying this state, the compressed state should be of the form :math:`|00\\rangle`. Therefore resetting the last two qubits should not effect our over all state."
msgstr "これを行うには、まずオートエンコーダーを :math:`5` 量子ビット・ドメインウォール状態に適用します。この状態を適用した後、圧縮された状態は :math:`|00\\rangle` のような形になるはずです。したがって、最後の2つの量子ビットをリセットしても、全体的な状態に影響を与えることはありません。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:747
msgid "After resetting we apply our decoder (the hermitian conjugate of our encoder) and compare it to the initial state by determining the fidelity. If our fidelity is one, then our Autoencoder has encoded all the information of the domain wall efficiently into a smaller set of qubits and when decoding, we retain the original state!"
msgstr "リセット後、デコーダー (エンコーダーのエルミート共役) を適用し、忠実度を決定することによって初期状態と比較します。忠実度が1であれば、オートエンコーダーはドメインウォールのすべての情報をより小さな量子ビットの集合に効率的にエンコードしたことになり、デコード時には元の状態を保持することになります！"

#: ../../tutorials/12_quantum_autoencoder.ipynb:758
msgid "Let’s first apply our circuit to the Domain Wall State, using the parameters we obtained when training our Quantum Autoencoder. (Note we have included barriers in our circuit below, however these are not necessary for the implementation of the Quantum Autoencoder and are used to determine between different sections of our circuit)."
msgstr "まず、量子オートエンコーダのトレーニングで得たパラメータを用いて、ドメインウォールの状態に我々の回路を適用してみましょう (この回路にはバリアーが含まれていますが、これは量子オートエンコーダーの実装には必要なく、回路の異なるセクションの間を決定するために使用されます) 。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:798
msgid "Now we assign the parameter values obtained in the training."
msgstr "ここで、学習で得られたパラメーター値を代入します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:819
msgid "Now let’s get the statevectors of our Domain Wall state and output circuit and calculate the fidelity!"
msgstr "それでは、ドメインウォール状態と出力回路の状態ベクトルを取得し、忠実度を計算してみましょう！"

#: ../../tutorials/12_quantum_autoencoder.ipynb:868
msgid "As you can see our fidelity is quite high and our Autoencoder has thus compressed our dataset while retaining all the information from the input state!"
msgstr "このように、オートエンコーダーは入力状態の情報をすべて保持したまま、データセットを圧縮しているのです。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:870
msgid "Now we will see if we can apply such a Quantum Autoencoder to more complicated datasets containing noise, such as images of the numbers zero and one."
msgstr "次に、このような量子オートエンコーダーを、ノイズを含むより複雑なデータセット、例えば数字の0と1の画像に適用できるかどうか見てみましょう。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:882
msgid "7. A Quantum Autoencoder for Digital Compression"
msgstr "7. デジタル圧縮のための 量子オートエンコーダー"

#: ../../tutorials/12_quantum_autoencoder.ipynb:893
msgid "One can also apply a Quantum Autoencoder to more complicated examples, such as a set of handwritten digits in order to compress the dataset. Below, we will show that we can indeed train an Quantum Autoencoder to compress such an example, giving us the ability to store data more efficiently on a Quantum Computer."
msgstr "また、データセットを圧縮するために、手書きの数字の集合のような、より複雑な例にも量子オートエンコーダーを適用することができます。以下では、実際に量子オートエンコーダーを訓練してこのような例を圧縮できることを示し、量子コンピューターでより効率的にデータを保存できるようにします。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:895
msgid "For this tutorial, we will build a Quantum Autoencoder for a noisy dataset containing zeros and ones, which can be seen below."
msgstr "このチュートリアルでは、0と1を含むノイズの多いデータセットに対して、量子オートエンコーダーを構築します（下図）。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:897
msgid "Each image contains :math:`32` pixels of which can be encoded into :math:`5` qubits by Amplitude Encoding. This can be done using Qiskit’s ``RawFeatureVector`` feature map."
msgstr "各画像は :math:`32` ピクセルを含み、振幅エンコーディングによって :math:`5` 個の量子ビットにエンコードされます。これはQiskitの ``RawFeatureVector`` 特徴量マップを使用して行うことができます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1002
msgid "After encoding our image into :math:`5` qubits, we begin to train our Quantum Autoencoder to compress this state into :math:`3` qubits."
msgstr "Math:`5`量子ビットに画像をエンコードした後、この状態を :math:`3` 量子ビットに圧縮するために量子オートエンコーダーの学習を開始します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1004
msgid "We repeat the steps in the previous example and write a cost function, again based on the Swap Test between the trash and latent space. We can also use the same Autoencoder function as given in the previous example, as the input state and trash space contain the same amount of qubits."
msgstr "前の例のステップを繰り返し、再びゴミ空間と潜在空間間のスワップテストに基づいたコスト関数を書きます。入力状態とゴミ空間が同じ量の量子ビットを含むので、前の例で与えられたのと同じオートエンコーダー関数を使用することもできます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1006
msgid "Let’s input one of our digits and see our circuit for the Autoencoder below."
msgstr "1桁の数字を入力し、オートエンコーダーの回路を以下に示します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1047
msgid "Again, we can see the swap test being performed on the qubits :math:`3`, :math:`4`, :math:`5` and :math:`6`, which will determine the value of our cost function."
msgstr "ここでも、スワップテストが量子ビット :math:`3`, :math:`4`, :math:`5`, :math:`6` に対して行われ、コスト関数の値を決定していることがわかります。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1078
msgid "We build our cost function, based on the swap test between the reference and trash space for the digit dataset. To do this, we again use Qiskit’s CircuitQNN network and use the same interpret function as we are measuring the probability of getting the final qubit in the :math:`|1\\rangle` state."
msgstr "我々は、数字データセットの参照空間とゴミ空間の間のスワップテストに基づいて、コスト関数を構築します。これを行うには、再びQiskitのCircuitQNNネットワークを使用し、最終的な量子ビットが :math:`|1\\rangle` 状態になる確率を測定しているのと同じ解釈関数を使用します。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1112
msgid "Since model training may take a long time we have already pre-trained the model for some iterations and saved the pre-trained weights. We’ll continue training from that point by setting ``initial_point`` to a vector of pre-trained weights."
msgstr "モデルの学習には長い時間がかかる可能性があるため、すでにいくつかの反復でモデルを事前学習し、事前学習済みの重みを保存しています。 ``initial_point`` に学習済みの重みのベクトルを設定することで、その時点から学習を継続することにします。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1134
msgid "By minimizing this cost function, we can thus determine the required parameters to compress our noisy images. Let’s see if we can encode our images!"
msgstr "このコスト関数を最小化することで、ノイズの多い画像を圧縮するために必要なパラメーターを決定できるのです。それでは、画像をエンコードしてみましょう。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1197
msgid "Looks like it has converged!"
msgstr "収束したようです!"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1199
msgid "Now let’s build our Encoder and Decoder using the parameters obtained from the training period. After applying this circuit to our new dataset, we can then compare our input and output data and see if we were able to retain the images efficiently throughout the compression!"
msgstr "では、学習期間中に得られたパラメーターを使って、エンコーダーとデコーダーを構築してみましょう。この回路を新しいデータセットに適用した後、入力データと出力データを比較し、圧縮の間、画像を効率的に保持できたかどうかを確認します!"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1265
msgid "It looks like our Quantum Autoencoder can be trained to encode digits as well! Now it’s your turn to build your own Quantum Autoencoder and come up with ideas and datasets to compress!"
msgstr "この量子オートエンコーダーは、数字のエンコードもできるようです。さあ、次はあなたが量子オートエンコーダーを作り、圧縮するためのアイデアやデータセットを考える番です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1277
msgid "8. Applications of a Quantum Autoencoder"
msgstr "8. 量子オートエンコーダーの応用"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1288
msgid "Quantum Autoencoder’s can be used for various different applications, including"
msgstr "量子オートエンコーダは、以下のような様々な用途に使用することができます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1290
msgid "Digital Compression: where information can be encoded into a smaller amount of qubits. This can be hugely beneficial for near term quantum devices, as smaller systems of qubits are less prone to noise."
msgstr "デジタル圧縮: 情報をより少ない量の量子ビットにエンコードすることができます。これは、より小さな量子ビットのシステムは、ノイズの影響を受けにくいので、近い将来の量子デバイスに非常に有益です。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1291
msgid "Denoising: where one can use Quantum Autoencoder to extract relevant features from the initial quantum state or encoded data, while neglecting any additional noise."
msgstr "ノイズ除去: 量子オートエンコーダーを使って、初期量子状態や符号化されたデータから関連する特徴を抽出し、追加されているノイズを無視することができます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1292
msgid "Quantum Chemistry: in which a Quantum Autoencoder can be used as an ansatz for systems, such as the Hubbard Model. This is commonly used to describe electron-electron interactions in molecules."
msgstr "量子化学: 量子オートエンコーダーは、ハバードモデルのようなシステムのAnsatzとして使用することができます。これは、分子内の電子-電子相互作用を記述するために一般的に使用されます。"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1304
msgid "9. References"
msgstr "9. 参考文献"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1315
msgid "A wikipedia page on Autoencoder: https://en.wikipedia.org/wiki/Autoencoder"
msgstr "A wikipedia page on Autoencoder: https://en.wikipedia.org/wiki/Autoencoder"

#: ../../tutorials/12_quantum_autoencoder.ipynb:1317
msgid "Romero, Jonathan, Jonathan P. Olson, and Alan Aspuru-Guzik. “Quantum autoencoders for efficient compression of quantum data.” Quantum Science and Technology 2.4 (2017): 045001."
msgstr "Romero, Jonathan, Jonathan P. Olson, and Alan Aspuru-Guzik. “Quantum autoencoders for efficient compression of quantum data.” Quantum Science and Technology 2.4 (2017): 045001."

#: ../../tutorials/12_quantum_autoencoder.ipynb:1319
msgid "Swap Test Algorithm: https://en.wikipedia.org/wiki/Swap_test"
msgstr "Swap Test Algorithm: https://en.wikipedia.org/wiki/Swap_test"

