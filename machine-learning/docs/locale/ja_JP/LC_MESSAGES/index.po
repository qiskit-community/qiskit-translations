msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 18:01+0000\n"
"PO-Revision-Date: 2022-07-09 05:12\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/index.po\n"
"X-Crowdin-File-ID: 9524\n"
"Language: ja_JP\n"

#: ../../index.rst:6 ../../index.rst:71
msgid "Overview"
msgstr "概要"

#: ../../index.rst:71
msgid "Getting Started"
msgstr "はじめに"

#: ../../index.rst:71
msgid "Tutorials"
msgstr "チュートリアル"

#: ../../index.rst:71
msgid "API Reference"
msgstr "API リファレンス"

#: ../../index.rst:71
msgid "Release Notes"
msgstr "リリースノート"

#: ../../index.rst:71
msgid "GitHub"
msgstr "GitHub"

#: ../../index.rst:3
msgid "Qiskit Machine Learning overview"
msgstr "Qiskit Machine Learningの概要"

#: ../../index.rst:8
msgid "Qiskit Machine Learning introduces fundamental computational building blocks - such as Quantum Kernels and Quantum Neural Networks - used in different applications, including classification and regression. On the one hand, this design is very easy to use and allows users to rapidly prototype a first model without deep quantum computing knowledge. On the other hand, Qiskit Machine Learning is very flexible, and users can easily extend it to support cutting-edge quantum machine learning research."
msgstr "Qiskit Machine Learningは、分類や回帰など、さまざまなアプリケーションで使用される基本的な計算ビルディングブロック、量子カーネル (Quantum Kernel) や 量子ニューラルネットワーク (Quantum Neural Networks) など、を導入しています。 この設計は非常に使いやすく、ユーザーは量子コンピューティングの深い知識がなくても最初のモデルのプロトタイプをすばやく作成できます。 一方、Qiskit Machine Learningは非常に柔軟性があり、ユーザーはそれを簡単に拡張して最先端の量子機械学習研究をサポートできます。"

#: ../../index.rst:14
msgid "Qiskit Machine Learning provides the :class:`~qiskit_machine_learning.kernels.QuantumKernel` class that can be easily used to directly compute kernel matrices for given datasets or can be passed to a Quantum Support Vector Classifier (:class:`~qiskit_machine_learning.algorithms.QSVC`) or Quantum Support Vector Regressor (:class:`~qiskit_machine_learning.algorithms.QSVR`) to quickly start solving classification or regression problems. It also can be used with many other existing kernel-based machine learning algorithms from established classical frameworks."
msgstr "Qiskit Machine Learning は、 :class:`~qiskit_machine_learning.kernels.QuantumKernel` クラスを提供します。これらのクラスは、与えられたデータ・セットのカーネル行列を直接計算するため、または 量子サポートベクトル分類器（Quantum Support Vector Classifier、 :class:`~qiskit_machine_machine_machine_learning.QSVC` ) または 量子サポートベクトル回帰（Quantum Support Vector Regressor、 :class:`~qiskit_machine_learning.QSVR` ) に渡すことができます。このクラスは、分類または回帰の問題の解決を迅速に開始できます。 これは、確立された古典的なフレームワークから、他の多くの既存のカーネルベースの機械学習アルゴリズムと共に使用することができます。"

#: ../../index.rst:23
msgid "Qiskit Machine Learning defines a generic interface for neural networks that is implemented by different quantum neural networks. Multiple implementations are readily provided, such as the :class:`~qiskit_machine_learning.neural_networks.OpflowQNN`, the :class:`~qiskit_machine_learning.neural_networks.TwoLayerQNN`, and the :class:`~qiskit_machine_learning.neural_networks.CircuitQNN`. The :class:`~qiskit_machine_learning.neural_networks.OpflowQNN` allows users to combine parametrized quantum circuits with quantum mechanical observables. The circuits can be constructed using, for example, building blocks from Qiskit’s circuit library, and the QNN’s output is given by the expected value of the observable. The :class:`~qiskit_machine_learning.neural_networks.TwoLayerQNN` is a special case of the :class:`~qiskit_machine_learning.neural_networks.OpflowQNN` that takes as input a feature map and an ansatz. The :class:`~qiskit_machine_learning.neural_networks.CircuitQNN` directly takes the quantum circuit’s measurements as output without an observable. The output can be used either as a batch of samples, i.e., a list of bitstrings measured from the circuit’s qubits, or as a sparse vector of the resulting sampling probabilities for each bitstring. The former is of interest in learning distributions resulting from a given quantum circuit, while the latter finds application, e.g., in regression or classification. A post-processing step can be used to interpret a given bitstring in a particular context, e.g. translating it into a set of classes."
msgstr "Qiskit Machine Learningは、さまざまな量子ニューラルネットワークによって実装されるニューラルネットワークの汎用インターフェースを定義します。 :class:`~qiskit_machine_learning.neural_networks.OpflowQNN` 、:class:`~qiskit_machine_learning.neural_networks.TwoLayerQNN` 、 :class:`~qiskit_machine_learning.neural_networks.CircuitQNN` などの複数の実装がすぐに提供されます。 :class:`~qiskit_machine_learning.neural_networks.OpflowQNN` を使用すると、ユーザーはパラメーター化された量子回路を量子力学的観測量と組み合わせることができます。回路は、たとえば、Qiskitの回路ライブラリのビルディングブロックを使用して構築できます。QNNの出力は、観測量の期待値によって与えられます。 :class:`~qiskit_machine_learning.neural_networks.TwoLayerQNN` は、機能マップとansatzを入力として受け取る :class:`~qiskit_machine_learning.neural_networks.OpflowQNN` の特殊なケースです。 :class:`~qiskit_machine_learning.neural_networks.CircuitQNN` は、量子回路の測定値を、観測可能なものなしで出力として直接取得します。出力は、サンプルのバッチ、つまり回路の量子ビットから測定されたビット文字列のリストとして、または各ビット文字列の結果のサンプリング確率のスパース・ベクトルとして使用できます。前者は、与えられた量子回路から生じる分布の学習に関心がありますが、後者は、回帰や分類などの用途があります。後処理ステップを使用して、特定のコンテキストで特定のビット文字列を解釈できます。それを一連のクラスに変換します。"

#: ../../index.rst:41
msgid "The neural networks include the functionality to evaluate them for a given input as well as to compute the corresponding gradients, which is important for efficient training. To train and use neural networks, Qiskit Machine Learning provides a variety of learning algorithms such as the :class:`~qiskit_machine_learning.algorithms.NeuralNetworkClassifier` and :class:`~qiskit_machine_learning.algorithms.NeuralNetworkRegressor`. Both take a QNN as input and then use it in a classification or regression context. To allow an easy start, two convenience implementations are provided - the Variational Quantum Classifier (:class:`~qiskit_machine_learning.algorithms.VQC`) as well as the Variational Quantum Regressor (:class:`~qiskit_machine_learning.algorithms.VQR`). Both take just a feature map and an ansatz and construct the underlying QNN automatically."
msgstr "ニューラルネットワークには、特定の入力に対してそれらを評価する機能と、対応する勾配を計算する機能が含まれています。これは、効率的なトレーニングに重要です。 ニューラルネットワークをトレーニングして使用するために、Qiskit Machine Learningは、 :class:`~qiskit_machine_learning.algorithms.NeuralNetworkClassifier` や :class:`~qiskit_machine_learning.algorithms.NeuralNetworkRegressor` などのさまざまな学習アルゴリズムを提供します。 どちらもQNNを入力として受け取り、分類または回帰のコンテキストで使用します。 簡単に開始できるように、2つの便利な実装が提供されています。変分量子分類 (Variational Quantum Classifier、 :class:`~qiskit_machine_learning.algorithms.VQC`) と変分量子回帰 (Variational Quantum Regressor、 :class:`~qiskit_machine_learning.algorithms.VQR`) です。 どちらも特徴マップと ansatz を取り、基礎となるQNNを自動的に構築します。"

#: ../../index.rst:52
msgid "In addition to the models provided directly in Qiskit Machine Learning, it has the :class:`~qiskit_machine_learning.connectors.TorchConnector`, which allows users to integrate all of our quantum neural networks directly into the `PyTorch <https://pytorch.org>`__ open source machine learning library. Thanks to Qiskit’s gradient framework, this includes automatic differentiation - the overall gradients computed by `PyTorch <https://pytorch.org>`__ during the backpropagation take into account quantum neural networks, too. The flexible design also allows the building of connectors to other packages in the future."
msgstr "Qiskit Machine Learningで直接提供されるモデルに加えて、 :class:`~qiskit_machine_learning.connectors.TorchConnector` があり、ユーザーはすべての量子ニューラルネットワークをオープンソースの機械学習ライブラリ `PyTorch <https://pytorch.org>`__ に直接統合できます。Qiskitの勾配フレームワークのおかげで、これには自動微分が含まれます。誤差逆伝播中に `PyTorch <https://pytorch.org>`__ によって計算される全体的な勾配は、量子ニューラルネットワークも考慮に入れます。 柔軟な設計により、将来的に他のパッケージへのコネクタを構築することもできます。"

#: ../../index.rst:65
msgid "Next Steps"
msgstr "次のステップ"

#: ../../index.rst:67
msgid "`Getting started <getting_started.html>`_"
msgstr "`はじめに <getting_started.html>`_"

#: ../../index.rst:69
msgid "`Tutorials <tutorials/index.html>`_"
msgstr "`チュートリアル <tutorials/index.html>`_"

