msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-08-14 19:36\n"
"Last-Translator: \n"
"Language: ja\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /main/machine-learning/docs/locale/en/LC_MESSAGES/migration/01_migration_guide_0.5.po\n"
"X-Crowdin-File-ID: 9879\n"

#: ../../migration/01_migration_guide_0.5.ipynb:9
msgid "This page was generated from `docs/migration/01_migration_guide_0.5.ipynb`__."
msgstr "このページは `docs/migration/01_migration_guide_0.5.ipynb`__ から生成されました。"

#: ../../migration/01_migration_guide_0.5.ipynb:9
msgid "Qiskit Machine Learning v0.5 Migration Guide"
msgstr "Qiskit Machine Learning v0.5 移行ガイド"

#: ../../migration/01_migration_guide_0.5.ipynb:11
msgid "This tutorial will guide you through the process of migrating your code from Qiskit Machine Learning v0.4 to v0.5."
msgstr "このチュートリアルでは、コードを Qiskit Machine Learning v0.4 から v0.5 へマイグレーションするプロセスをガイドします。"

#: ../../migration/01_migration_guide_0.5.ipynb:14
msgid "Introduction"
msgstr "はじめに"

#: ../../migration/01_migration_guide_0.5.ipynb:16
msgid "The main focus of the 0.5 release of Qiskit Machine Learning is the migration of the base computational blocks like quantum kernels and quantum neural networks to the primitives introduced in Qiskit as well as extended support of the primitives in the algorithms."
msgstr "Qiskit Machine Learning のリリース0.5における主な焦点は、Qiskitで導入されたPrimitiveへの量子カーネルや量子ニューラルネットワークなどのベースの計算ブロックの移行と、アルゴリズムにおけるprimitiveの拡張サポートです。"

#: ../../migration/01_migration_guide_0.5.ipynb:18
msgid "Contents:"
msgstr "目次:"

#: ../../migration/01_migration_guide_0.5.ipynb:20
#: ../../migration/01_migration_guide_0.5.ipynb:26
msgid "Overview of the primitives"
msgstr "Primitiveの概要"

#: ../../migration/01_migration_guide_0.5.ipynb:21
#: ../../migration/01_migration_guide_0.5.ipynb:54
msgid "New quantum kernel"
msgstr "新量子カーネル"

#: ../../migration/01_migration_guide_0.5.ipynb:22
#: ../../migration/01_migration_guide_0.5.ipynb:428
msgid "New quantum neural networks"
msgstr "新量子ニューラル・ネットワーク"

#: ../../migration/01_migration_guide_0.5.ipynb:23
#: ../../migration/01_migration_guide_0.5.ipynb:1126
msgid "Other notable deprecation"
msgstr "その他の注意すべき非推奨事項"

#: ../../migration/01_migration_guide_0.5.ipynb:28
msgid "The core capability of quantum computers that sets them apart from from classical computers is their ability to generate non-classical probability distributions at their outputs. The native operations that one can do with a probability distribution is to sample from it or to estimate quantities on it. Consequently, these operations of sampling and estimating form the fundamental building blocks of quantum algorithm development. Thus, as it was `announced <https://research.ibm.com/blog/qiskit-runtime-for-useful-quantum-computing>`__, two basic primitives were introduced, Sampler and Estimator, respectively, that implement these two operations:"
msgstr "量子コンピューターが古典コンピューターと異なる点は、出力に非古典的な確率分布を生成することができる点です。確率分布の基本的な操作は、確率分布からのサンプリングと確率分布に基づく量の推定です。このサンプリングと推定という操作が、量子アルゴリズム開発の基本的な構成要素となっています。そのため、 `こちら <https://research.ibm.com/blog/qiskit-runtime-for-useful-quantum-computing>`_で発表したように，この2つの操作を実装したSamplerとEstimatorという基本プリミティブが導入されました。"

#: ../../migration/01_migration_guide_0.5.ipynb:31
msgid "Sampler class calculates probabilities or quasi-probabilities of bitstrings from quantum circuits. The base class is `qiskit.primitives.BaseSampler <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseSampler.html>`__."
msgstr "Samplerクラスは、量子回路のビット列の確率または準確率を計算します。基本クラスは `qiskit.primitives.BaseSampler <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseSampler.html>`__ です。"

#: ../../migration/01_migration_guide_0.5.ipynb:32
msgid "Estimator class estimates expectation values of quantum circuits and observables. The base class is `qiskit.primitives.BaseEstimator <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseEstimator.html>`__."
msgstr "Estimatorクラスは、量子回路や観測値の期待値を推定するクラスです。基本クラスは `qiskit.primitives.BaseEstimator <https://qiskit.org/documentation/stubs/qiskit.primitives.BaseEstimator.html>`__ です。"

#: ../../migration/01_migration_guide_0.5.ipynb:34
msgid "Qiskit Terra provides core interfaces and two implementations:"
msgstr "Qiskit Terraはコアインターフェースと2つの実装を提供します："

#: ../../migration/01_migration_guide_0.5.ipynb:36
msgid "The reference implementation that is statevector based. This implementation does require a backend or a simulator, it relies on the classes from the `quantum_info <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ package."
msgstr "状態ベクトルベースのリファレンス実装です。この実装はバックエンドやシミュレーターを必要とせず、 `quantum_info <https://qiskit.org/documentation/apidoc/quantum_info.html>`__ パッケージのクラスに依存しています。"

#: ../../migration/01_migration_guide_0.5.ipynb:37
msgid "The backend based primitives are to support provider/backends that do not support primitives directly. This implementation requires an instance of a backend to be passed to a primitive."
msgstr "バックエンドベースのprimitiveは、primitiveを直接サポートしないプロバイダー/バックエンドをサポートするためのものです。この実装では、primitiveに渡すバックエンドのインスタンスが必要です。"

#: ../../migration/01_migration_guide_0.5.ipynb:39
msgid "More information on the Qiskit Terra primitives can be found in the `documentation <https://qiskit.org/documentation/apidoc/primitives.html>`__."
msgstr "Qiskit Terra primitiveに関するより詳しい情報は `documentation <https://qiskit.org/documentation/apidoc/primitives.html>`__ に記載されています。"

#: ../../migration/01_migration_guide_0.5.ipynb:41
msgid "It is worth mentioning other implementations as well:"
msgstr "他の実装についても触れておくとよいでしょう:"

#: ../../migration/01_migration_guide_0.5.ipynb:43
msgid "Aer primitives should be used for Aer simulator. They extend corresponding interfaces from Terra and can be used in the same way as primitives from Terra. See `documentation <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ for more information."
msgstr "Aer primitiveは、Aerシミュレーターで使用されるものです。これらはTerraの対応するインターフェースを拡張したもので、Terraのprimitiveと同じように使用することができます。詳しくは `documentation <https://qiskit.org/documentation/apidoc/aer_primitives.html>`__ を参照してください。"

#: ../../migration/01_migration_guide_0.5.ipynb:44
msgid "The runtime primitives to be used with IBM devices. This is an implementation that is focused on cloud computing on actual hardware. See `here <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/apidocs/runtime_service.html>`__."
msgstr "IBMのデバイスで使用するためのRumtive primitiveです。実際のハードウェアでのクラウドコンピューティングに特化した実装です。`こちら __<https://qiskit.org/documentation/partners/qiskit_ibm_runtime/apidocs/runtime_service.html>``__を参照してください。"

#: ../../migration/01_migration_guide_0.5.ipynb:46
msgid "Along with the primitives Terra has some primitive-like algorithms that are highly useful in QML and used by the new 0.5 functions:"
msgstr "Terraはprimitiveとともに、QMLで非常に有用なprimitive的アルゴリズムを持っており、0.5の新機能で使用されています。"

#: ../../migration/01_migration_guide_0.5.ipynb:48
msgid "Algorithms to calculate the gradient of a quantum circuit. For each core primitive there's a corresponding base interface that defines quantum circuit gradient. The documentation on gradients is `here <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__."
msgstr "量子回路の勾配を計算するためのアルゴリズム。各コアprimitiveに対応する基本インターフェースがあり、量子回路の勾配を定義しています。勾配に関するドキュメントは `こちら <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.html>`__です。"

#: ../../migration/01_migration_guide_0.5.ipynb:49
msgid "Algorithms that compute the fidelity or \"closeness\" of pairs of quantum states. Currently, only one implementation is available that requires a sampler primitive and is based on the compute-uncompute method. The documentation is `here <https://qiskit.org/documentation/stubs/qiskit.algorithms.state_fidelities.html>`__."
msgstr "量子状態のペアの忠実度（近さ）を計算するアルゴリズム。現在、1つの実装のみが利用可能で、sampler primitiveを必要とし、compute-uncomputeメソッドに基づくものです。ドキュメントは `こちら <https://qiskit.org/documentation/stubs/qiskit.algorithms.state_fidelities.html>`__です。"

#: ../../migration/01_migration_guide_0.5.ipynb:51
msgid "Both two new algorithms are very similar to the core primitives, they share the same method signatures, so they may be called as high level primitives despite they are not in the primitives package."
msgstr "この2つのアルゴリズムは、コアprimitiveと非常によく似ており、同じメソッドシグネチャーを共有しているため、primitiveパッケージに含まれていないにもかかわらず、高レベルのprimitiveとして呼び出すことができます。"

#: ../../migration/01_migration_guide_0.5.ipynb:56
msgid "The previous implementation consisted of a single class `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__ that did everything:"
msgstr "以前の実装では、1つのクラス `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__ がすべてを担っていました。"

#: ../../migration/01_migration_guide_0.5.ipynb:58
msgid "Constructed circuits"
msgstr "回路の構築"

#: ../../migration/01_migration_guide_0.5.ipynb:59
msgid "Executed circuits and evaluated overlap between circuits"
msgstr "回路の実行と回路間の重なりの評価"

#: ../../migration/01_migration_guide_0.5.ipynb:60
msgid "Provided training parameters"
msgstr "学習用パラメーターを提供"

#: ../../migration/01_migration_guide_0.5.ipynb:61
msgid "Kept track of the values assigned to the parameters."
msgstr "パラメーターに割り当てられた値の追跡"

#: ../../migration/01_migration_guide_0.5.ipynb:63
msgid "The implementation became sophisticated and inflexible and adding support of the new primitives could be tricky. To address the issues, a new flexible and extendable design of quantum kernels was introduced. The goals of the new design are:"
msgstr "この実装は高度で柔軟性に欠け、新しいprimitiveのサポートを追加するのは困難でした。そこで、柔軟かつ拡張可能な新しい量子カーネルを開発しました。新しい設計の目標は以下の通りです。"

#: ../../migration/01_migration_guide_0.5.ipynb:65
msgid "Migrate to the primitives and leverage the fidelity algorithm. Now users may plug in their own implementations of fidelity calculations."
msgstr "Primitiveに移行し、Fidelity アルゴリズムを活用します。これにより、ユーザーは独自のFidelity 計算の実装をプラグインすることができます。"

#: ../../migration/01_migration_guide_0.5.ipynb:66
msgid "Extract trainability feature to a dedicated class."
msgstr "訓練可能な機能を専用のクラスに抽出する。"

#: ../../migration/01_migration_guide_0.5.ipynb:67
msgid "Introduce a base class that can be extended by other kernel implementations."
msgstr "他のカーネルが拡張可能な基本クラスを導入する。"

#: ../../migration/01_migration_guide_0.5.ipynb:69
msgid "The new design of quantum kernel is shown on the next diagram."
msgstr "量子カーネルの新しい設計を次の図に示します。"

#: ../../migration/01_migration_guide_0.5.ipynb:80
msgid "|new_qk.png|"
msgstr "|new_qk.png|"

#: ../../migration/01_migration_guide_0.5.ipynb:82
msgid "new_qk.png"
msgstr "new_qk.png"

#: ../../migration/01_migration_guide_0.5.ipynb:93
msgid "The new kernels expose the same interface and the same parameters except the ``quantum_instance`` parameter. This parameter does not have a direct replacement and instead the ``fidelity`` parameter must be used. The backend handling/selection, which was previously done using the ``quantum_instance``, is now taken care of via the Sampler primitive given to the ``fidelity``."
msgstr "新しいカーネルは、 ``quantum_instance`` パラメーターを除いて、同じインターフェースと同じパラメーターを公開しています。このパラメーターは直接的に置き換えることができず、代わりにfidelityパラメーターを使用しなければなりません。バックエンドの処理・選択は、以前は``quantum_instance``を使用していましたが、現在は ``fidelity`` に与えられたSampler primitiveを介して処理されます。"

#: ../../migration/01_migration_guide_0.5.ipynb:95
msgid "A new hierarchy shown on the diagram introduces:"
msgstr "図に示すような新しい階層が導入されます。"

#: ../../migration/01_migration_guide_0.5.ipynb:97
msgid "A base and abstract class `BaseKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.BaseKernel.html>`__ is introduced. All concrete implementation must inherit this class."
msgstr "ベースとなる抽象クラス `BaseKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.BaseKernel.html>`__ が導入されました。すべての具体的な実装は、このクラスを継承する必要があります。"

#: ../../migration/01_migration_guide_0.5.ipynb:98
msgid "A fidelity based quantum kernel `FidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.FidelityQuantumKernel.html>`__ is added. This is a direct **replacement** of the previous quantum kernel implementation. The difference is that the new class takes a fidelity instance to estimate overlaps and construct kernel matrix."
msgstr "Fidelity ベースの量子カーネル `FidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.FidelityQuantumKernel.html>`__ が追加されました。これは、以前の量子カーネル実装をそのまま置き換えたものです。新しいクラスは、オーバーラップを推定し、カーネル行列を構築するために、Fidelity(忠実度)のインスタンスを取るという違いがあります。"

#: ../../migration/01_migration_guide_0.5.ipynb:99
msgid "A new abstract class `TrainableKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableKernel.html>`__ is introduced to generalize ability to train quantum kernels."
msgstr "また、量子カーネルを学習するための抽象クラス `TrainableKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableKernel.html>`__ が追加されました．"

#: ../../migration/01_migration_guide_0.5.ipynb:100
msgid "A fidelity-based trainable quantum kernel `TrainableFidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableFidelityQuantumKernel.html>`__ is introduced. This is a **replacement** of the previous quantum kernel if a trainable kernel is required. The trainer `QuantumKernelTrainer <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.alogrithms.QuantumKernelTrainer.html>`__ now accepts both quantum kernel implementations, the new one and the previous one."
msgstr "Fidelity ベースの量子カーネル `TrainableFidelityQuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.TrainableFidelityQuantumKernel.html>`__ が導入されました．これは、従来の量子カーネルを **置き換える** もので、訓練可能なカーネルが必要な場合に使用します。トレーナである `QuantumKernelTrainer <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.alogrithms.QuantumKernelTrainer.html>`__ は，新型と旧型の両方の量子カーネルを受け入れることができるようになりました。"

#: ../../migration/01_migration_guide_0.5.ipynb:103
msgid "For convenience, the previous quantum kernel implementation, `QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__, now extends both new abstract classes and thus it is compatible with the new introduced interfaces. This implementation is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that. New, primitive-based quantum kernels should be used instead."
msgstr "以前の量子カーネル実装である`QuantumKernel <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.kernels.QuantumKernel.html>`__ は，新しい抽象クラスを継承しており，新しく導入されたインターフェースと互換性を持っています．この実装は 現在 **非推奨** であり，将来のリリースで非推奨となり，その後削除される予定です。新しいプリミティブベースの量子カーネルを使用する必要があります。"

#: ../../migration/01_migration_guide_0.5.ipynb:105
msgid "The existing algorithms such as `QSVC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVC.html>`__, `QSVR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVR.html>`__ and other kernel-based algorithms are updated and work with both implementations."
msgstr "`QSVC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVC.html>`__、`QSVR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QSVR.html>`__、その他のカーネルベースのアルゴリズムは更新され、両方の実装で動作するようになります。"

#: ../../migration/01_migration_guide_0.5.ipynb:107
msgid "For example a QSVM classifier can be trained as follows."
msgstr "例えば，QSVM分類器は以下のように学習させることができます。"

#: ../../migration/01_migration_guide_0.5.ipynb:119
msgid "Create a dataset"
msgstr "データセットの準備"

#: ../../migration/01_migration_guide_0.5.ipynb:130
msgid "Fixing randomization."
msgstr "ランダム性を固定します。"

#: ../../migration/01_migration_guide_0.5.ipynb:153
msgid "Generate a simple dataset using scikit-learn."
msgstr "Scikit-learn を使用して簡単なデータセットを生成します。"

#: ../../migration/01_migration_guide_0.5.ipynb:183
msgid "Previous implementation of quantum kernel"
msgstr "量子カーネルの以前の実装"

#: ../../migration/01_migration_guide_0.5.ipynb:194
msgid "In the previous implementation we start from creating an instance of ``QuantumInstance``. This class defines where our quantum circuits are executed. In this case we wrap a statevector simulator in the quantum instance."
msgstr "前回の実装では、 ``QuantumInstance`` のインスタンスを作成するところから始めました。このクラスは、量子回路が実行される場所を定義します。今回は、量子インスタンスに状態ベクトルシミュレーターをラップしています。"

#: ../../migration/01_migration_guide_0.5.ipynb:250
msgid "Then create a quantum kernel."
msgstr "その後、量子カーネルを作ります。"

#: ../../migration/01_migration_guide_0.5.ipynb:275
msgid "And finally we fit an SVM classifier."
msgstr "そして最終的にはSVM分類器に適合します。"

#: ../../migration/01_migration_guide_0.5.ipynb:326
msgid "New implementation of quantum kernel"
msgstr "新しい量子カーネル実装"

#: ../../migration/01_migration_guide_0.5.ipynb:328
msgid "In the new implementation we start from creating a Fidelity instance. Fidelity is optional and quantum kernel will create it automatically if none is passed. But here, we create it manually for illustrative purposes. To create a fidelity instance we pass a sampler. The sampler is the reference implementation and defines where our quantum circuits are executed. You may create a sampler instance from `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage Qiskit runtime services."
msgstr "新しい実装では、Fidelityのインスタンスを作成するところから始めます。Fidelityはオプションで、何も渡されない場合は量子カーネルが自動的に作成します。しかし、ここでは、説明のために手動で作成します。Fidelityのインスタンスを作成するために、Samplerを渡します。Samplerとは、量子回路を実行する際に参照する実装のことであり、量子回路が実行される場所を定義します。QiskitのRuntime serviceを活用するために、`QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>` からSampler インスタンスを作成することができます。"

#: ../../migration/01_migration_guide_0.5.ipynb:353
msgid "Next, we create a new quantum kernel with the fidelity instance."
msgstr "次に、fidelify (忠実度) インスタンスで新しい量子カーネルを作成します。"

#: ../../migration/01_migration_guide_0.5.ipynb:377
msgid "Then we fit an SVM classifier the same way as before."
msgstr "そして、前と同じようにSVM分類器を当てはめます。"

#: ../../migration/01_migration_guide_0.5.ipynb:430
msgid "Changes in the quantum neural networks are not as dramatic as in quantum kernels. In addition, and as a replacement to the existing neural networks, two new networks are introduced. The new networks introduced are `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ and `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ which are detailed below and are replacements for the pre-existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ and `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ which are now pending deprecated."
msgstr "量子ニューラルネットワークの変更は、量子カーネルほど劇的なものではありません。また、既存のニューラルネットワークを置き換えるものとして、2つの新しいネットワークが導入されています。 `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ と `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ で、既存の `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ 、 `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ 、 `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ を置き換えるもので、詳細は以下の通りです。"

#: ../../migration/01_migration_guide_0.5.ipynb:434
msgid "SamplerQNN"
msgstr "SamplerQNN"

#: ../../migration/01_migration_guide_0.5.ipynb:436
msgid "A new `Sampler Quantum Neural Network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ leverages the sampler primitive, sampler gradients and is a **direct replacement** of `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr "新しい `Sampler Quantum Neural Network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ は、sampler primitive、sampler Gradientsを活用し、 `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ を **直接置き換える** ものです。"

#: ../../migration/01_migration_guide_0.5.ipynb:438
msgid "The new `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ exposes a similar interface to the existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, with a few differences. One is the ``quantum_instance`` parameter. This parameter does not have a direct replacement, and instead the ``sampler`` parameter must be used. The ``gradient`` parameter keeps the same name as in the `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ implementation, but it no longer accepts Opflow gradient classes as inputs; instead, this parameter expects an (optionally custom) primitive gradient. The ``sampling`` option has been removed for the time being, as this information is not currently exposed by the sampler, and might correspond to future lower-level primitives."
msgstr "新しい `SamplerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.SamplerQNN.html>`__ は既存の `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ と同様のインターフェイスを公開しますが、いくつかの違いがあります。1つは ``quantum_instance`` パラメーターです。このパラメーターは直接の置き換えがなく、代わりに ``sampler`` パラメーターを使用する必要があります。 ``gradient`` パラメーターは `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ の実装と同じ名前を保っていますが、入力としてOpflow gradientクラスを受け付けなくなりました。代わりに、このパラメーターは（オプションでカスタム）primitive gradientを期待します。 ``sampling`` option は、現在samplerが公開していない情報であり、将来の低レベルprimitiveに対応する可能性があるため、当面の間、削除されました。"

#: ../../migration/01_migration_guide_0.5.ipynb:441
msgid "The existing training algorithms such as `VQC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQC.html>`__ that were based on `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__, are updated to accept both implementations. The implementation of `NeuralNetworkClassifier <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.html>`__ has not changed."
msgstr "`CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ をベースとした `VQC <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQC.html>`__ のような既存の学習アルゴリズムは、両方の実装を受け入れるように更新されました。 `NeuralNetworkClassifier <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkClassifier.html>`__ の実装は変更されていません。"

#: ../../migration/01_migration_guide_0.5.ipynb:444
msgid "The existing `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that."
msgstr "既存の `CircuitQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__ は、現在 **保留中の非推奨** となっており、将来のリリースで非推奨となり、その後削除される予定です。"

#: ../../migration/01_migration_guide_0.5.ipynb:446
msgid "We'll show how to train a variational quantum classifier using both networks. For this purposes we re-use the dataset generated for the quantum kernel. For both quantum neural networks we still have to construct a feature map, an ansatz and combine them into a single quantum circuit."
msgstr "ここでは、両ネットワークを用いた変分量子分類器の学習方法を紹介します。この目的のために、量子カーネルのために生成されたデータセットを再利用します。両者の量子ニューラルネットワークでは、特徴量マップ、ansatzを構築し、それらを1つの量子回路に結合する必要があります。"

#: ../../migration/01_migration_guide_0.5.ipynb:476
msgid "We need an interpret function as well. We define our usual parity function that maps bitstrings either to :math:`0` or :math:`1`."
msgstr "同様に、解釈関数も必要です。ここでは、ビット列を:math:`0` または :math:`1` にマップする、通常のパリティ関数を定義します。"

#: ../../migration/01_migration_guide_0.5.ipynb:498
#: ../../migration/01_migration_guide_0.5.ipynb:860
msgid "We fix the initial point to get the same results from both networks."
msgstr "両方のネットワークから同じ結果が得られるように、初期点を固定します。"

#: ../../migration/01_migration_guide_0.5.ipynb:520
msgid "Building a classifier using ``CircuitQNN``"
msgstr "``CircuitQNN`` を用いた分類器の構築"

#: ../../migration/01_migration_guide_0.5.ipynb:522
msgid "We create a ``CircuitQNN`` instance and re-use the quantum instance created for the quantum kernel."
msgstr "``CircuitQNN`` のインスタンスを作成し、量子カーネル用に作成した量子インスタンスを再利用します。"

#: ../../migration/01_migration_guide_0.5.ipynb:552
msgid "Construct a classifier out of the network, train it and score it. We are not aiming for good results, so the number of iterations is set to a small number to reduce overall execution time."
msgstr "ネットワークから分類器を構築し、それを訓練し、スコアをつけます。良い結果を目指しているわけではないので、全体の実行時間を短縮するために、反復回数は少なめに設定されています。"

#: ../../migration/01_migration_guide_0.5.ipynb:639
msgid "Building a classifier using ``SamplerQNN``"
msgstr "``SamplerQNN`` を用いた分類器の構築"

#: ../../migration/01_migration_guide_0.5.ipynb:641
msgid "Instead of ``QuantumInstance`` create an instance of the reference ``Sampler``."
msgstr "``QuantumInstance`` の代わりに参照元 ``Sampler`` のインスタンスを作成します。"

#: ../../migration/01_migration_guide_0.5.ipynb:664
msgid "Now, we create a instance of ``SamplerQNN``. The difference with ``CircuitQNN`` is that we pass a sampler instead of a quantum instance."
msgstr "ここで、 ``SamplerQNN`` のインスタンスを作成します。 ``CircuitQNN`` との違いは、量子インスタンスではなく、samplerを渡すことです。"

#: ../../migration/01_migration_guide_0.5.ipynb:694
msgid "Construct a classifier and fit it as usual. As ``neural_network`` we pass a created ``SamplerQNN`` and this is the only difference."
msgstr "通常通り分類器を構築し、フィットさせます。 ``neural_network`` として、作成した ``SamplerQNN`` を渡していますが、これだけの違いです。"

#: ../../migration/01_migration_guide_0.5.ipynb:777
msgid "Instead of constructing a quantum neural network manually, you may train ``VQC``. It takes either a quantum instance or a sampler, depending on what is passed it automatically constructs either ``CircuitQNN`` or ``SamplerQNN`` respectively."
msgstr "量子ニューラルネットワークを手動で構築する代わりに、 ``VQC`` をトレーニングすることができます。 ``VQC`` は、量子インスタンスとsamplerを受け取り、渡された内容に応じて、``CircuitQNN`` と ``SamplerQNN`` をそれぞれ自動的に構築します。"

#: ../../migration/01_migration_guide_0.5.ipynb:789
msgid "EstimatorQNN"
msgstr "EstimatorQNN"

#: ../../migration/01_migration_guide_0.5.ipynb:791
msgid "A new `Estimator quantum neural network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ leverages the estimator primitive, estimator gradients and is a **direct replacement** of `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__."
msgstr "新しい `Estimator quantum neural network <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ は、Estimator primitive、Estimator gradientsを活用し、 `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ を **直接置き換える ** ものです。"

#: ../../migration/01_migration_guide_0.5.ipynb:793
msgid "The new `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ exposes a similar interface to the existing `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__, with a few differences. One is the ``quantum_instance`` parameter. This parameter does not have a direct replacement, and instead the ``estimator`` parameter must be used. The ``gradient`` parameter keeps the same name as in the `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ implementation, but it no longer accepts Opflow gradient classes as inputs; instead, this parameter expects an (optionally custom) primitive gradient."
msgstr "新しい `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ は、既存の `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ と同様のインターフェースを公開しますが、いくつかの相違点があります。1つは ``quantum_instance`` パラメーターです。このパラメーターには直接的な代替がなく、代わりに ``estimator`` パラメーターを使用する必要があります。 ``gradient`` パラメーターは `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ の実装と同じ名前を持ちますが、入力としてOpflow gradientクラスを受け付けなくなりました。代わりに、このパラメーターは（オプションでカスタム）primitive gradientを期待するものです。"

#: ../../migration/01_migration_guide_0.5.ipynb:796
msgid "The existing training algorithms such as `VQR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQR.html>`__ that were based on the `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__, are updated to accept both implementations. The implementation of `NeuralNetworkRegressor <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.html>`__ has not changed."
msgstr "`VQR <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.VQR.html>`__ のような `TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ に基づく既存の学習アルゴリズムは、両方の実装を受け入れるように更新されます。 `NeuralNetworkRegressor <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NeuralNetworkRegressor.html>`__ の実装は変更されていません。"

#: ../../migration/01_migration_guide_0.5.ipynb:799
msgid "The existing `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ is now **pending deprecation**, will be deprecated in a future release and subsequently removed after that."
msgstr "既存の `OpflowQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.OpflowQNN.html>`__ は、現在 **保留中の非推奨** となっており、将来のリリースで非推奨となり、その後削除される予定です。"

#: ../../migration/01_migration_guide_0.5.ipynb:801
msgid "We'll show how to train a variational quantum regressor using both networks. We start from generating a simple regression dataset."
msgstr "両方のネットワークを用いた変分量子回帰の学習方法を紹介します。まず、単純な回帰データセットを生成するところから始めます。"

#: ../../migration/01_migration_guide_0.5.ipynb:828
msgid "We still have to construct a feature map, an ansatz and combine them into a single quantum circuit for both quantum neural networks."
msgstr "まだ、量子ニューラルネットワークともに、特徴量マップ、ansatzを構築し、それらを組み合わせて一つの量子回路にする必要があります。"

#: ../../migration/01_migration_guide_0.5.ipynb:882
msgid "Building a regressor using ``OpflowQNN``"
msgstr "``OpflowQNN`` を用いた回帰器の構築"

#: ../../migration/01_migration_guide_0.5.ipynb:884
msgid "We create an ``OpflowQNN`` instance and re-use the quantum instance created for the quantum kernel."
msgstr "``OpflowQNN`` のインスタンスを作成し、量子カーネル用に作成した量子インスタンスを再利用します。"

#: ../../migration/01_migration_guide_0.5.ipynb:950
msgid "Construct a regressor out of the network, train it and score it. In this case we use a gradient based optimizer, thus the network makes use of the gradient framework and due to nature of the dataset converges very quickly."
msgstr "ネットワークから回帰器を構築し、それを訓練し、スコアをつけます。この場合、勾配ベースのオプティマイザーを使用するため、ネットワークは勾配の枠組みを利用し、データセットの性質上、非常に早く収束します。"

#: ../../migration/01_migration_guide_0.5.ipynb:1006
msgid "Building a regressor using ``EstimatorQNN``"
msgstr "``EstimatorQNN`` を用いた回帰器の構築"

#: ../../migration/01_migration_guide_0.5.ipynb:1008
msgid "Create an instance of the reference Estimator. You may create an estimator instance from `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage Qiskit runtime services."
msgstr "リファレンスであるEstimatorのインスタンスを作成します。Qiskitのruntimeサービスを活用するため、`QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__からEstimatorのインスタンスを作成することもできます。"

#: ../../migration/01_migration_guide_0.5.ipynb:1031
msgid "Now, we create a instance of ``EstimatorQNN``. The network creates an observable as :math:`Z^{\\otimes n}`, where :math:`n` is the number of qubit, if it is not specified."
msgstr "ここで、``EstimatorQNN`` のインスタンスを作成する。このネットワークは :math:`Z^{\\otimes n}` という観測量をします。ここで :math:`n` は量子ビットの数です。"

#: ../../migration/01_migration_guide_0.5.ipynb:1059
msgid "Construct a variational quantum regressor and fit it. In this case we use a gradient based optimizer, thus the network makes use of the `default estimator gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.ParamShiftEstimatorGradient.html>`__ that is created automatically."
msgstr "変量量子回帰器を構築し、それをフィッティングします。この場合、勾配ベースのオプティマイザーを使用するため、ネットワークは自動的に作成される `default estimator gradient <https://qiskit.org/documentation/stubs/qiskit.algorithms.gradients.ParamShiftEstimatorGradient.html>`__ を使用します。"

#: ../../migration/01_migration_guide_0.5.ipynb:1114
msgid "Instead of constructing a quantum neural network manually, you may train ``VQR``. It takes either a quantum instance or an estimator, depending on what is passed it automatically constructs either ``TwoLayerQNN`` or ``EstimatorQNN`` respectively."
msgstr "量子ニューラルネットワークを手動で構築する代わりに、 ``VQR`` をトレーニングすることができます。 ``VQR`` は、量子インスタンスとestimatorを受け取り、渡された内容に応じて、 ``TwoLayerQNN`` と ``EstimatorQNN`` をそれぞれ自動的に構築します。"

#: ../../migration/01_migration_guide_0.5.ipynb:1128
msgid "A few other components, not mentioned explicitly above, are also deprecated or pending deprecation:"
msgstr "上記で明確に言及されていない他のいくつかのコンポーネントも、非推奨または非推奨保留となっています："

#: ../../migration/01_migration_guide_0.5.ipynb:1130
msgid "`TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ is pending deprecation. Users should use `EstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ instead."
msgstr "`TwoLayerQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.TwoLayerQNN.html>`__ は非推奨です。ユーザーは代わりにEstimatorQNN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.EstimatorQNN.html>`__ を使うべきです。"

#: ../../migration/01_migration_guide_0.5.ipynb:1131
msgid "The Distribution Learners package is deprecated fully. This package contains such classes as `DiscriminativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.html>`__, `GenerativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.html>`__, `NumPyDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.html>`__, `PyTorchDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.html>`__, `QuantumGenerator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QuantumGenerator.html>`__, `QGAN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QGAN.html>`__. Instead, please refer to the `new QGAN tutorial <../tutorials/04_torch_qgan.ipynb>`__. This tutorial introduces step-by-step how to build a PyTorch-based QGAN using quantum neural networks."
msgstr "Distribution Learners パッケージは完全に非推奨です．このパッケージは `DiscriminativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.DiscriminativeNetwork.html>`__, `GenerativeNetwork <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.GenerativeNetwork.html>`__, `NumPyDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.NumPyDiscriminator.html>`__, `PyTorchDiscriminator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.PyTorchDiscriminator.html>`__, `QuantumGenerator <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QuantumGenerator.html>`__, `QGAN <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.algorithms.QGAN.html>`__ などのクラスが含まれています。代わりに、`新しいQGANチュートリアル <../tutorials/04_torch_qgan.ipynb>`__を参照してください。このチュートリアルでは、量子ニューラルネットワークを用いたPyTorchベースのQGANの構築方法をステップバイステップで紹介しています。"

#: ../../migration/01_migration_guide_0.5.ipynb:1134
msgid "The Runtime package is deprecated. This package contains a client to Qiskit Programs that embed Qiskit Runtime in the algorithmic interfaces and facilitate usage of algorithms and scripts in the cloud. You should use `QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ to leverage primitives and runtimes."
msgstr "Runtimeパッケージは非推奨です。このパッケージには、アルゴリズムインターフェイスにQiskit Runtimeを組み込み、クラウドでのアルゴリズムやスクリプトの使用を容易にするQiskit Programsへのクライアントが含まれています。Primitiveやruntimeを活用するには、`QiskitRuntimeService <https://qiskit.org/documentation/partners/qiskit_ibm_runtime/stubs/qiskit_ibm_runtime.QiskitRuntimeService.html>`__ を使用する必要があります。"

