msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-29 14:17+0000\n"
"PO-Revision-Date: 2021-07-06 06:29\n"
"Last-Translator: \n"
"Language-Team: Japanese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ja\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials.po\n"
"X-Crowdin-File-ID: 9528\n"
"Language: ja_JP\n"

#: ../../tutorials/01_neural_networks.ipynb:13
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
#: ../../tutorials/03_quantum_kernel.ipynb:13
#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:13
#: ../../tutorials/05_torch_connector.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Jupyter ノートブックでインタラクティブに実行します。"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "量子ニューラル・ネットワーク"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "このノートブックでは、 Qiskit 機械学習で提供される、さまざまな汎用的な量子ニューラル・ネットワーク (QNN) の実装を紹介します。 このネットワークは、アプリケーションに依存しない計算ユニットとして、様々なユースケースに使用することができます。アプリケーションによっては、特定のタイプのネットワークが適していたり、適していなかったり、特定の方法でセットアップする必要があったりします。ここでは、次のような種類のニューラルネットワークについて、詳しく説明します。"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: ニューラル・ネットワークのインターフェース。"

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OflowQNN``: 量子力学的観測量の評価に基づくネットワーク。"

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: 利便性のための特別な ``OpflowQNN`` の実装。"

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: 量子回路を測定することによって得られたサンプルに基づいたネットワーク。"

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr " ``NeuralNetwork`` は、Qiskit MachineLearningで利用可能なすべてのニューラルネットワークのインターフェースを表します。データサンプルとトレーニング可能な重みを入力として取得する順伝播パスと逆伝搬パスを公開します。  ``NeuralNetwork`` にはトレーニング機能は含まれていません。これらは、実際のアルゴリズム/アプリケーションにプッシュされます。したがって、  ``NeuralNetwork`` は、トレーニング可能な重みの値も格納しません。以下では、このインターフェースのさまざまな実装を紹介します。"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "``nn`` という ``NeuralNetwork``  を想定します。次に、 ``nn.forward(input, weights)``  パスは、データのフラット入力と、サイズ　``nn.num_inputs`` および ``nn.num_weights`` の重みをそれぞれ受け取ります。 ``NeuralNetwork`` は入力のバッチ処理をサポートし、対応する形状の出力のバッチを返します。"

#: ../../tutorials/01_neural_networks.ipynb:80
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN`` "

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` は、Qiskitから（パラメーター化された）演算子を取得し、Qiskitのgradientフレームワークを利用して逆伝搬パスを提供します。このような演算子は、たとえば、パラメーター化された量子状態に関する量子力学における観測量の期待値です。パラメーターを使用して、古典的なデータをロードしたり、トレーニング可能な重みを表すことができます。``OpflowQNN`` を使用すると、演算子のリストとより複雑な構造を使用して、より複雑なQNNを構築することもできます。"

#: ../../tutorials/01_neural_networks.ipynb:321
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "``ListOp`` で複数の観測量（オブザーバブル）を組み合わせることで、より複雑なQNNを作ることもできます。"

#: ../../tutorials/01_neural_networks.ipynb:412
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:414
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` は、:math:`n` 量子ビット上の特別な ``OpflowQNN`` で、第一にデータを挿入する特徴マップ、第二に学習されるアンサツから構成されています。デフォルトの観測値は :math:`Z^{\\otimes n}` 、すなわちパリティです。"

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` は、（パラメータ化された） ``QuantumCircuit`` をベースにしています。これは、入力だけでなくウェイトパラメーターも取ることができ、測定からサンプルを生成します。サンプルは、ビット列に対応する整数インデックスを測定する確率として解釈することも、バイナリー出力のバッチとして直接解釈することもできます。確率の場合、勾配を効率的に推定することができ、 ``CircuitQNN`` は逆伝搬パスも提供します。サンプルの場合、微分は不可能であり、逆伝搬パスは ``(None, None)`` を返します。"

#: ../../tutorials/01_neural_networks.ipynb:617
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are agregated accordingly."
msgstr "さらに、 ``CircuitQNN`` では、サンプルを後処理するための ``interpret`` 関数を指定することができます。これは、（ビット列から）測定された整数を受け取り、それを新しいインデックス、すなわち非負の整数にマッピングすることが期待されます。この場合、出力の形を提供する必要があり、それに応じて確率が調整されます。"

#: ../../tutorials/01_neural_networks.ipynb:619
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr " ``CircuitQNN`` は、密な確率ベクトルだけでなく、疎な確率ベクトルを返すように設定できます。 ``interpret`` 関数を使用しない場合、確率ベクトルの次元は量子ビット数に応じて指数関数的に増加するため、通常は疎なものを推奨します。 ``interpret`` 関数を使用する場合は、期待される結果に依存します。例えば、インデックスが対応するビット列のパリティにマッピングされる場合、つまり0または1にマッピングされる場合、密な出力が意味を持ち、結果は長さ2の確率ベクトルになります。"

#: ../../tutorials/01_neural_networks.ipynb:662
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 出力: 疎な整数の確率"

#: ../../tutorials/01_neural_networks.ipynb:761
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 出力: 密なパリティ確率"

#: ../../tutorials/01_neural_networks.ipynb:869
msgid "4.3 Output: Samples"
msgstr "4.3 出力: サンプル"

#: ../../tutorials/01_neural_networks.ipynb:985
msgid "4.4 Output: Parity Samples"
msgstr "4.4 出力: パリティー・サンプル"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "ニューラル・ネットワーク分類器と回帰器"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "このチュートリアルでは、``NeuralNetworkClassifier`` と ``NeuralNetworkRegressor`` がどのように使用されるかを示します。どちらも入力として (量子) ``NeuralNetwork`` を受け取り、特定のコンテキストでそれを活用します。どちらの場合も、利便性のためにあらかじめ設定されたバリエーション、変分量子分類器 (Variational Quantum Classifier, ``VQC``) と変分量子回帰器 (Variational Quantum Regressor, ``VQR``) を提供しています。チュートリアルの構成は以下の通りです。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`分類 <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:249
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:398
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "変分量子分類器 (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`回帰 <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:539
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` による回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "変分量子回帰器 (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:70
#: ../../tutorials/03_quantum_kernel.ipynb:53
#: ../../tutorials/05_torch_connector.ipynb:69
msgid "Classification"
msgstr "分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "以下のアルゴリズムを説明するために、簡単な分類データセットを用意します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:117
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` による分類"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "まず、 ``OpflowQNN`` が ``NeuralNetworkClassifier`` の中でどのように分類に使われるかを示します。ここでは、 ``OpflowQNN`` は、 :math:`[-1, +1]` の1次元の出力を返すことが期待されています。 これは、二値分類にしか使えないので、2つのクラスを :math:`\\{-1, +1\\}` に割り当てます。ここでは、便宜上、特徴マップとansatzを用いて定義された ``OpflowQNN`` の特別なタイプである ``TwoLayerQNN`` を使用します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:251
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "次に、 ``CircuitQNN`` が ``NeuralNetworkClassifier`` の中でどのように分類に使われるかを示します。ここでは、 ``CircuitQNN`` は、 :math:`d` -次元の確率ベクトルを出力として返すことが期待されます。ここで :math:`d` はクラス数です。``QuantumCircuit`` からのサンプリングは、自動的に確率分布になりますので、測定されたビット列から異なるクラスへのマッピングを定義するだけです。バイナリー分類には，パリティー・マッピングを使います。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:400
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` は、 ``CircuitQNN`` を用いた ``NeuralNetworkClassifier`` の特別なバリエーションです。これは、パリティー・マッピング（または複数のクラスへの拡張）を適用して、ビット列から分類にマッピングし、その結果、確率ベクトルが得られ、ワンショットでエンコードされた結果として解釈されます。デフォルトでは、 ``CrossEntropyLoss`` 関数を適用します。この関数は、ワンショットでエンコードされたフォーマットで与えられたラベルを想定しており、そのフォーマットでも予測値を返します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:496
#: ../../tutorials/05_torch_connector.ipynb:524
msgid "Regression"
msgstr "回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:498
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "以下のアルゴリズムを説明するために、簡単な回帰データセットを用意します。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:541
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "ここでは、 :math:`[-1, +1]` の値を返す ``OpflowQNN`` を使った回帰に限定します。もっと複雑で多次元のモデルを ``CircuitQNN`` をベースにして構築することもできますが、このチュートリアルの範囲を超えています。"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:648
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "変分量子回帰器 (``VQR``) による回帰"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:650
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "``VQR`` は、分類用の ``VQC`` と同様に、 ``OpflowQNN`` を用いた ``NeuralNetworkRegressor`` の特別な改良版です。デフォルトでは、予測値と目標値の間の平均二乗誤差を最小化するために、 ``L2Loss`` 関数を考慮します。"

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr "量子カーネル法機械学習"

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid "The general task of machine learning is to find and study patterns in data. For many datasets, the datapoints are better understood in a higher dimensional feature space, through the use of a kernel function: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, \\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from :math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b \\rangle` denotes the dot product. When considering finite data, a kernel function can be represented as a matrix: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."
msgstr "機械学習の一般的タスクはデータからパターンを発見したり学習することです。多くのデータセットに対し、データポイントはカーネル関数: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` を用いて高次元特徴空間で理解することができます。ここで、:math:`k` はカーネル関数、:math:`\\vec{x}_i, \\vec{x}_j`  は n 次元のインプット、:math:`f` は :math:`n`-次元空間から :math:`m`-次元空間への写像、:math:`\\langle a,b \\rangle` は内積を表します。有限のデータに対して、カーネル関数は行列 :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)` で表現することができます。"

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid "In quantum kernel machine learning, a quantum feature map :math:`\\phi(\\vec{x})` is used to map a classical feature vector :math:`\\vec{x}` to a quantum Hilbert space, :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ for more details."
msgstr "量子カーネル法機械学習において、量子特徴マップ :math:`\\phi(\\vec{x})` は古典特徴ベクトル :math:`\\vec{x}` を :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}` なる量子ヒルベルト空間 :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|` にマップする際に使用されます。詳細は `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ を参照してください。"

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid "In this notebook, we use ``qiskit`` to calculate a kernel matrix using a quantum feature map, then use this kernel matrix in ``scikit-learn`` classification and clustering algorithms."
msgstr "このノートブックでは、量子特徴マップを使ってカーネル行列を計算するために ``qiskit`` を使用し、 ``scikit-learn`` の分類とクラスタリングアルゴリズムでこのカーネル行列を使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid "For our classification example, we will use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr "分類の例では、`Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ で説明されている *アドホック・データセット* と ``scikit-learn`` の `サポートベクターマシン <https://scikit-learn.org/stable/modules/svm.html>`__ (svc) 分類アルゴリズムを使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:111
msgid "With our training and testing datasets ready, we set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the ``BasicAer`` ``qasm_simulator`` using 1024 shots."
msgstr "学習用とテスト用のデータセットの準備ができたら、`ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ を使用してカーネル行列を計算するための ``QuantumKernel`` クラスを設定します。そして ``BasicAer`` ``qasm_simulator`` で 1024 回のショットを実行します。"

#: ../../tutorials/03_quantum_kernel.ipynb:138
msgid "The ``scikit-learn`` ``svc`` algorithm allows us to define a `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. We can do either of these using the ``QuantumKernel`` class in ``qiskit``."
msgstr "``scikit-learn`` の ``svc`` アルゴリズムでは、`custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ を次の2つの方法で定義することができます: 呼び出し可能な関数としてカーネルを提供するか、カーネル行列を予測することです。 ``qiskit`` の ``QuantumKernel`` クラスを使用して、どちらかを行うことができます。"

#: ../../tutorials/03_quantum_kernel.ipynb:140
msgid "The following code gives the kernel as a callable function:"
msgstr "次のコードは、カーネルを呼び出し可能な関数として提供します。"

#: ../../tutorials/03_quantum_kernel.ipynb:184
msgid "The following code precomputes and plots the training and testing kernel matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr "以下のコードは、``scikit-learn`` ``svc`` アルゴリズムにそれらを提供する前に、カーネル行列の学習とテストを事前計算してプロットします。"

#: ../../tutorials/03_quantum_kernel.ipynb:250
msgid "``qiskit`` also contains the ``qsvc`` class that extends the ``sklearn svc`` class, that can be used as follows:"
msgstr "``qiskit`` には、``sklearn svc`` クラスを拡張した ``qsvc`` クラスも含まれており、次のように使用できます。"

#: ../../tutorials/03_quantum_kernel.ipynb:295
msgid "Clustering"
msgstr "クラスタリング"

#: ../../tutorials/03_quantum_kernel.ipynb:297
msgid "For our clustering example, we will again use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` ``spectral`` clustering algorithm."
msgstr "クラスタリングの例では、`Supervised learning, with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ で説明されている *アドホック・データセット* と ``scikit-learn`` の ``spectral`` クラスタリング・アルゴリズムを再度使用します。"

#: ../../tutorials/03_quantum_kernel.ipynb:299
msgid "We will regenerate the dataset with a larger gap between the two classes, and as clustering is an unsupervised machine learning task, we don’t need a test sample."
msgstr "2 つのクラス間に大きなギャップがあるデータ・セットを再生成します。クラスタリングは教師なし機械学習タスクであるため、テスト・サンプルは必要ありません。"

#: ../../tutorials/03_quantum_kernel.ipynb:350
msgid "We again set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the BasicAer ``qasm_simulator`` using 1024 shots."
msgstr "再度、 `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ を使用してカーネル行列を計算するために ``QuantumKernel`` クラスを設定し、BasicAerの ``qasm_simulator`` を1024ショットに設定します。"

#: ../../tutorials/03_quantum_kernel.ipynb:377
msgid "The scikit-learn spectral clustering algorithm allows us to define a [custom kernel] in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. Using the QuantumKernel class in qiskit, we can only use the latter."
msgstr "scikit-learnのスペクトラル・クラスタリング・アルゴリズムでは、[カスタム・カーネル] を2つの方法で定義することができます。つまり、カーネルを呼び出し可能な関数として提供するか、カーネル行列を予測することです。 QiskitのQuantumKernelクラスを使用する場合、後者のみを使用できます。"

#: ../../tutorials/03_quantum_kernel.ipynb:379
msgid "The following code precomputes and plots the kernel matrices before providing it to the scikit-learn spectral clustering algorithm, and scoring the labels using normalized mutual information, since we apriori know the class labels."
msgstr "クラス・ラベルを前もって知っているので、以下のコードは、scikit-learnのスペクトラル・クラスタリング・アルゴリズムに投入し正規化相互情報量でラベルをスコアリングする前に、カーネル行列を事前計算してプロットします。"

#: ../../tutorials/03_quantum_kernel.ipynb:439
msgid "``scikit-learn`` has other algorithms that can use a precomputed kernel matrix, here are a few:"
msgstr "``scikit-learn`` には、事前計算されたカーネル行列を使用できる次のような他のアルゴリズムがあります:"

#: ../../tutorials/03_quantum_kernel.ipynb:441
msgid "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:442
msgid "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:443
msgid "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:444
msgid "`Guassian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:445
msgid "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:9
msgid "qGANs for Loading Random Distributions"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:11
msgid "Given :math:`k`-dimensional data samples, we employ a quantum Generative Adversarial Network (qGAN) to learn the data’s underlying random distribution and to load it directly into a quantum state:"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:13
msgid "\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1} \\sqrt{p_{\\theta}^{j}}\\big| j \\rangle\n\n"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:15
msgid "where :math:`p_{\\theta}^{j}` describe the occurrence probabilities of the basis states :math:`\\big| j\\rangle`."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:17
msgid "The aim of the qGAN training is to generate a state :math:`\\big| g_{\\theta}\\rangle` where :math:`p_{\\theta}^{j}`, for :math:`j\\in \\left\\{0, \\ldots, {2^n-1} \\right\\}`, describe a probability distribution that is close to the distribution underlying the training data :math:`X=\\left\\{x^0, \\ldots, x^{k-1} \\right\\}`."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:19
msgid "For further details please refer to `Quantum Generative Adversarial Networks for Learning and Loading Random Distributions <https://arxiv.org/abs/1904.00043>`__ *Zoufal, Lucchi, Woerner* [2019]."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:21
msgid "For an example of how to use a trained qGAN in an application, the pricing of financial derivatives, please see the `Option Pricing with qGANs <https://github.com/Qiskit/qiskit-finance/tree/main/docs/tutorials/10_qgan_option_pricing.ipynb>`__ tutorial."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:56
msgid "Load the Training Data"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:58
msgid "First, we need to load the :math:`k`-dimensional training data samples (here k=1)."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:60
msgid "Next, the data resolution is set, i.e. the min/max data values and the number of qubits used to represent each data dimension."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:95
msgid "Initialize the qGAN"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:97
msgid "The qGAN consists of a quantum generator :math:`G_{\\theta}`, i.e., an ansatz, and a classical discriminator :math:`D_{\\phi}`, a neural network."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:99
msgid "To implement the quantum generator, we choose a depth-\\ :math:`1` ansatz that implements :math:`R_Y` rotations and :math:`CZ` gates which takes a uniform distribution as an input state. Notably, for :math:`k>1` the generator’s parameters must be chosen carefully. For example, the circuit depth should be :math:`>1` because higher circuit depths enable the representation of more complex structures."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:101
msgid "The classical discriminator used here is based on a neural network implementation using NumPy. There is also a discriminator based on PyTorch which is not installed by default when installing Qiskit - see `Optional Install <https://github.com/Qiskit/qiskit-machine-learning#optional-installs>`__ for more information."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:103
msgid "Here, both networks are updated with the ADAM optimization algorithm (ADAM is qGAN optimizer default)."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:164
msgid "Run the qGAN Training"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:166
msgid "During the training the discriminator’s and the generator’s parameters are updated alternately w.r.t the following loss functions:"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:168
msgid "L_G\\left(\\phi, \\theta\\right) = -\\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log\\left(D_{\\phi}\\left(g^{l}\\right)\\right)\\right]\n\n"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:170
msgid "and"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:172
msgid "L_D\\left(\\phi, \\theta\\right) =\n"
"  \\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log D_{\\phi}\\left(x^{l}\\right) + \\log\\left(1-D_{\\phi}\\left(g^{l}\\right)\\right)\\right],"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:177
msgid "with :math:`m` denoting the batch size and :math:`g^l` describing the data samples generated by the quantum generator."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:179
msgid "Please note that the training, for the purpose of this notebook, has been kept briefer by the selection of a known initial point (``init_params``). Without such prior knowledge be aware training may take some while."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:245
msgid "Training Progress & Outcome"
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:247
msgid "Now, we plot the evolution of the generator’s and the discriminator’s loss functions during the training, as well as the progress in the relative entropy between the trained and the target distribution."
msgstr ""

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:249
msgid "Finally, we also compare the cumulative distribution function (CDF) of the trained distribution to the CDF of the target distribution."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial shows how the ``TorchConnector`` allows to use any ``NeuralNetwork`` from Qiskit Machine Learning and integrate it in a PyTorch workflow. The ``TorchConnector`` takes any ``NeuralNetwork`` and makes it available as a PyTorch ``Module``."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:14
msgid "Content:"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:16
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__ - Classification - Classification with PyTorch and the ``OpflowQNN`` - Classification with PyTorch and the ``CircuitQNN`` - Regression - Regression with PyTorch and the ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:18
msgid "`Part 2: MNIST Classification <#Part-2:-MNIST-Classification>`__"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:20
msgid "Illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow to classify MNIST data."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:57
msgid "Part 1: Simple Classification & Regression"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:71
msgid "First, we show how the ``TorchConnector`` can be used to use a Quantum ``NeuralNetwork`` to solve a classification tasks. Therefore, we generate a simple random data set."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:117
msgid "Classification with PyTorch and the ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:119
msgid "Linking an ``OpflowQNN`` to PyTorch is relatively straight-forward. Here we illustrate this using the ``TwoLayerQNN``."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:330
msgid "The red circles indicate wrongly classified data points."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:342
msgid "Classification with PyTorch and the ``CircuitQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:344
msgid "Linking an ``CircuitQNN`` to PyTorch requires the correct setup, otherwise backpropagation is not possible."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:526
msgid "We use a model based on the ``TwoLayerQNN`` to also illustrate an regression task."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:758
msgid "Part 2: MNIST Classification"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:760
msgid "Also see Qiskit Textbook: https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html"
msgstr ""

#: ../../tutorials/index.rst:3
msgid "Machine Learning Tutorials"
msgstr ""

