msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-22 17:47+0000\n"
"PO-Revision-Date: 2021-08-05 11:49\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: ru_RU\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Страница создана на основе `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Классификатор нейросети и регрессор"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "В этом разделе мы покажем, как используются ``NeuralNetworkClassifier'' и ``NeuralNetworkRegressor''. Оба принимают на вход (квантовую) ``NeuralNetwork`` и используют ее в определенном контексте. В обоих случаях мы также предоставляем предварительно настроенные варианты для удобства, Вариационный Квантовый Классификатор (``VQC``) и Вариационный Квантовый Регрессор (``VQR``). Руководство построено следующим образом:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Классификация <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Классификация с помощью \" OpflowQNN ` `"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:249
msgid "Classification with a ``CircuitQNN``"
msgstr "Классификация с помощью \" CircuitQNN ` `"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:398
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Вариационный квантовый классификатор (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "` Регрессия <#Regression> ` __"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:539
msgid "Regression with an ``OpflowQNN``"
msgstr "Регрессия с ` ` OpflowQNN ` `"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Вариационный Квантовый Регрессор (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:70
msgid "Classification"
msgstr "Классификация"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Мы создаем простой набор данных для классификации, чтобы проиллюстрировать следующие алгоритмы."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:117
msgid "Classification with the an ``OpflowQNN``"
msgstr "Классификация с помощью ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Сначала мы покажем, как ``OpflowQNN`` можно использовать для классификации в рамках ``NeuralNetworkClassifier``. В этом случае ожидается, что ``OpflowQNN`` вернет одномерный результат в :math:`[-1, +1]``. Это работает только для бинарной классификации, и мы присваиваем два класса :math:`\\{-1, +1\\}`. Для удобства мы используем ``TwoLayerQNN``, который является специальным типом ``OpflowQNN``, определенным через карту признаков и анзац."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:251
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Далее мы покажем, как ``CircuitQNN`` можно использовать для классификации в ``NeuralNetworkClassifier``. В этом случае ожидается, что ``CircuitQNN`` возвращает :math:`d`-размерный вектор вероятности в качестве вывода, где :math:`d` обозначает число классов. Выборка из ``QuantumCircuit`` автоматически приводит к распределению вероятностей, и нам просто нужно определить соответствие между измеренными битами и разными классами. Для двоичной классификации используется преобра отображение по четности."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:400
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` - это специальный вариант ``NeuralNetworkClassifier`` с ``CircuitQNN``. Он использует отображение по четности (или расширения для нескольких классов) для отображения от битовой строки к классификации, в результате чего получается вектор вероятностей, который интерпретируется как результат, закодированный унитарным кодом. По умолчанию применяется функция ``CrossEntropyLoss``, которая ожидает метки в формате унитарного кода и возвращает предсказания в этом формате."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:496
msgid "Regression"
msgstr "Регрессия"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:498
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Мы создаем простой регрессионный набор данных для иллюстрации следующих алгоритмов."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:541
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Здесь мы ограничимся регрессией с ``OpflowQNN``, которая возвращает значения в :math:`[-1, +1]``. Можно построить более сложные и многомерные модели, также основанные на ``CircuitQNN``, но это выходит за рамки данного руководства."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:648
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Регрессия с помощью Вариационной Квантовой Регрессии (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:650
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "По аналогии с ``VQC`` для классификации, ``VQR`` - это специальный вариант ``NeuralNetworkRegressor`` с ``OpflowQNN``. По умолчанию он рассматривает функцию ``L2Loss`` для минимизации средней квадратичной ошибки между предсказаниями и целями."

