msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 18:01+0000\n"
"PO-Revision-Date: 2022-06-29 18:31\n"
"Last-Translator: \n"
"Language-Team: Russian\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ru\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/06_torch_runtime.po\n"
"X-Crowdin-File-ID: 9719\n"
"Language: ru_RU\n"

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/06_torch_runtime.ipynb`__."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "Torch Runtime"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:11
msgid "In this tutorial, we introduce Torch Runtime, and show how to use it via the ``TorchRuntimeClient`` class in Qiskit Machine Learning. Torch Runtime leverages Qiskit Runtime for hybrid quantum-classical machine learning based on a PyTorch ``Module``. It allows training models or predicting the outputs with trained models significantly faster. We show how to use Torch Runtime with two simple examples for regression and classification tasks in the following."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:23
msgid "1. Regression"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:25
msgid "First, we show how to use Torch Runtime via ``TorchRuntimeClient`` using the simple regression example. In the example, we will perform a regression task on a randomly generated dataset following a sine wave."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:99
msgid "``TorchRuntimeClient`` requires a PyTorch ``DataLoader`` as an input for training/predicting. For that purpose, we create a custom torch dataset class."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:146
msgid "Create an instance of ``TorchConnector`` to wrap a QNN model and be able to use pytorch to train the model, then set up an optimizer and a loss function as usual."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:234
msgid "Load a provider and specify a backend for the runtime service."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:261
msgid "Create a Torch Runtime Client instance with the model, the optimizer, and other configurations."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:290
#: ../../tutorials/06_torch_runtime.ipynb:875
msgid "Call ``fit()`` to train the model"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:292
msgid "Call the ``fit`` method in ``TorchRuntimeClient`` with the data loader to train the model."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:313
msgid "You can access training result information by querying properties of the ``fit_result`` variable, that is an instance of the ``TorchRuntimeResult`` class. Also, modelâ€™s parameters in ``TorchRuntimeClient`` are updated with trained ones."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:366
msgid "You can also query the ``train_history`` property, which is a list of dictionaries, each per epoch. In a dictionary you can find properties like: - ``epoch``, epoch index - ``loss``, loss value at this epoch - ``forward_time``, time spent in the forward pass, in seconds - ``backward_time``, time spent in the backward pass, in seconds - ``epoch_time``, epoch time, in seconds.\""
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:378
msgid "Training with validation"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:380
msgid "Torch Runtime can also perform validation while training a model by passing a validation data loader to the ``fit`` method."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:471
msgid "You can query the ``val_history`` property, which is a list of dictionaries for the validation processes, each per epoch. In a dictionary you can find the same properties as ``train_history``."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:483
#: ../../tutorials/06_torch_runtime.ipynb:946
msgid "Call ``predict()`` to perform prediction"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:485
msgid "Call the ``predict`` method in ``TorchRuntimeClient`` with the data loader to perform prediction on the passed data using the trained model."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:573
msgid "A red line, blue dots, and a green line on the plot show the original function, the training data, and a function constructed out of the predicted values, respectively."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:585
#: ../../tutorials/06_torch_runtime.ipynb:1053
msgid "Call ``score()`` to calculate a score"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:587
msgid "Call the ``score`` method in ``TorchRuntimeClient`` with the data loader to calculate a score, for the trained model. You should pass either ``\"regression\\\"`` or ``\"classification\"`` to the ``score_func`` argument to use one of the pre-defined scores functions. Also, you can pass a custom scoring function defined as:"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:593
msgid "where: - ``model_output`` are the values predicted by the model, - ``target`` ground truth values."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:595
msgid "Note that the result of the ``score`` call also contains predicted values that were calculated in the process of scoring the model."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:659
msgid "2. Classification"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:661
msgid "Second, we show how to perform a simple classification task using Torch Runtime. In the example, we will perform binary classification on a randomly generated dataset."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:934
msgid "You can also query the ``train_history`` and the ``val_history`` properties."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1041
msgid "The red circles indicate wrongly classified data points."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1064
msgid "In the example, we use the following custom scoring function to calculate a score. The scoring function returns 1, if the trained model successfully classified the input. Otherwise, it returns 0. An overall average is calculated in ``score()`` in the end."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1144
msgid "3. How to use hooks in training"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1146
msgid "Qiskit Machine Learning offers a base hook class, ``HookBase``. It is a base class for a hook that is a set of callback functions used in the training process. Users can implement their own hook classes from this base class to handle complicated callback processes. This structure provides high flexibility in the callback processes. Each hook can implement 6 methods, and each method is called before/after the corresponding processes during training. The way they are called is demonstrated in the following snippet:"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1163
msgid "In the hook methods, users can access ``TorchTrainer`` via ``self.trainer`` to access more context properties(e.g., model, current iteration, or config). The following snippet describes available properties that might be useful for a hook."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1165
msgid "TorchTrainer has:"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1167
msgid "``model``: A model to be trained."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1168
msgid "``optimizer``: An optimizer used for the training."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1169
msgid "``loss_func``: A loss function for the training."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1170
msgid "``train_loader``: A PyTorch data loader object containing a training dataset."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1171
msgid "``val_loader``: A PyTorch data loader object containing a validation dataset."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1172
msgid "``max_epoch``: The maximum number of training epochs."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1173
msgid "``log_period``: A logging period for a train history and a validation history. By default, there will be logs every epoch (``log_period``\\ =1)."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1174
msgid "``start_epoch``: An initial epoch for warm-start training. By default, 0."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1175
msgid "``epoch``: The current number of epochs."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1176
msgid "``global_step``: The current number of steps."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1177
msgid "``train_logger``: A logger for a training history. Use ``train_logger.metrics`` to access a list of logs. A log for each epoch is stored as a dictionary similar to ``TorchRuntimeResult.train_history``"
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1178
msgid "``val_logger``: A logger for a validation history. Logs are stored in the same way as train_logger."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1180
msgid "Users can pass a single hook instance or a list of hook instances to ``hooks`` argument."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1191
msgid "The following example is a hook for early stopping. If the current loss is smaller than the threshold after an epoch, the training will be terminated."
msgstr ""

#: ../../tutorials/06_torch_runtime.ipynb:1305
msgid "As we can see, training was interrupted after the first epoch despite we set the number of epochs to 5 in the ``TorchRuntimeClient`` configuration."
msgstr ""

