msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-08-11 22:31\n"
"Last-Translator: \n"
"Language-Team: Turkish\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: tr\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: tr_TR\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr "Bu sayfa, `docs/tutorials/01_neural_networks.ipynb`__ sayfasından oluşturulmuştur."

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "Kuantum Sinir Ağları"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "Bu not defteri, Qiskit Makine Öğrenmesi içinde sağlanan farklı kuantum sinirsel ağ (QNN) uygulamalarını gösterir. Ağlar, birçok farklı senaryo için kullanılabilen uygulama-agnostik hesaplama birimleri olarak ifade edilir. Uygulamaya bağlı olarak, belirli bir ağ tipi belirli bir şekilde kurulmak için daha çok ya da daha az uygun olabilir ve belirli bir şekilde ayarlanması gerekebilir. Aşağıdaki farklı kullanılabilir sinirsel ağlar artık daha ayrıntılı olarak ele alınacak:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: Sinirsel ağlar için arayüz."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: Kuantum mekaniksel gözlemlenebilirlerin değerlendirilmesine dayalı bir ağ."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: Uygunluk için özel bir ``OpflowQNN`` uygulaması."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: Bir kuantum devresinin ölçülmesinden kaynaklanan örneklere dayalı bir ağ."

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "``NeuralNetwork`` Qiskit makine öğrenimindeki bütün sinir ağları için olan arayüzü temsil eder. Veri örneklerini ve öğretilebilir yükleri alarak ileri ve geri geçişe maruz bırakır. Bir ``NeuralNetwork`` herhangi bir eğitim yeteneği içermez, bunlar gerçek algoritmalara / uygulamalara bırakılmıştır. Böylelikle bir ``NeuralNetwork`` eğitilebilir yükler için değerleri de depo etmez. Aşağıda, bu arayüzün farklı yerine getirmeleri gösterilmiştir."

#: ../../tutorials/01_neural_networks.ipynb:70
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "Bir ``NeuralNetwork`` ün ``nn`` diye adlandırıldığını varsayalım. Sonra, ``nn.forward(input, weights)`` geçişi hem veri hem de ``nn.num_inputs`` ve ``nn.num_weights`` ın ağırlıklarının boyutu için sırasıyla düz girişler alır. ``NeuralNetwork`` girdi toplulaştırmayı destekler ve karşılık gelen şeklin çıktı grubunu verir."

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:84
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` Qiskit'ten (parametreli) bir operatör alır ve geriye doğru geçişi sağlamak için Qiskit'in gradyan çerçevesinden yararlanır. Böyle bir operatör örneğin parametreli bir kuantum durumuna göre gözlemlenebilir bir kuantum mekaniğinin beklenen değeri olabilir. Parametreler, klasik verileri yüklemek ve eğitilebilir ağırlıkları temsil etmek için kullanılabilir.``OpflowQNN``ayrıca daha karmaşık QNN'ler oluşturmak için operatör listelerine ve daha karmaşık yapılara izin verir."

#: ../../tutorials/01_neural_networks.ipynb:356
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "Çoklu gözlemlenebiliri bir ``ListOp`` içinde birleştirmek, daha karmaşık QNN'ler oluşturmaya da olanak tanır"

#: ../../tutorials/01_neural_networks.ipynb:457
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:459
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` önce veri eklemek için bir öznitelik haritasından ve ikinci olarak eğitilmiş bir ansatzdan oluşan :math:`n` kübitler üzerinde özel bir ``OpflowQNN``dir. Varsayılan gözlemlenebilir :math:`Z^{\\otimes n}`, yani, paritedir."

#: ../../tutorials/01_neural_networks.ipynb:673
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:675
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` (parametreli olan) bir ``QuantumCircuit``i temel alır. Bu, ağırlık parametrelerinin yanı sıra girdi alabilir ve ölçümden örnekler üretebilmektedir. Örnekler, bir bit dizisine karşılık gelen tamsayı indeksini ölçme olasılıkları olarak veya doğrudan bir ikili çıktı partisi olarak yorumlanabilir. Olasılıklar durumunda, gradyanlar verimli bir şekilde tahmin edilebilir ve ``CircuitQNN`` geriye doğru bir geçiş de sağlar. Örnekler söz konusu olduğunda, farklılaşma mümkün değildir ve geriye doğru geçiş ``(None, None)`` değerini döndürür."

#: ../../tutorials/01_neural_networks.ipynb:678
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:680
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "Bir ``CircuitQNN`` yoğun olasılık vektörlerinin yanı sıra seyrek şekilde de döndürecek şekilde yapılandırılabilir. Herhangi bir ``interpret`` fonksiyonu kullanılmazsa, olasılık vektörünün boyutu, kübit sayısıyla üstel olarak ölçeklenir ve genellikle seyrek bir öneri önerilir. Bir ``interpret`` fonksiyonu olması durumunda, beklenen sonuca bağlıdır. Örneğin, bir indeks karşılık gelen bit dizgisinin paritesine, yani 0 veya 1'e eşlenirse, yoğun bir çıktı anlamlıdır ve sonuç, uzunluk 2 olan bir olasılık vektörü olacaktır."

#: ../../tutorials/01_neural_networks.ipynb:723
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 Çıktı: seyrek tamsayı olasılıkları"

#: ../../tutorials/01_neural_networks.ipynb:830
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 Çıktı: yoğun eşlik olasılıkları"

#: ../../tutorials/01_neural_networks.ipynb:953
msgid "4.3 Output: Samples"
msgstr "4.3 Çıktı: Örnekler"

#: ../../tutorials/01_neural_networks.ipynb:1087
msgid "4.4 Output: Parity Samples"
msgstr "4.4 Çıktı: Eşlik Örnekleri"

