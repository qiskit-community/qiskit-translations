msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-12 22:21+0000\n"
"PO-Revision-Date: 2021-07-12 23:08\n"
"Last-Translator: \n"
"Language-Team: Malayalam\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ml-IN\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials.po\n"
"X-Crowdin-File-ID: 9528\n"
"Language: ml_IN\n"

#: ../../tutorials/01_neural_networks.ipynb:13
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
#: ../../tutorials/03_quantum_kernel.ipynb:13
#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:13
#: ../../tutorials/05_torch_connector.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "ജൂപ്പിറ്റർ നോട്ട്ബുക്കിൽ പാരസ്‌പര്യത്മകമായി പ്രവർത്തിപ്പിക്കുക."

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "ക്വാണ്ടം ന്യൂറൽ നെറ്റ്‌വർക്കുകൾ"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "ഈ നോട്ട്ബുക്ക് ക്വിസ്കിറ്റ് മെഷീൻ ലേണിംഗിൽ നൽകിയിട്ടുള്ള വ്യത്യസ്ത ജനറിക് ക്വാണ്ടം ന്യൂറൽ നെറ്റ്‌വർക്ക് (QNN) നടപ്പാക്കലുകൾ കാണിക്കുന്നു. വ്യത്യസ്‌ത ഉപയോഗ കേസുകൾ‌ക്ക് ഉപയോഗിക്കാൻ‌ കഴിയുന്ന ആപ്ലിക്കേഷൻ‌-അജ്ഞ്ഞേയ കംപ്യൂട്ടേഷണൽ‌ യൂണിറ്റുകളാണ് നെറ്റ്‌വർ‌ക്കുകൾ‌. ആപ്ലിക്കേഷനെ ആശ്രയിച്ച്, ഒരു പ്രത്യേക തരം നെറ്റ്‌വർക്ക് കൂടുതലോ കുറവോ അനുയോജ്യമായേക്കാം, ഇവയെ ഒരു പ്രത്യേക രീതിയിൽ സജ്ജീകരിക്കേണ്ടതുണ്ട്. ലഭ്യമായ വ്യത്യസ്ത ന്യൂറൽ നെറ്റ്‌വർക്കുകൾ ഇപ്പോൾ കൂടുതൽ വിശദമായി ചർച്ചചെയ്യും:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: ന്യൂറൽ നെറ്റ്‌വർക്കുകൾക്കായുള്ള ഇന്റർഫേസ്."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: ക്വാണ്ടം മെക്കാനിക്കൽ നിരീക്ഷണങ്ങളുടെ വിലയിരുത്തലിനെ അടിസ്ഥാനമാക്കിയുള്ള ഒരു നെറ്റ്‌വർക്ക്."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: സൗകര്യാർത്ഥം ഒരു പ്രത്യേക `` OpflowQNN`` നടപ്പാക്കൽ."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: ഒരു ക്വാണ്ടം സർക്യൂട്ട് അളക്കുന്നതിന്റെ ഫലമായ സാമ്പിളുകളെ അടിസ്ഥാനമാക്കിയുള്ള ഒരു നെറ്റ്‌വർക്ക്."

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "1. ``NeuralNetwork``"
msgstr "1.``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "ക്വിസ്കിറ്റ് മെഷീൻ ലേണിംഗിൽ ലഭ്യമായ എല്ലാ ന്യൂറൽ നെറ്റ്‌വർക്കുകൾക്കുമായുള്ള ഇന്റർഫേസിനെ ``NeuralNetwork`` പ്രതിനിധീകരിക്കുന്നു. ഡാറ്റാ സാമ്പിളുകളും ട്രെയിനബിൾ വെയ്റ്റുകളും ഇൻപുട്ടായി എടുക്കുന്ന ഒരു ഫോർവേഡ്, ബാക്ക്വേർഡ് പാസ് ഇത് തുറന്നുകാട്ടുന്നു. ഒരു ``NeuralNetwork``യിൽ പരിശീലന ശേഷികളൊന്നും അടങ്ങിയിട്ടില്ല, ഇവയെ യഥാർത്ഥ അൽഗോരിതം / ആപ്ലിക്കേഷനുകളിലേക്ക് തള്ളപ്പെടുന്നു. അതിനാൽ, ``NeuralNetwork``ഒരുപരിശീലനയോഗ്യമായ വെയ്റ്റിംൻ്റെ മൂല്യങ്ങളൊന്നും സംഭരിക്കുന്നില്ല. ഇനിപ്പറയുന്നവയിൽ, ഈ ഇന്റർഫേസുകളുടെ വ്യത്യസ്ത നടപ്പാക്കലുകൾ അവതരിപ്പിക്കുന്നു."

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "`` Nn`` എന്ന് വിളിക്കുന്ന ഒരു ``NeuralNetwork`` കരുതുക. തുടർന്ന്, ``nn.forward(input, weights)`` പാസ് യഥാക്രമം `` nn.num_inputs``, `` nn.num_weights`` എന്നിവയുടെ വലുപ്പത്തിനും ഡാറ്റയ്‌ക്കുമുള്ള ഫ്ലാറ്റ് ഇൻ‌പുട്ടുകൾ‌ എടുക്കുന്നു. ``NeuralNetwork`` ഇൻപുട്ടുകൾ ബാച്ച് ചെയ്യുന്നതിനെ പിന്തുണയ്ക്കുകയും അനുബന്ധ ആകൃതിയുടെ(shape) ഔട്ട്‌പുട്ടിന്റെ ബാച്ചുകൾ നൽകുകയും ചെയ്യുന്നു."

#: ../../tutorials/01_neural_networks.ipynb:80
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` ക്വിസ്കിറ്റിൽ‌ നിന്നും ഒരു (പാരാമീറ്ററൈസ്ഡ്) ഓപ്പറേറ്ററെടുക്കുകയും ബാക്ക്‌വേർ‌ഡ് പാസ് നൽ‌കുന്നതിന് ക്വിസ്കിറ്റിന്റെ ഗ്രേഡിയൻറ് ഫ്രെയിംവർ‌ക്കിനെ പരമാവധി ഉപയോഗപെടുത്തുന്നു. അത്തരമൊരു ഓപ്പറേറ്ററിന് ഒരു പാരാമീറ്ററൈസ്ഡ് ക്വാണ്ടം അവസ്ഥയുമായി(Quantum State) ബന്ധപ്പെട്ട് നിരീക്ഷിക്കാവുന്ന ഒരു ക്വാണ്ടം മെക്കാനിക്കലിന്റെ പ്രതീക്ഷിത മൂല്യമാകാം. ക്ലാസിക്കൽ ഡാറ്റ ലോഡുചെയ്യുന്നതിനും പരിശീലിപ്പിക്കാവുന്ന ഭാരം പ്രതിനിധീകരിക്കുന്നതിനും പാരാമീറ്ററുകൾ ഉപയോഗിക്കാം. കൂടുതൽ‌ സങ്കീർ‌ണ്ണമായ QNN കൾ‌ നിർമ്മിക്കുന്നതിന് ഓപ്പറേറ്റർ‌മാരുടെ പട്ടികകളും കൂടുതൽ‌ സങ്കീർ‌ണ്ണ ഘടനകളും `` OpflowQNN`` അനുവദിക്കുന്നു."

#: ../../tutorials/01_neural_networks.ipynb:321
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "``ListOp``ൽ ഒന്നിലധികം നിരീക്ഷണങ്ങൾ സംയോജിപ്പിക്കുന്നത് കൂടുതൽ സങ്കീർണ്ണമായ QNN- കൾ സൃഷ്ടിക്കാൻ അനുവദിക്കുന്നു"

#: ../../tutorials/01_neural_networks.ipynb:412
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:414
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` എന്നത് ഒരു പ്രത്യേക ``OpflowQNN`` എന്നതിലെ :math:`n` ക്യൂബിറ്റുകൾ, അതിൽ ആദ്യം ഡാറ്റ ഉൾപ്പെടുത്തുന്നതിനുള്ള സവിശേഷത മാപ്പും രണ്ടാമത് പരിശീലനം ലഭിച്ച ഒരു അൻസാറ്റ്സും(ansatz) അടങ്ങിയിരിക്കുന്നു. സ്ഥിരസ്ഥിതിയായി നിരീക്ഷിക്കാനാകുന്നത് :math:`Z^{\\otimes n}`, അതായത്, പാരിറ്റി."

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` ഒരു (പാരാമീറ്ററൈസ്ഡ്) `` QuantumCircuit`` അടിസ്ഥാനമാക്കിയുള്ളതാണ്. ഇത് ഇൻപുട്ടുകളും വെയിറ്റ് പാരാമീറ്ററുകളും എടുക്കുകയും ഇവയുടെ അളവുകളിൽ നിന്ന് സാമ്പിളുകൾ നിർമ്മിക്കുകയും ചെയ്യും. സാമ്പിളുകളെ ഒരു ബിറ്റ്സ്ട്രിംഗിന് സമാനമായ സംഖ്യ സൂചിക അളക്കുന്നതിനുള്ള സാധ്യതകളായി അല്ലെങ്കിൽ നേരിട്ട് ഒരു ബൈനറി ഔട്ട്പുട്ടായിട്ടും വ്യാഖ്യാനിക്കാം. സാധ്യതകളുടെ കാര്യത്തിൽ, ഗ്രേഡിയന്റുകളെ കാര്യക്ഷമമായി കണക്കാക്കാം, കൂടാതെ ``CircuitQNN`` ഒരു പിന്നാക്ക പാസും നൽകുന്നു. സാമ്പിളുകളുടെ കാര്യത്തിൽ, ഡിഫ്രൻസിയേശൻ(differentiation) സാധ്യമല്ല, പിന്നോക്ക പാസ്ന ``(None, None)`` നൽകുന്നു."

#: ../../tutorials/01_neural_networks.ipynb:617
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:619
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "സ്പാർസും ഡെൻസ് പ്രോബബിലിറ്റി വെക്ടറുകളിലേക്കും മടങ്ങുന്നതിന് ഒരു ``CircuitQNN``ന് ക്രമീകരിക്കാൻ‌ കഴിയും. ``interpret``ൻ്റെ ഫംഗ്ഷനൊന്നും ഉപയോഗിക്കുന്നില്ലെങ്കിൽ, പ്രോബബിലിറ്റി വെക്റ്ററിന്റെ അളവ് ക്യൂബിറ്റുകളുടെ എണ്ണത്തിനനുസരിച്ച് എക്‌സ്‌പോണൻസലായി വർധിക്കുന്നു, അങ്ങനെ ഒരു സ്പാർസ് റെക്കമൻ്റേഷൻ സാധാരണയായി ശുപാർശ ചെയ്യുന്നു.ഒരു ``interpret`` ഫംഗ്ഷന്റെ കാര്യത്തിൽ അത് പ്രതീക്ഷിച്ച ഫലത്തെ ആശ്രയിച്ചിരിക്കുന്നു. ഉദാഹരണത്തിന്, ഒരു സൂചിക അനുബന്ധ ബിറ്റ്സ്ട്രിംഗിന്റെ തുല്യതയിലേക്ക് മാപ്പുചയ്തിട്ടുണ്ടെങ്കിൽ, അതായത്, 0 അല്ലെങ്കിൽ 1 ലേക്ക്, ഡെൻസ് ഔട്ട്‌പുട്ട് അർത്ഥമാക്കുന്നു, ഫലം 2 ദൈർഘ്യമുള്ള പ്രോബബിലിറ്റി വെക്ടറായിരുക്കും."

#: ../../tutorials/01_neural_networks.ipynb:662
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1 ഔട്ട്‌പുട്ട്: സ്പാർസ് സംഖ്യാ പ്രോബബിലിറ്റികൾ"

#: ../../tutorials/01_neural_networks.ipynb:761
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2 ഔട്ട്‌പുട്ട്: ഡെൻസ് പാരിറ്റി പ്രോബബിലിറ്റികൾ"

#: ../../tutorials/01_neural_networks.ipynb:869
msgid "4.3 Output: Samples"
msgstr "4.3 ഔട്ട്‌പുട്ട്: സാമ്പിളുകൾ"

#: ../../tutorials/01_neural_networks.ipynb:985
msgid "4.4 Output: Parity Samples"
msgstr "4.4 ഔട്ട്‌പുട്ട്: പാരിറ്റി സാമ്പിളുകൾ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "ന്യൂറൽ നെറ്റ്‌വർക്ക് ക്ലാസിഫയർ & റിഗ്രസ്സർ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "ഈ ട്യൂട്ടോറിയലിൽ ``NeuralNetworkClassifier``, ``NeuralNetworkRegressor``എന്നിവ എങ്ങനെ ഉപയോഗിക്കുന്നുവെന്ന് ഞങ്ങൾ കാണിക്കുന്നു. രണ്ടും ഇൻപുട്ടായി ഒരു (ക്വാണ്ടം) ``NeuralNetwork`` എടുത്ത് ഒരു പ്രത്യേക സന്ദർഭത്തിൽ അത് പ്രയോജനപ്പെടുത്തുന്നു. രണ്ട് സാഹചര്യങ്ങളിലും ഞങ്ങൾ സൗകര്യത്തിനായി മുൻകൂട്ടി ക്രമീകരിച്ച വേരിയൻ്റുകൾ, വേരിയേഷൻൽ ക്വാണ്ടം ക്ലാസിഫയർ (`` VQC``), വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രെസർ (`` VQR``) എന്നിവ നൽകുന്നു. ട്യൂട്ടോറിയൽ ഇനിപ്പറയുന്ന രീതിയിൽ ക്രമീകരിച്ചിരിക്കുന്നു:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classification <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:249
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:398
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം ക്ലാസിഫയർ(``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:539
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള റിഗ്രഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രസ്സർ(``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:70
#: ../../tutorials/03_quantum_kernel.ipynb:53
msgid "Classification"
msgstr "ക്ലാസ്സിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:72
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "ഇനിപ്പറയുന്ന അൽ‌ഗോരിതം വിശദീകരിക്കുന്നതിന് ഞമ്മൾ ഒരു ലളിതമായ ക്ലാസ്സിഫിക്കേഷൻ ഡാറ്റാസെറ്റ് തയ്യാറാക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:117
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസ്സിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:119
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "ഒരു ``NeuralNetworkClassifier`` ``OpflowQNN``എങ്ങനെ ക്ലാസ്സിഫിക്കേഷനിനായി ഉപയോഗിക്കാമെന്ന് ആദ്യം ഞങ്ങൾ കാണിക്കുന്നു. ഈ സന്ദർഭത്തിൽ, ``OpflowQNN`` :math:`[-1, +1]` എന്ന രൂപത്തിൽ ഒരു-ഡൈമൻഷണൽ ഔട്ട്‌പുട്ട് നൽകുമെന്ന് പ്രതീക്ഷിക്കുന്നു. ഇത് ബൈനറി വർഗ്ഗീകരണത്തിന് മാത്രമേ പ്രവർത്തിക്കൂ, \n"
"അതിനാൽ ഞമ്മൾ രണ്ട് ക്ലാസുകൾ ഇവയിലേക്ക് നിയോഗിക്കുന്നു :math:`\\{-1, +1\\}`. സൗകര്യത്തിനായി, ഞമ്മൾ ഒരു സവിശേഷത മാപ്പിലൂടെയും അൻസാറ്റ്സിലൂടെയും നിർവചിച്ചിരിക്കുന്ന ഒരു പ്രത്യേക തരം ``OpflowQNN`` ആയ ``TwoLayerQNN`` ഉപയോഗിക്കുന്നത്."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:251
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "അടുത്തതായി ഒരു ``NeuralNetworkClassifier`` ``CircuitQNN`` എങ്ങനെ ക്ലാസ്സിഫിക്കേഷനിനായി ഉപയോഗിക്കാമെന്ന് ഞങ്ങൾ കാണിക്കുന്നു. ഈ സന്ദർഭത്തിൽ, ``CircuitQNN`` :math:`d`-ഡൈമൻഷണൽ പ്രോബബിലിറ്റി വെക്റ്റർ ഔട്ട്‌പുട്ടായി നൽകുമെന്ന് പ്രതീക്ഷിക്കുന്നു, ഇവിടെ :math:`d` ക്ലാസുകളുടെ എണ്ണത്തെ സൂചിപ്പിക്കുന്നു. ഒരു ``QuantumCircuit``ൽ നിന്നുള്ള സാമ്പിൾ ഓട്ടോമാറ്റിക്കായി ഒരു പ്രോബബിലിറ്റി വിതരണത്തിന് കാരണമാകുന്നു, മാത്രമല്ല അളന്ന ബിറ്റ്സ്ട്രിംഗുകളിൽ നിന്ന് വ്യത്യസ്ത ക്ലാസുകളിലേക്കുള്ള മാപ്പിംഗ് ഞമ്മൾ നിർവചിക്കേണ്ടതുണ്ട്. ബൈനറി ക്ലാസ്സിഫിക്കേഷനിനായി ഞമ്മൾ പാരിറ്റി മാപ്പിംഗ് ഉപയോഗിക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:400
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``CircuitQNN`` ഉള്ള ``NeuralNetworkClassifier`` ഒരു പ്രത്യേക വകഭേദമാണ് ``VQC``. ബിറ്റ്സ്ട്രിംഗിൽ നിന്ന് ക്ലാസ്സിഫിക്കേഷനിലേക്ക് മാപ്പ് ചെയ്യുന്നതിന് ഇത് ഒരു പാരിറ്റി മാപ്പിംഗ് (അല്ലെങ്കിൽ ഒന്നിലധികം ക്ലാസുകളിലേക്കുള്ള വിപുലീകരണങ്ങൾക്ക്) പ്രയോഗിക്കുന്നു, ഇത് പ്രോബബിലിറ്റി വെക്റ്ററിന് കാരണമാകുന്നു, ഇത് വൻ-ഹോട്ട് എൻ‌കോഡുചെയ്‌ത (one-hot encoded) ഫലമായി വ്യാഖ്യാനിക്കപ്പെടുന്നു. സ്ഥിരസ്ഥിതിയായി, ഇത് ഒരു ഹോട്ട് എൻ‌കോഡുചെയ്‌ത ഫോർ‌മാറ്റിൽ‌ ലേബലുകൾ‌ പ്രതീക്ഷിക്കുന്ന ``CrossEntropyLoss`` ഫംഗ്ഷൻ‌ പ്രയോഗിക്കുന്നു, മാത്രമല്ല ഇത് അതേ ഫോർ‌മാറ്റിലേക്ക് തന്നെ പ്രവചനങ്ങൾ‌ നൽ‌കുകയും ചെയ്യുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:496
msgid "Regression"
msgstr "റിഗ്രഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:498
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "ഇനിപ്പറയുന്ന അൽ‌ഗോരിതം വിശദീകരിക്കുന്നതിന് ഞമ്മൾ ഒരു ലളിതമായ റിഗ്രഷൻ ഡാറ്റാസെറ്റ് തയ്യാറാക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:541
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "ഇനിപ്പറയുന്നവയിൽ :math:`[-1, +1]` എന്ന വാല്യു നൽകുന്ന ഒരു ``OpflowQNN`` ഉപയോഗിച്ച് റിഗ്രഷൻ ഞമ്മൾ പരിമിതപ്പെടുത്തുന്നു. ``CircuitQNN`` അടിസ്ഥാനമാക്കി കൂടുതൽ‌ സങ്കീർ‌ണ്ണവും മൾ‌ട്ടി-ഡൈമെൻ‌ഷനലുമായ മോഡലുകളും നിർമ്മിക്കാൻ‌ കഴിയും, പക്ഷേ അത് ഈ ട്യൂട്ടോറിയലിന്റെ വ്യാപ്തി കവിയുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:648
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രസർ (``VQR``) ഉപയോഗിച്ചുള്ള റിഗ്രഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:650
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "ക്ലാസ്സിഫിക്കേഷനിനായുള്ള ``VQC``ക്ക് സമാനമായി, ``VQR`` എന്നത് ``OpflowQNN`` ഉള്ള ``NeuralNetworkRegressor`` ഒരു പ്രത്യേക വകഭേദമാണ്. സ്ഥിരസ്ഥിതിയായി ഇത് പ്രവചനങ്ങളും ടാർഗെറ്റുകളും തമ്മിലുള്ള ശരാശരി സ്ക്വയർഡ് ഇറർ (mean squared error) കുറയ്ക്കുന്നതിന് ``L2Loss`` ഫംഗ്ഷനെ പരിഗണിക്കുന്നു."

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr "ക്വാണ്ടം കേർണൽ മെഷീൻ ലേണിംഗ്"

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid "The general task of machine learning is to find and study patterns in data. For many datasets, the datapoints are better understood in a higher dimensional feature space, through the use of a kernel function: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, \\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from :math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b \\rangle` denotes the dot product. When considering finite data, a kernel function can be represented as a matrix: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."
msgstr "ഡാറ്റയിലെ പാറ്റേണുകൾ കണ്ടെത്തുകയും പഠിക്കുകയും ചെയ്യുക എന്നതാണ് മെശീൻ ലേണിംഗിൻ്റെ പൊതുവായ ചുമതല.പല ഡാറ്റാസെറ്റുകൾ‌ക്കും, കേർ‌ണൽ‌ ഫംഗ്ഷന്റെ ഉപയോഗത്തിലൂടെ ഡാറ്റാ പോയിൻറുകൾ‌ ഉയർന്ന ഡൈമെൻ‌ഷൻ‌ ഫീച്ചർ‌ സ്‌പെയ്‌സിൽ‌ നന്നായി മനസ്സിലാക്കാം: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` ഇവിടെ :math:`k`എന്നത് കേർണൽ ഫംഗ്ഷനാണ്, :math:`\\vec{x}_i, \\vec{x}_j` ഇവ :math:`n` ഡൈമൻഷണൽ ഇൻപുട്ടുകളാണ്, :math:`f` എന്നത് :math:`n`- ഡൈമൻഷനിൽ നിന്ന് :math:`m`- ഡൈമൻഷൻ സ്‌പെയ്‌സിലേക്കുള്ള മാപ്പാണ്, കൂടാതെ :math:`\\langle a,b \\rangle` എന്നത് ഡോട്ട് പ്രൊഡക്റ്റിനെ സൂചിപ്പിക്കുന്നു. പരിമിത ഡാറ്റ പരിഗണിക്കുമ്പോൾ, ഒരു കേർണൽ ഫംഗ്ഷനെ ഒരു മാട്രിക്സായി പ്രതിനിധീകരിക്കാം : :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid "In quantum kernel machine learning, a quantum feature map :math:`\\phi(\\vec{x})` is used to map a classical feature vector :math:`\\vec{x}` to a quantum Hilbert space, :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ for more details."
msgstr "ക്വാണ്ടം കേർണൽ മെഷീൻ ലേണിംഗിൽ, ഒരു ക്വാണ്ടം സവിശേഷത മാപ്പ് :math:`\\phi(\\vec{x})` നെ ഒരു ക്ലാസിക്കൽ സവിശേഷത വെക്റ്ററിനെ :math:`\\vec{x}` ഒരു ക്വാണ്ടം ഹിൽബർട്ട് സ്പേസിലേക്ക് :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|` മാപ്പ് ചെയ്യാൻ ഉപയോഗിക്കുന്നു, അങ്ങനെ :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. കൂടുതൽ വിവരങ്ങൾക്ക് `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ കാണുക."

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid "In this notebook, we use ``qiskit`` to calculate a kernel matrix using a quantum feature map, then use this kernel matrix in ``scikit-learn`` classification and clustering algorithms."
msgstr "ഈ നോട്ട്ബുക്കിൽ, ഒരു ക്വാണ്ടം ഫീച്ചർ മാപ്പ് ഉപയോഗിച്ച് ഒരു കേർണൽ മാട്രിക്സ് കണക്കാക്കാൻ ഞമ്മൾ ``qiskit`` ഉപയോഗിക്കുന്നു, തുടർന്ന് ``scikit-learn`` ക്ലാസ്സിഫിക്കേഷനിലും ക്ലസ്റ്ററിംഗ് അൽഗോരിതങ്ങളിലും ഈ കേർണൽ മാട്രിക്സ് ഉപയോഗിക്കുന്നു."

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid "For our classification example, we will use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr "ഞമ്മളുടെ വർഗ്ഗീകരണ ഉദാഹരണത്തിനായി, `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ പഠനത്തിൽ വിവരിച്ചിരിക്കുന്നതുപോലെ *ad hoc dataset* ഉം, കൂടാതെ ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ (``svc``)അൽഗോരിതവും ഉപയോഗിക്കും."

#: ../../tutorials/03_quantum_kernel.ipynb:111
msgid "With our training and testing datasets ready, we set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the ``BasicAer`` ``qasm_simulator`` using 1024 shots."
msgstr "ഞമ്മളുടെ പരിശീലനവും പരിശോധന ഡാറ്റാസെറ്റുകളും തയ്യാറായതോടെ, the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ ഉപയോഗിച്ച് ഒരു കേർണൽ മാട്രിക്സ് കണക്കാക്കാൻ ഞമ്മൾ ``QuantumKernel`` ക്ലാസ് സജ്ജമാക്കുന്നു. കൂടാതെ 1024 ഷോട്ടുകൾ‌ ഉപയോഗിക്കുന്ന ``BasicAer`` ``qasm_simulator``ഉം."

#: ../../tutorials/03_quantum_kernel.ipynb:138
msgid "The ``scikit-learn`` ``svc`` algorithm allows us to define a `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. We can do either of these using the ``QuantumKernel`` class in ``qiskit``."
msgstr "ഒരു `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__നെ രണ്ട് തരത്തിൽ നിർവചിക്കാൻ ``scikit-learn`` ``svc`` അൽ‌ഗോരിതം ഞമ്മളെ അനുവദിക്കുന്നു: കേർ‌ണലിനെ വിളിക്കാൻ‌ കഴിയുന്ന പ്രവർ‌ത്തനമായി നൽ‌കുന്നതിലൂടെ അല്ലെങ്കിൽ‌ കേർ‌ണൽ‌ മാട്രിക്സ് മുൻ‌കൂട്ടി കംപ്യൂട്ട് ചെയ്യുന്നതിലൂടെ. ``qiskit`` ലെ ``QuantumKernel`` ക്ലാസ് ഉപയോഗിച്ച് നമുക്ക് ഇവയിലേതെങ്കിലും ചെയ്യാൻ കഴിയുന്നതാണ്."

#: ../../tutorials/03_quantum_kernel.ipynb:140
msgid "The following code gives the kernel as a callable function:"
msgstr "ഇനിപ്പറയുന്ന കോഡ് കേർണലിനെ വിളിക്കാവുന്ന ഫംഗ്ഷനായി നൽകുന്നു:"

#: ../../tutorials/03_quantum_kernel.ipynb:184
msgid "The following code precomputes and plots the training and testing kernel matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr "പരിശീലന, ടെസ്റ്റിംഗ് കേർണൽ മെട്രിക്സുകൾ ``scikit-learn`` ``svc`` അൽ‌ഗോരിതം നൽകുന്നതിനുമുമ്പ് ഇനിപ്പറയുന്ന കോഡ് മുൻ‌കൂട്ടി തയ്യാറാക്കുകയും പ്ലോട്ട് ചെയ്യുകയും ചെയ്യുന്നു:"

#: ../../tutorials/03_quantum_kernel.ipynb:250
msgid "``qiskit`` also contains the ``qsvc`` class that extends the ``sklearn svc`` class, that can be used as follows:"
msgstr "``qiskit`` ൽ ``sklearn svc`` ക്ലാസ് വിപുലീകരിക്കുന്ന ``qsvc`` ക്ലാസും അടങ്ങിയിരിക്കുന്നു, അത് ഇനിപ്പറയുന്ന രീതിയിൽ ഉപയോഗിക്കാം:"

#: ../../tutorials/03_quantum_kernel.ipynb:295
msgid "Clustering"
msgstr "ക്ലസ്റ്ററിംഗ്"

#: ../../tutorials/03_quantum_kernel.ipynb:297
msgid "For our clustering example, we will again use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` ``spectral`` clustering algorithm."
msgstr "ഞമ്മളുടെ ക്ലസ്റ്ററിംഗ് ഉദാഹരണത്തിനായി, `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ പഠനത്തിൽ വിവരിച്ചിരിക്കുന്നതുപോലെ *ad hoc dataset* ഉം, കൂടാതെ ``scikit-learn`` ``spectral``അൽഗോരിതവും ഉപയോഗിക്കും."

#: ../../tutorials/03_quantum_kernel.ipynb:299
msgid "We will regenerate the dataset with a larger gap between the two classes, and as clustering is an unsupervised machine learning task, we don’t need a test sample."
msgstr "രണ്ട് ക്ലാസുകൾക്കിടയിലുള്ള വലുതാക്കിയ വിടവ് ഉപയോഗിച്ചു ഞമ്മൾ ഡാറ്റാസെറ്റിനെ ഉണ്ടാക്കുകയും, കൂടാതെ ക്ലസ്റ്ററിംഗ് ഒരു മേൽനോട്ടമില്ലാത്ത മെഷീൻ ലേണിംഗ് ടാസ്ക് ആയതിനാൽ, ഞങ്ങൾക്ക് ഒരു പരീക്ഷണ സാമ്പിൾ ആവശ്യമില്ല."

#: ../../tutorials/03_quantum_kernel.ipynb:350
msgid "We again set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the BasicAer ``qasm_simulator`` using 1024 shots."
msgstr "ഞമ്മളുടെ പരിശീലനവും പരിശോധന ഡാറ്റാസെറ്റുകളും തയ്യാറായതോടെ, `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ ഉപയോഗിച്ച് ഒരു കേർണൽ മാട്രിക്സ് കണക്കാക്കാൻ വീണ്ടും ഞമ്മൾ ``QuantumKernal`` ക്ലാസ് സജ്ജമാക്കുന്നു. കൂടാതെ 1024 ഷോട്ടുകൾ‌ ഉപയോഗിക്കുന്ന BasicAer ``qasm_simulator``ഉം."

#: ../../tutorials/03_quantum_kernel.ipynb:377
msgid "The scikit-learn spectral clustering algorithm allows us to define a [custom kernel] in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. Using the QuantumKernel class in qiskit, we can only use the latter."
msgstr "ഒരു `custom kernel <https://scikit-learn. org/stable/modules/svm. html#custom-kernels>`__നെ രണ്ട് തരത്തിൽ നിർവചിക്കാൻ സൈകിറ്റ്-ലേൺ സ്പെക്ട്രൽ ക്ലസ്റ്ററിംഗ് അൽ‌ഗോരിതം ഞമ്മളെ അനുവദിക്കുന്നു: കേർ‌ണലിനെ വിളിക്കാൻ‌ കഴിയുന്ന പ്രവർ‌ത്തനമായി നൽ‌കുന്നതിലൂടെ അല്ലെങ്കിൽ‌ കേർ‌ണൽ‌ മാട്രിക്സ് മുൻ‌കൂട്ടി കംപ്യൂട്ട് ചെയ്യുന്നതിലൂടെ. ക്വിസ്‌കിറ്റ്ലെ ക്വാണ്ടം കേർണൽ ക്ലാസ് ഉപയോഗിച്ച് നമുക്ക് ഇവയിലേതെങ്കിലും ചെയ്യാൻ കഴിയുന്നതാണ്."

#: ../../tutorials/03_quantum_kernel.ipynb:379
msgid "The following code precomputes and plots the kernel matrices before providing it to the scikit-learn spectral clustering algorithm, and scoring the labels using normalized mutual information, since we a priori know the class labels."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:439
msgid "``scikit-learn`` has other algorithms that can use a precomputed kernel matrix, here are a few:"
msgstr "മുൻ‌കൂട്ടി തയ്യാറാക്കിയ കേർണൽ മാട്രിക്സുകൾ ഉപയോഗിക്കാൻ‌ കഴിയുന്ന മറ്റ് അൽ‌ഗോരിതം `` സൈകിറ്റ്-ലേണി''ന് ഉണ്ട്, അവയിൽ ചിലത് ഇതാ:"

#: ../../tutorials/03_quantum_kernel.ipynb:441
msgid "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:442
msgid "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:443
msgid "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:444
msgid "`Gaussian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:445
msgid "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:9
msgid "qGANs for Loading Random Distributions"
msgstr "റാൻഡം ഡിസ്ട്രിബൂഷൻ ലോഡുചെയ്യുന്നതിനുള്ള qGAN- കൾ"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:11
msgid "Given :math:`k`-dimensional data samples, we employ a quantum Generative Adversarial Network (qGAN) to learn the data’s underlying random distribution and to load it directly into a quantum state:"
msgstr "നൽകിയിട്ടുള്ളത് :math:`k`-ഡൈമൻഷണൽ ഡാറ്റ സാമ്പിളുകൾ, ഡാറ്റയുടെ അടിസ്ഥാന റാൻഡം ഡിസ്ട്രിബൂഷനിനെക്കുറിച്ച് മനസിലാക്കുന്നതിനും നേരിട്ട് ഒരു ക്വാണ്ടം അവസ്ഥയിലേക്ക് ലോഡുചെയ്യുന്നതിനും ഞമ്മൾ ഒരു ക്വാണ്ടം ജനറേറ്റീവ് അഡ്വേർസറിയൽ നെറ്റ്‌വർക്ക് (qGAN) ഉപയോഗിക്കുന്നു:"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:13
msgid "\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1} \\sqrt{p_{\\theta}^{j}}\\big| j \\rangle\n\n"
msgstr "\\big| g_{\\theta}\\rangle = \\sum_{j=0}^{2^n-1} \\sqrt{p_{\\theta}^{j}}\\big| j \\rangle\n\n"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:15
msgid "where :math:`p_{\\theta}^{j}` describe the occurrence probabilities of the basis states :math:`\\big| j\\rangle`."
msgstr "ഇവിടെ :math:`p_{\\theta}^{j}` അടിസ്ഥാന സംഭവങ്ങളുടെ സാധ്യതകൾ വിവരിക്കുന്നു :math:`\\big| j\\rangle`."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:17
msgid "The aim of the qGAN training is to generate a state :math:`\\big| g_{\\theta}\\rangle` where :math:`p_{\\theta}^{j}`, for :math:`j\\in \\left\\{0, \\ldots, {2^n-1} \\right\\}`, describe a probability distribution that is close to the distribution underlying the training data :math:`X=\\left\\{x^0, \\ldots, x^{k-1} \\right\\}`."
msgstr "പരിശീലന ഡാറ്റ  :math:`X=\\left\\{x^0, \\ldots, x^{k-1} \\right\\}` അടിസ്ഥാനമായ വിതരണത്തിന് സമീപമുള്ള പ്രോബബിലിറ്റി ഡിസ്‌ട്രിബ്യൂഷൻ വിവരിക്കുന്ന  :math:`p_{\\theta}^{j}`, :math:`j\\in \\left\\{0, \\ldots, {2^n-1} \\right\\} യി ഒരു സ്റ്റേറ്റ്  :math:`\\big| g_{\\theta}\\rangle`  സൃഷ്ടിക്കുക എന്നതാണ് qGAN പരിശീലനത്തിന്റെ ലക്ഷ്യം."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:19
msgid "For further details please refer to `Quantum Generative Adversarial Networks for Learning and Loading Random Distributions <https://arxiv.org/abs/1904.00043>`__ *Zoufal, Lucchi, Woerner* [2019]."
msgstr "കൂടുതൽ വിവരങ്ങൾക്ക് കാണുക `Quantum Generative Adversarial Networks for Learning and Loading Random Distributions <https://arxiv.org/abs/1904.00043>`__ *Zoufal, Lucchi, Woerner* [2019]."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:21
msgid "For an example of how to use a trained qGAN in an application, the pricing of financial derivatives, please see the `Option Pricing with qGANs <https://github.com/Qiskit/qiskit-finance/tree/main/docs/tutorials/10_qgan_option_pricing.ipynb>`__ tutorial."
msgstr "ഒരു അപ്ലിക്കേഷനിൽ പരിശീലനം ലഭിച്ച qGAN എങ്ങനെ ഉപയോഗിക്കാമെന്നതിന്റെ ഉദാഹരണത്തിനായി, സാമ്പത്തിക ഡെറിവേറ്റീവുകളുടെ വിലനിർണ്ണയം, `Option Pricing with qGANs <https://github.com/Qiskit/qiskit-finance/tree/main/docs/tutorials/10_qgan_option_pricing.ipynb>`__ ട്യൂട്ടോറിയൽ കാണുക."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:56
msgid "Load the Training Data"
msgstr "പരിശീലന ഡാറ്റ ലോഡുചെയ്യുക"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:58
msgid "First, we need to load the :math:`k`-dimensional training data samples (here k=1)."
msgstr "ആദ്യം, ഞമ്മൾ :math:`k`- ഡൈമൻഷണൽ പരിശീലന ഡാറ്റ സാമ്പിളുകൾ ലോഡുചെയ്യേണ്ടതുണ്ട് (ഇവിടെ k = 1)."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:60
msgid "Next, the data resolution is set, i.e. the min/max data values and the number of qubits used to represent each data dimension."
msgstr "അടുത്തതായി, ഡാറ്റ റിസൊലൂഷൻ സജ്ജമാക്കുന്നു, അതായത് മിനിമം / പരമാവധി ഡാറ്റ മൂല്യങ്ങൾ, ഒപ്പം ഓരോ ഡാറ്റ അളവിനെയും പ്രതിനിധീകരിക്കുന്നതിന് ഉപയോഗിക്കുന്ന ക്യൂബിറ്റുകളുടെ എണ്ണവും."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:95
msgid "Initialize the qGAN"
msgstr "qGAN സമാരംഭിക്കുക"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:97
msgid "The qGAN consists of a quantum generator :math:`G_{\\theta}`, i.e., an ansatz, and a classical discriminator :math:`D_{\\phi}`, a neural network."
msgstr "qGANൽ ഒരു ക്വാണ്ടം ജനറേറ്റർ :math:`G_{\\theta}` , അതായത്, ഒരു അൻസാറ്റ്സും, ഒരു ക്ലാസിക്കൽ ഡിസ്ക്രിമിനേറ്റർ :math:`D_{\\phi}` :, ഒരു ന്യൂറൽ നെറ്റ്‌വർക്കും ഉൾക്കൊള്ളുന്നു."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:99
msgid "To implement the quantum generator, we choose a depth-\\ :math:`1` ansatz that implements :math:`R_Y` rotations and :math:`CZ` gates which takes a uniform distribution as an input state. Notably, for :math:`k>1` the generator’s parameters must be chosen carefully. For example, the circuit depth should be :math:`>1` because higher circuit depths enable the representation of more complex structures."
msgstr "ക്വാണ്ടം ജനറേറ്റർ നടപ്പിലാക്കാൻ, :math:`R_Y` റൊട്ടേഷനുകളും :math:`CZ` ഗേറ്റുകളും നടപ്പിലാക്കുന്ന ഒരു ഡെപ്ത്-\\ :math:`1` അൻസാറ്റ്സ് ഞമ്മൾ തിരഞ്ഞെടുക്കുന്നു, അത് ഇൻപുട്ട് സ്റ്റേറ്റായി യൂണിഫോം ഡിസ്ട്രിബൂഷൻ എടുക്കുന്നു. ശ്രദ്ധേയമായി, ഇതിനായി :math:`k>1` ജനറേറ്ററിന്റെ പാരാമീറ്ററുകൾ ശ്രദ്ധാപൂർവ്വം തിരഞ്ഞെടുക്കണം. ഉദാഹരണത്തിന്, സർക്യൂട്ട് ഡെപ്ത് ഇതായിരിക്കണം :math:`>1` കാരണം ഉയർന്ന സർക്യൂട്ട് ഡെപ്ത് കൂടുതൽ സങ്കീർണ്ണമായ ഘടനകളുടെ പ്രാതിനിധ്യം പ്രാപ്തമാക്കുന്നു."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:101
msgid "The classical discriminator used here is based on a neural network implementation using NumPy. There is also a discriminator based on PyTorch which is not installed by default when installing Qiskit - see `Optional Install <https://github.com/Qiskit/qiskit-machine-learning#optional-installs>`__ for more information."
msgstr "ഇവിടെ ഉപയോഗിക്കുന്ന ക്ലാസിക്കൽ ഡിസ്ക്രിമിനേറ്റർ NumPy ഉപയോഗിച്ചുള്ള ഒരു ന്യൂറൽ നെറ്റ്‌വർക്ക് നടപ്പിലാക്കലിനെ അടിസ്ഥാനമാക്കിയുള്ളതാണ്. ക്വിസ്കിറ്റ് ഇൻസ്റ്റാൾ ചെയ്യുമ്പോൾ സ്ഥിരസ്ഥിതിയായി ഇൻസ്റ്റാൾ ചെയ്യാത്ത PyTorchനെ അടിസ്ഥാനമാക്കിയുള്ള ഒരു ഡിസ്ക്രിമിനേറ്ററുമുണ്ട് - കൂടുതൽ വിവരങ്ങൾക്ക് `Optional Install <https://github.com/Qiskit/qiskit-machine-learning#optional-installs>`__ കാണുക."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:103
msgid "Here, both networks are updated with the ADAM optimization algorithm (ADAM is qGAN optimizer default)."
msgstr "ഇവിടെ, രണ്ട് നെറ്റ്‌വർക്കുകളും ADAM ഒപ്റ്റിമൈസേഷൻ അൽഗോരിതം ഉപയോഗിച്ച് അപ്‌ഡേറ്റുചെയ്‌തതാണ് (ADAM qGANൻ്റെ ഒപ്റ്റിമൈസർ സ്ഥിരസ്ഥിതിയാണ്)."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:164
msgid "Run the qGAN Training"
msgstr "qGAN പരിശീലനം പ്രവർത്തിപ്പിക്കുക"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:166
msgid "During the training the discriminator’s and the generator’s parameters are updated alternately w.r.t the following loss functions:"
msgstr "പരിശീലന സമയത്ത് ഡിസ്ക്രിമിനേറ്ററുടെയും ജനറേറ്ററിന്റെയും പാരാമീറ്ററുകൾ ഇനിപ്പറയുന്ന ലോസ് ഫംഗ്ഷനുമായി ബന്ധപ്പെട്ട് മാറിമാറി അപ്‌ഡേറ്റുചെയ്യുന്നു:"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:168
msgid "L_G\\left(\\phi, \\theta\\right) = -\\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log\\left(D_{\\phi}\\left(g^{l}\\right)\\right)\\right]\n\n"
msgstr "L_G\\left(\\phi, \\theta\\right) = -\\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log\\left(D_{\\phi}\\left(g^{l}\\right)\\right)\\right]\n\n"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:170
msgid "and"
msgstr "കൂടാതെ"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:172
msgid "L_D\\left(\\phi, \\theta\\right) =\n"
"  \\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log D_{\\phi}\\left(x^{l}\\right) + \\log\\left(1-D_{\\phi}\\left(g^{l}\\right)\\right)\\right],"
msgstr "L_D\\left(\\phi, \\theta\\right) =\n"
"  \\frac{1}{m}\\sum\\limits_{l=1}^{m}\\left[\\log D_{\\phi}\\left(x^{l}\\right) + \\log\\left(1-D_{\\phi}\\left(g^{l}\\right)\\right)\\right],"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:177
msgid "with :math:`m` denoting the batch size and :math:`g^l` describing the data samples generated by the quantum generator."
msgstr ":math:`m` ബാച്ച് വലുപ്പത്തെ സൂചിപ്പിക്കുകയും ക്വാണ്ടം ജനറേറ്റർ ജനറേറ്റുചെയ്‌ത ഡാറ്റ സാമ്പിളുകൾ വിവരിക്കുന്ന :math:`g^l` ഉപയോഗിച്ച്."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:179
msgid "Please note that the training, for the purpose of this notebook, has been kept briefer by the selection of a known initial point (``init_params``). Without such prior knowledge be aware training may take some while."
msgstr "അറിയപ്പെടുന്ന ഒരു പ്രാരംഭ പോയിന്റ് (`` init_params``) തിരഞ്ഞെടുക്കുന്നതിലൂടെ ഈ നോട്ട്ബുക്കിന്റെ ഉദ്ദേശ്യത്തിനായി പരിശീലനം സൂക്ഷ്മമായി സൂക്ഷിച്ചിരിക്കുന്നു. അത്തരം മുൻ‌ അറിവില്ലാത്ത വർ അറിഞ്ഞിരിക്കുക, പരിശീലനം കുറച്ച് സമയമെടുക്കും."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:245
msgid "Training Progress & Outcome"
msgstr "പരിശീലന പുരോഗതിയും ഫലവും"

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:247
msgid "Now, we plot the evolution of the generator’s and the discriminator’s loss functions during the training, as well as the progress in the relative entropy between the trained and the target distribution."
msgstr "ഇപ്പോൾ, പരിശീലന സമയത്ത് ജനറേറ്ററിന്റെ പരിണാമവും ഡിസ്ക്രിമിനേറ്ററുടെ ലോസ്സ് ഫംഗ്ഷനും, അതുപോലെ തന്നെ പരിശീലനം നേടിയതും ടാർഗെറ്റ് ചെയ്ത ഡിസ്ട്രിബൂഷനും തമ്മിലുള്ള എൻട്രോപ്പിയിലെ(relative entropy) പുരോഗതിയും, ഞമ്മൾ പ്ലോട്ട് ചെയ്യുന്നു."

#: ../../tutorials/04_qgans_for_loading_random_distributions.ipynb:249
msgid "Finally, we also compare the cumulative distribution function (CDF) of the trained distribution to the CDF of the target distribution."
msgstr "അവസാനമായി, പരിശീലനം ലഭിച്ച വിതരണത്തിന്റെ ക്യുമുലേറ്റീവ് ഡിസ്ട്രിബ്യൂഷൻ ഫംഗ്ഷനും (CDF) ടാർഗെറ്റ് ഡിസ്ട്രിബ്യൂഷന്റെ സിഡിഎഫുമായി താരതമ്യം ചെയ്യുന്നു."

#: ../../tutorials/05_torch_connector.ipynb:9
msgid "Torch Connector and Hybrid QNNs"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:11
msgid "This tutorial introduces Qiskit’s ``TorchConnector`` class, and demonstrates how the ``TorchConnector`` allows for a natural integration of any ``NeuralNetwork`` from Qiskit Machine Learning into a PyTorch workflow. ``TorchConnector`` takes a Qiskit ``NeuralNetwork`` and makes it available as a PyTorch ``Module``. The resulting module can be seamlessly incorporated into PyTorch classical architectures and trained jointly without additional considerations, enabling the development and testing of novel **hybrid quantum-classical** machine learning architectures."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:15
msgid "Content:"
msgstr "ഉള്ളടക്കം:"

#: ../../tutorials/05_torch_connector.ipynb:17
msgid "`Part 1: Simple Classification & Regression <#Part-1:-Simple-Classification-&-Regression>`__"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:19
msgid "The first part of this tutorial shows how quantum neural networks can be trained using PyTorch’s automatic differentiation engine (``torch.autograd``, `link <https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html>`__) for simple classification and regression tasks."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:21
msgid "`Classification <#1.-Classification>`__"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:23
msgid "Classification with PyTorch and ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:24
msgid "Classification with PyTorch and ``CircuitQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:26
msgid "`Regression <#2.-Regression>`__"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:28
msgid "Regression with PyTorch and ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:30
msgid "`Part 2: MNIST Classification, Hybrid QNNs <#Part-2:-MNIST-Classification,-Hybrid-QNNs>`__"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:32
msgid "The second part of this tutorial illustrates how to embed a (Quantum) ``NeuralNetwork`` into a target PyTorch workflow (in this case, a typical CNN architecture) to classify MNIST data in a hybrid quantum-classical manner."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:74
msgid "Part 1: Simple Classification & Regression"
msgstr "ഭാഗം 1: ലളിതമായ ക്ലാസ്സിഫിക്കേഷനും റിഗ്രഷനും"

#: ../../tutorials/05_torch_connector.ipynb:86
msgid "1. Classification"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:88
msgid "First, we show how ``TorchConnector`` allows to train a Quantum ``NeuralNetwork`` to solve a classification tasks using PyTorch’s automatic differentiation engine. In order to illustrate this, we will perform **binary classification** on a randomly generated dataset."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:144
msgid "A. Classification with PyTorch and ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:146
msgid "Linking an ``OpflowQNN`` to PyTorch is relatively straightforward. Here we illustrate this using the ``TwoLayerQNN``, a sub-case of ``OpflowQNN`` introduced in previous tutorials."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:254
msgid "Optimizer"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:256
msgid "The choice of optimizer for training any machine learning model can be crucial in determining the success of our training’s outcome. When using ``TorchConnector``, we get access to all of the optimizer algorithms defined in the [``torch.optim``] package (`link <https://pytorch.org/docs/stable/optim.html>`__). Some of the most famous algorithms used in popular machine learning architectures include *Adam*, *SGD*, or *Adagrad*. However, for this tutorial we will be using the L-BFGS algorithm (``torch.optim.LBFGS``), one of the most well know second-order optimization algorithms for numerical optimization."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:260
msgid "Loss Function"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:262
msgid "As for the loss function, we can also take advantage of PyTorch’s pre-defined modules from ``torch.nn``, such as the `Cross-Entropy <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html>`__ or `Mean Squared Error <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html>`__ losses."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:264
msgid "**💡 Clarification :** In classical machine learning, the general rule of thumb is to apply a Cross-Entropy loss to classification tasks, and MSE loss to regression tasks. However, this recommendation is given under the assumption that the output of the classification network is a class probability value in the [0,1] range (usually this is achieved through a Softmax layer). Because the following example for ``TwoLayerQNN`` does not include such layer, and we don’t apply any mapping to the output (the following section shows an example of application of parity mapping with ``CircuitQNNs``), the QNN’s output can take any value in the range [-1,1]. In case you were wondering, this is the reason why this particular example uses MSELoss for classification despite it not being the norm (but we encourage you to experiment with different loss functions and see how they can impact training results)."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:442
#: ../../tutorials/05_torch_connector.ipynb:674
msgid "The red circles indicate wrongly classified data points."
msgstr "ചുവന്ന വൃത്തങ്ങൾ തെറ്റായി ക്ലാസിഫൈ ചെയ്ത ഡാറ്റ പോയിന്റുകൾ സൂചിപ്പിക്കുന്നു."

#: ../../tutorials/05_torch_connector.ipynb:454
msgid "B. Classification with PyTorch and ``CircuitQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:456
msgid "Linking an ``CircuitQNN`` to PyTorch requires a bit more attention than ``OpflowQNN``. Without the correct setup, backpropagation is not possible."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:458
msgid "In particular, we must make sure that we are returning a dense array of probabilities in the network’s forward pass (``sparse=False``). This parameter is set up to ``False`` by default, so we just have to make sure that it has not been changed."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:460
msgid "**⚠️ Attention:** If we define a custom interpret function ( in the example: ``parity``), we must remember to explicitly provide the desired output shape ( in the example: ``2``). For more info on the initial parameter setup for ``CircuitQNN``, please check out the `official qiskit documentation <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.neural_networks.CircuitQNN.html>`__."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:523
#: ../../tutorials/05_torch_connector.ipynb:815
msgid "For a reminder on optimizer and loss function choices, you can go back to `this section <#Optimizer>`__."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:686
msgid "2. Regression"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:688
msgid "We use a model based on the ``TwoLayerQNN`` to also illustrate how to perform a regression task. The chosen dataset in this case is randomly generated following a sine wave."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:730
msgid "A. Regression with PyTorch and ``OpflowQNN``"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:741
msgid "The network definition and training loop will be analogous to those of the classification task using ``TwoLayerQNN``. In this case, we define our own feature map and ansatz, instead of using the default values."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:963
msgid "Part 2: MNIST Classification, Hybrid QNNs"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:965
msgid "In this second part, we show how to leverage a hybrid quantum-classical neural network using ``TorchConnector``, to perform a more complex image classification task on the MNIST handwritten digits dataset."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:967
msgid "For a more detailed (pre-``TorchConnector``) explanation on hybrid quantum-classical neural networks, you can check out the corresponding section in the `Qiskit Textbook <https://qiskit.org/textbook/ch-machine-learning/machine-learning-qiskit-pytorch.html>`__."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:996
msgid "Step 1: Defining Data-loaders for train and test"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1007
msgid "We take advantage of the ``torchvision`` `API <https://pytorch.org/vision/stable/datasets.html>`__ to directly load a subset of the `MNIST dataset <https://en.wikipedia.org/wiki/MNIST_database>`__ and define torch ``DataLoader``\\ s (`link <https://pytorch.org/docs/stable/data.html>`__) for train and test."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1048
msgid "If we perform a quick visualization we can see that the train dataset consists of images of handwritten 0s and 1s."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1120
msgid "Step 2: Defining the QNN and Hybrid Model"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1131
msgid "This second step shows the power of the ``TorchConnector``. After defining our quantum neural network layer (in this case, a ``TwoLayerQNN``), we can embed it into a layer in our torch ``Module`` by initializing a torch connector as ``TorchConnector(qnn)``."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1133
msgid "**⚠️ Attention:** In order to have an adequate gradient backpropagation in hybrid models, we MUST set the initial parameter ``input_gradients`` to TRUE during the qnn initialization."
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1235
msgid "Step 3: Training"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1337
msgid "Step 4: Evaluation"
msgstr ""

#: ../../tutorials/05_torch_connector.ipynb:1440
msgid "🎉🎉🎉🎉 **You are now able to experiment with your own hybrid datasets and architectures using Qiskit Machine Learning.** **Good Luck!**"
msgstr ""

#: ../../tutorials/index.rst:3
msgid "Machine Learning Tutorials"
msgstr "മെഷീൻ ലേണിംഗ് ട്യൂട്ടോറിയലുകൾ"

