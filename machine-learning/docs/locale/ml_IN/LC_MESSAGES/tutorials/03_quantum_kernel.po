msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-11-08 23:29+0000\n"
"PO-Revision-Date: 2022-11-09 00:03\n"
"Last-Translator: \n"
"Language-Team: Malayalam\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.11.0\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ml-IN\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/03_quantum_kernel.po\n"
"X-Crowdin-File-ID: 9632\n"
"Language: ml_IN\n"

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "This page was generated from `docs/tutorials/03_quantum_kernel.ipynb`__."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr "ക്വാണ്ടം കേർണൽ മെഷീൻ ലേണിംഗ്"

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid "The general task of machine learning is to find and study patterns in data. For many datasets, the datapoints are better understood in a higher dimensional feature space, through the use of a kernel function: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, \\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from :math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b \\rangle` denotes the dot product. When considering finite data, a kernel function can be represented as a matrix: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."
msgstr "ഡാറ്റയിലെ പാറ്റേണുകൾ കണ്ടെത്തുകയും പഠിക്കുകയും ചെയ്യുക എന്നതാണ് മെശീൻ ലേണിംഗിൻ്റെ പൊതുവായ ചുമതല.പല ഡാറ്റാസെറ്റുകൾ‌ക്കും, കേർ‌ണൽ‌ ഫംഗ്ഷന്റെ ഉപയോഗത്തിലൂടെ ഡാറ്റാ പോയിൻറുകൾ‌ ഉയർന്ന ഡൈമെൻ‌ഷൻ‌ ഫീച്ചർ‌ സ്‌പെയ്‌സിൽ‌ നന്നായി മനസ്സിലാക്കാം: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` ഇവിടെ :math:`k` എന്നത് കേർണൽ ഫംഗ്ഷനാണ്, :math:`\\vec{x}_i, \\vec{x}_j` ഇവ :math:`n` ഡൈമൻഷണൽ ഇൻപുട്ടുകളാണ്, :math:`f` എന്നത് :math:`n`- ഡൈമൻഷനിൽ നിന്ന് :math:`m`- ഡൈമൻഷൻ സ്‌പെയ്‌സിലേക്കുള്ള മാപ്പാണ്, കൂടാതെ :math:`\\langle a,b \\rangle` എന്നത് ഡോട്ട് പ്രൊഡക്റ്റിനെ സൂചിപ്പിക്കുന്നു. പരിമിത ഡാറ്റ പരിഗണിക്കുമ്പോൾ, ഒരു കേർണൽ ഫംഗ്ഷനെ ഒരു മാട്രിക്സായി പ്രതിനിധീകരിക്കാം: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid "In quantum kernel machine learning, a quantum feature map :math:`\\phi(\\vec{x})` is used to map a classical feature vector :math:`\\vec{x}` to a quantum Hilbert space, :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ for more details."
msgstr "ക്വാണ്ടം കേർണൽ മെഷീൻ ലേണിംഗിൽ, ഒരു ക്വാണ്ടം സവിശേഷത മാപ്പ് :math:`\\phi(\\vec{x})` നെ ഒരു ക്ലാസിക്കൽ സവിശേഷത വെക്റ്ററിനെ :math:`\\vec{x}` ഒരു ക്വാണ്ടം ഹിൽബർട്ട് സ്പേസിലേക്ക് :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|` മാപ്പ് ചെയ്യാൻ ഉപയോഗിക്കുന്നു, അങ്ങനെ :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. കൂടുതൽ വിവരങ്ങൾക്ക് `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ കാണുക."

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid "In this notebook, we use ``qiskit`` to calculate a kernel matrix using a quantum feature map, then use this kernel matrix in ``scikit-learn`` classification and clustering algorithms."
msgstr "ഈ നോട്ട്ബുക്കിൽ, ഒരു ക്വാണ്ടം ഫീച്ചർ മാപ്പ് ഉപയോഗിച്ച് ഒരു കേർണൽ മാട്രിക്സ് കണക്കാക്കാൻ ഞമ്മൾ ``qiskit`` ഉപയോഗിക്കുന്നു, തുടർന്ന് ``scikit-learn`` ക്ലാസ്സിഫിക്കേഷനിലും ക്ലസ്റ്ററിംഗ് അൽഗോരിതങ്ങളിലും ഈ കേർണൽ മാട്രിക്സ് ഉപയോഗിക്കുന്നു."

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid "Classification"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:57
msgid "For our classification example, we will use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr "ഞമ്മളുടെ വർഗ്ഗീകരണ ഉദാഹരണത്തിനായി, `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ പഠനത്തിൽ വിവരിച്ചിരിക്കുന്നതുപോലെ *ad hoc dataset* ഉം, കൂടാതെ ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ (``svc``)അൽഗോരിതവും ഉപയോഗിക്കും."

#: ../../tutorials/03_quantum_kernel.ipynb:144
msgid "With our training and testing datasets ready, we set up the ``FidelityQuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__. We use the reference implementation of the ``Sampler`` primitive and the ``ComputeUncompute`` fidelity that computes overlaps between states. These are the default values and if you don’t pass a ``Sampler`` or ``Fidelity`` instance, the same objects will be created automatically for you."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:169
msgid "The ``scikit-learn`` ``SVC`` algorithm allows us to define a `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. We can do either of these using the ``FidelityQuantumKernel`` class in ``qiskit``."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:171
msgid "The following code gives the kernel as a callable function:"
msgstr "ഇനിപ്പറയുന്ന കോഡ് കേർണലിനെ വിളിക്കാവുന്ന ഫംഗ്ഷനായി നൽകുന്നു:"

#: ../../tutorials/03_quantum_kernel.ipynb:220
msgid "The following code precomputes and plots the training and testing kernel matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr "പരിശീലന, ടെസ്റ്റിംഗ് കേർണൽ മെട്രിക്സുകൾ ``scikit-learn`` ``svc`` അൽ‌ഗോരിതം നൽകുന്നതിനുമുമ്പ് ഇനിപ്പറയുന്ന കോഡ് മുൻ‌കൂട്ടി തയ്യാറാക്കുകയും പ്ലോട്ട് ചെയ്യുകയും ചെയ്യുന്നു:"

#: ../../tutorials/03_quantum_kernel.ipynb:290
msgid "Qiskit Machine Learning also contains the ``QSVC`` class that extends the ``SVC`` class from scikit-learn, that can be used as follows:"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:340
msgid "Clustering"
msgstr "ക്ലസ്റ്ററിംഗ്"

#: ../../tutorials/03_quantum_kernel.ipynb:342
msgid "For our clustering example, we will again use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` ``spectral`` clustering algorithm."
msgstr "ഞമ്മളുടെ ക്ലസ്റ്ററിംഗ് ഉദാഹരണത്തിനായി, `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ പഠനത്തിൽ വിവരിച്ചിരിക്കുന്നതുപോലെ *ad hoc dataset* ഉം, കൂടാതെ ``scikit-learn`` ``spectral``അൽഗോരിതവും ഉപയോഗിക്കും."

#: ../../tutorials/03_quantum_kernel.ipynb:344
msgid "We will regenerate the dataset with a larger gap between the two classes, and as clustering is an unsupervised machine learning task, we don’t need a test sample."
msgstr "രണ്ട് ക്ലാസുകൾക്കിടയിലുള്ള വലുതാക്കിയ വിടവ് ഉപയോഗിച്ചു ഞമ്മൾ ഡാറ്റാസെറ്റിനെ ഉണ്ടാക്കുകയും, കൂടാതെ ക്ലസ്റ്ററിംഗ് ഒരു മേൽനോട്ടമില്ലാത്ത മെഷീൻ ലേണിംഗ് ടാസ്ക് ആയതിനാൽ, ഞങ്ങൾക്ക് ഒരു പരീക്ഷണ സാമ്പിൾ ആവശ്യമില്ല."

#: ../../tutorials/03_quantum_kernel.ipynb:414
msgid "We again set up the ``FidelityQuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the default values this time."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:437
msgid "The scikit-learn spectral clustering algorithm allows us to define a custom kernel in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. Using the ``FidelityQuantumKernel`` class in Qiskit Machine Learning, we can only use the latter."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:439
msgid "The following code precomputes and plots the kernel matrices before providing it to the scikit-learn spectral clustering algorithm, and scoring the labels using normalized mutual information, since we a priori know the class labels."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:504
msgid "``scikit-learn`` has other algorithms that can use a precomputed kernel matrix, here are a few:"
msgstr "മുൻ‌കൂട്ടി തയ്യാറാക്കിയ കേർണൽ മാട്രിക്സുകൾ ഉപയോഗിക്കാൻ‌ കഴിയുന്ന മറ്റ് അൽ‌ഗോരിതം ``scikit-learn`` (സൈകിറ്റ്-ലേണി)-ന് ഉണ്ട്, അവയിൽ ചിലത് ഇതാ:"

#: ../../tutorials/03_quantum_kernel.ipynb:506
msgid "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:507
msgid "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:508
msgid "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:509
msgid "`Gaussian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:510
msgid "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr ""

