msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-15 16:59+0000\n"
"PO-Revision-Date: 2021-12-15 17:32\n"
"Last-Translator: \n"
"Language-Team: Malayalam\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ml-IN\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: ml_IN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "ന്യൂറൽ നെറ്റ്‌വർക്ക് ക്ലാസിഫയർ & റിഗ്രസ്സർ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "ഈ ട്യൂട്ടോറിയലിൽ ``NeuralNetworkClassifier``, ``NeuralNetworkRegressor``എന്നിവ എങ്ങനെ ഉപയോഗിക്കുന്നുവെന്ന് ഞങ്ങൾ കാണിക്കുന്നു. രണ്ടും ഇൻപുട്ടായി ഒരു (ക്വാണ്ടം) ``NeuralNetwork`` എടുത്ത് ഒരു പ്രത്യേക സന്ദർഭത്തിൽ അത് പ്രയോജനപ്പെടുത്തുന്നു. രണ്ട് സാഹചര്യങ്ങളിലും ഞങ്ങൾ സൗകര്യത്തിനായി മുൻകൂട്ടി ക്രമീകരിച്ച വേരിയൻ്റുകൾ, വേരിയേഷൻൽ ക്വാണ്ടം ക്ലാസിഫയർ (``VQC``), വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രെസർ (``VQR``) എന്നിവ നൽകുന്നു. ട്യൂട്ടോറിയൽ ഇനിപ്പറയുന്ന രീതിയിൽ ക്രമീകരിച്ചിരിക്കുന്നു:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Classification <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:299
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:469
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം ക്ലാസിഫയർ(``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Regression <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:629
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള റിഗ്രഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രസ്സർ(``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "ഇനിപ്പറയുന്ന അൽ‌ഗോരിതം വിശദീകരിക്കുന്നതിന് ഞമ്മൾ ഒരു ലളിതമായ ക്ലാസ്സിഫിക്കേഷൻ ഡാറ്റാസെറ്റ് തയ്യാറാക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` ഉപയോഗിച്ചുള്ള ക്ലാസ്സിഫിക്കേഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "ഒരു ``NeuralNetworkClassifier`` ``OpflowQNN``എങ്ങനെ ക്ലാസ്സിഫിക്കേഷനിനായി ഉപയോഗിക്കാമെന്ന് ആദ്യം ഞങ്ങൾ കാണിക്കുന്നു. ഈ സന്ദർഭത്തിൽ, ``OpflowQNN`` :math:`[-1, +1]` എന്ന രൂപത്തിൽ ഒരു-ഡൈമൻഷണൽ ഔട്ട്‌പുട്ട് നൽകുമെന്ന് പ്രതീക്ഷിക്കുന്നു. ഇത് ബൈനറി വർഗ്ഗീകരണത്തിന് മാത്രമേ പ്രവർത്തിക്കൂ, \n"
"അതിനാൽ ഞമ്മൾ രണ്ട് ക്ലാസുകൾ ഇവയിലേക്ക് നിയോഗിക്കുന്നു :math:`\\{-1, +1\\}`. സൗകര്യത്തിനായി, ഞമ്മൾ ഒരു സവിശേഷത മാപ്പിലൂടെയും അൻസാറ്റ്സിലൂടെയും നിർവചിച്ചിരിക്കുന്ന ഒരു പ്രത്യേക തരം ``OpflowQNN`` ആയ ``TwoLayerQNN`` ഉപയോഗിക്കുന്നത്."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:176
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:301
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "അടുത്തതായി ഒരു ``NeuralNetworkClassifier`` ``CircuitQNN`` എങ്ങനെ ക്ലാസ്സിഫിക്കേഷനിനായി ഉപയോഗിക്കാമെന്ന് ഞങ്ങൾ കാണിക്കുന്നു. ഈ സന്ദർഭത്തിൽ, ``CircuitQNN`` :math:`d`-ഡൈമൻഷണൽ പ്രോബബിലിറ്റി വെക്റ്റർ ഔട്ട്‌പുട്ടായി നൽകുമെന്ന് പ്രതീക്ഷിക്കുന്നു, ഇവിടെ :math:`d` ക്ലാസുകളുടെ എണ്ണത്തെ സൂചിപ്പിക്കുന്നു. ഒരു ``QuantumCircuit``ൽ നിന്നുള്ള സാമ്പിൾ ഓട്ടോമാറ്റിക്കായി ഒരു പ്രോബബിലിറ്റി വിതരണത്തിന് കാരണമാകുന്നു, മാത്രമല്ല അളന്ന ബിറ്റ്സ്ട്രിംഗുകളിൽ നിന്ന് വ്യത്യസ്ത ക്ലാസുകളിലേക്കുള്ള മാപ്പിംഗ് ഞമ്മൾ നിർവചിക്കേണ്ടതുണ്ട്. ബൈനറി ക്ലാസ്സിഫിക്കേഷനിനായി ഞമ്മൾ പാരിറ്റി മാപ്പിംഗ് ഉപയോഗിക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:471
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``CircuitQNN`` ഉള്ള ``NeuralNetworkClassifier`` ഒരു പ്രത്യേക വകഭേദമാണ് ``VQC``. ബിറ്റ്സ്ട്രിംഗിൽ നിന്ന് ക്ലാസ്സിഫിക്കേഷനിലേക്ക് മാപ്പ് ചെയ്യുന്നതിന് ഇത് ഒരു പാരിറ്റി മാപ്പിംഗ് (അല്ലെങ്കിൽ ഒന്നിലധികം ക്ലാസുകളിലേക്കുള്ള വിപുലീകരണങ്ങൾക്ക്) പ്രയോഗിക്കുന്നു, ഇത് പ്രോബബിലിറ്റി വെക്റ്ററിന് കാരണമാകുന്നു, ഇത് വൻ-ഹോട്ട് എൻ‌കോഡുചെയ്‌ത (one-hot encoded) ഫലമായി വ്യാഖ്യാനിക്കപ്പെടുന്നു. സ്ഥിരസ്ഥിതിയായി, ഇത് ഒരു ഹോട്ട് എൻ‌കോഡുചെയ്‌ത ഫോർ‌മാറ്റിൽ‌ ലേബലുകൾ‌ പ്രതീക്ഷിക്കുന്ന ``CrossEntropyLoss`` ഫംഗ്ഷൻ‌ പ്രയോഗിക്കുന്നു, മാത്രമല്ല ഇത് അതേ ഫോർ‌മാറ്റിലേക്ക് തന്നെ പ്രവചനങ്ങൾ‌ നൽ‌കുകയും ചെയ്യുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:586
msgid "Regression"
msgstr ""

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:588
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "ഇനിപ്പറയുന്ന അൽ‌ഗോരിതം വിശദീകരിക്കുന്നതിന് ഞമ്മൾ ഒരു ലളിതമായ റിഗ്രഷൻ ഡാറ്റാസെറ്റ് തയ്യാറാക്കുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:631
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "ഇനിപ്പറയുന്നവയിൽ :math:`[-1, +1]` എന്ന വാല്യു നൽകുന്ന ഒരു ``OpflowQNN`` ഉപയോഗിച്ച് റിഗ്രഷൻ ഞമ്മൾ പരിമിതപ്പെടുത്തുന്നു. ``CircuitQNN`` അടിസ്ഥാനമാക്കി കൂടുതൽ‌ സങ്കീർ‌ണ്ണവും മൾ‌ട്ടി-ഡൈമെൻ‌ഷനലുമായ മോഡലുകളും നിർമ്മിക്കാൻ‌ കഴിയും, പക്ഷേ അത് ഈ ട്യൂട്ടോറിയലിന്റെ വ്യാപ്തി കവിയുന്നു."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:754
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "വേരിയേഷൻൽ ക്വാണ്ടം റിഗ്രസർ (``VQR``) ഉപയോഗിച്ചുള്ള റിഗ്രഷൻ"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:756
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "ക്ലാസ്സിഫിക്കേഷനിനായുള്ള ``VQC``ക്ക് സമാനമായി, ``VQR`` എന്നത് ``OpflowQNN`` ഉള്ള ``NeuralNetworkRegressor`` ഒരു പ്രത്യേക വകഭേദമാണ്. സ്ഥിരസ്ഥിതിയായി ഇത് പ്രവചനങ്ങളും ടാർഗെറ്റുകളും തമ്മിലുള്ള ശരാശരി സ്ക്വയർഡ് ഇറർ (mean squared error) കുറയ്ക്കുന്നതിന് ``L2Loss`` ഫംഗ്ഷനെ പരിഗണിക്കുന്നു."

