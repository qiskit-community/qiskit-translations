msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 18:01+0000\n"
"PO-Revision-Date: 2022-06-29 18:29\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: ko_KR\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__ 에서 생성되었다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "신경망 분류기 & 회귀기"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "이 튜토리얼에서는 ``NeuralNetworkClassifier`` 와 ``NeuralNetworkRegressor`` 가 어떻게 사용되는지를 보여준다. 두 가지 모두 (양자) ``NeuralNetwork`` 을 입력하고 이를 특정한 문맥에서 활용한다. 두 가지 모두 편의상 사전 구성된 Variational Quantum Classifier (``VQC``) 와 Variational Quantum Regressor (``VQR``) 도 제공한다. 이 튜토리얼은 다음과 같이 구성된다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`분류 <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "``OpflowQNN`` 를 이용한 분류"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Classification with a ``CircuitQNN``"
msgstr "``CircuitQNN`` 를 이용한 분류"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:484
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "변분 양자분류기 (``VQC``, Variational Quantum Classifier)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`회귀 <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:649
msgid "Regression with an ``OpflowQNN``"
msgstr "``OpflowQNN`` 을 통한 회귀"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "변분 양자회귀기 (``VQR``, Variational Quantum Regressor)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "분류"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "다음 알고리즘을 설명하기 위해 간단한 분류 데이터 셋을 준비한다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "``OpflowQNN`` 를 이용한 분류"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "먼저 ``OpflowQNN`` 가 어떻게 ``NeuralNetworkClassifier`` 에서 분류하는데 사용될 수 있는지 살펴보자. 이런 맥락에서 ``OpflowQNN`` 은 :math:`[-1, +1]` 에서 1차원 출력을 반환할 것으로 예상된다. 이는 이진 분류에서만 작동하며 두 클래스를 :math:`\\{-1, +1\\}` 에 지정한다. 편의상, feature map과 ansatz를 통해 정의된 ``OpflowQNN`` 의 특별한 유형인 ``TwoLayerQNN`` 을 사용한다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:181
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "``callback_graph`` 라는 콜백 함수를 추가할 것이다. 이 함수는 최적화 단계가 반복될 때마다 호출되며 두 개의 매개변수(현재 가중치와 해당 가중치에 대한 최적화 시키려는 목적 함수의 값)가 전달된다. 목적 함수의 값을 배열에 추가함으로써 반복 횟수 대비 목적 함수의 값을 그래프로 출력하고 반복적으로 해당 그래프를 갱신할 수 있게 한다. 그러나 이 외에도 콜백 함수 및 함수로 전달되는 두 개의 매개변수를 이용해 원하는 동작은 무엇이든 할 수 있다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:311
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "다음으로 우리는 어떻게 ``CircuitQNN`` 이 ``NeuralNetworkClassifier`` 에서 분류 문제에 사용될 수 있는지 알아볼 것이다. 여기서 ``CircuitQNN`` 이라 하면 :math:`d` - 차원 확률 벡터를 출력으로 반환하며, :math:`d` 는 카테고리(class)의 수에 해당한다. ``QuantumCircuit`` 을 통해 표본추출을 하면 자동적으로 확률 분포를 생성되기 때문에 우리는 그저 측정된 비트열에서 다른 카테고리로 이어지는 매핑을 정의하면 된다. 이진 분류 문제의 경우 패리티 매핑이 사용된다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:486
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` 는 ``CircuitQNN`` 와 마찬가지로 ``NeuralNetworkClassifier`` 의 특별한 변종이다. 이는 비트열에서 분류로의 매핑을 위한 패리티 매핑(또는 여러 클래스들의 확장)을 제공하는데, 이는 확률 벡터를 생성하며 원-핫 인코딩으로써 해석된다. 기본적으로 이는 원-핫 인코딩된 형식으로 지정된 레이블을 예상하는 ``CrossEntropyLoss`` 기능을 적용하여 해당 형식으로 예측 결과를 반환한다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:606
msgid "Regression"
msgstr "회귀"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:608
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "다음 알고리즘을 설명하기 위해 간단한 회귀 데이터셋을 준비한다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:651
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "여기서는 :math:`[-1, +1]` 의 값을 반환하는 ``OpflowQNN`` 를 통한 회귀로 케이스를 제한한다. ``CircuitQNN`` 을 기반으로 하여 보다 복잡한 다차원 모델을 구성할 수도 있지만 이 튜토리얼의 범위에서 벗어나기 때문에 다루지 않는다."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:782
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Variational Quantum Regressor (``VQR``) 를 이용한 회귀"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:784
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "분류에서 ``VQC`` 와 유사하게, ``VQR`` 은 ``OpflowQNN`` 와 더불어 ``NeuralNetworkRegressor`` 의 특별한 변종이다. 기본적으로  ``L2Loss`` 함수를 고려하여 예측과 목표 사이의 평균 제곱 오차를 최소화한다."

