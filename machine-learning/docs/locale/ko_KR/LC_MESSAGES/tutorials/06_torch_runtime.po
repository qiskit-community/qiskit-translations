msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-08-11 22:28\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/06_torch_runtime.po\n"
"X-Crowdin-File-ID: 9719\n"
"Language: ko_KR\n"

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "This page was generated from `docs/tutorials/06_torch_runtime.ipynb`__."
msgstr "이 페이지는 \"docs/tutorials/06_torch_runtime.ipynb\" 에서 생성되었다."

#: ../../tutorials/06_torch_runtime.ipynb:9
msgid "Torch Runtime"
msgstr "Torch Runtime"

#: ../../tutorials/06_torch_runtime.ipynb:11
msgid "In this tutorial, we introduce Torch Runtime, and show how to use it via the ``TorchRuntimeClient`` class in Qiskit Machine Learning. Torch Runtime leverages Qiskit Runtime for hybrid quantum-classical machine learning based on a PyTorch ``Module``. It allows training models or predicting the outputs with trained models significantly faster. We show how to use Torch Runtime with two simple examples for regression and classification tasks in the following."
msgstr "본 튜토리얼에서는 Torch Runtime을 소개하고, Qiskit Machine Learning 에서 ` ` TorchRuntimeClient \" 클래스를 통해 이를 사용하는 방법을 설명한다. 토치 런타임은 PyTorch ` ` 모듈 `을 기반으로 하이브리드 퀀텀 클래식 머신 러닝을 위한 Qiskit 런타임을 활용하며 훈련 모델을 지원하거나 훈련된 모델의 출력을 훨씬 빠르게 예측할 수 있다. 다음의 회귀 및 분류 태스크에 대해 간단한 두 가지 예제를 사용하여 Torch Runtime을 사용하는 방법을 설명한다."

#: ../../tutorials/06_torch_runtime.ipynb:23
msgid "1. Regression"
msgstr "1. 회귀"

#: ../../tutorials/06_torch_runtime.ipynb:25
msgid "First, we show how to use Torch Runtime via ``TorchRuntimeClient`` using the simple regression example. In the example, we will perform a regression task on a randomly generated dataset following a sine wave."
msgstr "먼저, ``TorchRuntimeClient`` 를 이용하여 Torch Runtime을 사용하는 방법을 간단한 회귀 분석 예제로 설명한다. 이 예제에서는 사인파(sine wave)를 따라 무작위로 생성된 데이터 세트에 회귀 분석 작업을 수행한다."

#: ../../tutorials/06_torch_runtime.ipynb:99
msgid "``TorchRuntimeClient`` requires a PyTorch ``DataLoader`` as an input for training/predicting. For that purpose, we create a custom torch dataset class."
msgstr "``TorchRuntimeClient`는 PyTorch ``DataLoader``를 학습/예측의 입력으로 요구한다. 이를 위해, 사용자 정의 토치 데이터 세트 클래스를 생성한다."

#: ../../tutorials/06_torch_runtime.ipynb:146
msgid "Create an instance of ``TorchConnector`` to wrap a QNN model and be able to use pytorch to train the model, then set up an optimizer and a loss function as usual."
msgstr "``TorchConnector`` 의 인스턴스를 생성하여 QNN 모델을 감싸고 pytorch로 해당 모델을 학습시킬 수 있도록 하며, 최적화 프로그램과 손실 함수를 일반적인 경우와 같이 설정한다."

#: ../../tutorials/06_torch_runtime.ipynb:234
msgid "Load a provider and specify a backend for the runtime service."
msgstr "공급자를 로드하고 런타임 서비스의 백엔드를 지정한다."

#: ../../tutorials/06_torch_runtime.ipynb:261
msgid "Create a Torch Runtime Client instance with the model, the optimizer, and other configurations."
msgstr "모델, 최적화 및 기타 구성을 사용하여 Torch Runtime Client 인스턴스를 생성한다."

#: ../../tutorials/06_torch_runtime.ipynb:290
#: ../../tutorials/06_torch_runtime.ipynb:875
msgid "Call ``fit()`` to train the model"
msgstr "모델을 훈련시키기 위해 ``fit()`` 을 호출한다."

#: ../../tutorials/06_torch_runtime.ipynb:292
msgid "Call the ``fit`` method in ``TorchRuntimeClient`` with the data loader to train the model."
msgstr "모델을 훈련시키기 위해 데이터 로더를 이용해 ``TorchRuntimeClient``에 ``fit`` 메소드를 호출한다."

#: ../../tutorials/06_torch_runtime.ipynb:313
msgid "You can access training result information by querying properties of the ``fit_result`` variable, that is an instance of the ``TorchRuntimeResult`` class. Also, model’s parameters in ``TorchRuntimeClient`` are updated with trained ones."
msgstr "```fit_result`` 변수의 특성을 쿼리하여 학습 결과를 볼 수 있으며, 이는 ``TorchRuntimeClient`` 클래스의 인스턴스이다. 또한, ``TorchRuntimeClient``에서 모델의 매개변수는 학습된 것으로 업데이트된다."

#: ../../tutorials/06_torch_runtime.ipynb:366
msgid "You can also query the ``train_history`` property, which is a list of dictionaries, each per epoch. In a dictionary you can find properties like: - ``epoch``, epoch index - ``loss``, loss value at this epoch - ``forward_time``, time spent in the forward pass, in seconds - ``backward_time``, time spent in the backward pass, in seconds - ``epoch_time``, epoch time, in seconds.\""
msgstr "또한 각 epoch마다 사전 목록인 ``train_history`` 속성도 쿼리할 수 있다. 사전에서는 -``epoch``, epoch 인덱스 -``loss``, loss 값 -``forward_time``, forward pass에 소요된 시간 - ``backward_time``, backward pass에 소요된 시간 - ``epoch_time``와 같은 특성을 찾을 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:378
msgid "Training with validation"
msgstr "검증을 이용하여 학습"

#: ../../tutorials/06_torch_runtime.ipynb:380
msgid "Torch Runtime can also perform validation while training a model by passing a validation data loader to the ``fit`` method."
msgstr "Torch Runtime은 또한 검증 데이터 로더를 ``fit`` 메소드에 전달하여 모델을 학습시키는 동시에 검증을 수행할 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:471
msgid "You can query the ``val_history`` property, which is a list of dictionaries for the validation processes, each per epoch. In a dictionary you can find the same properties as ``train_history``."
msgstr "각 epoch마다 검증 과정의 사전 목록인 ``val_history`` 속성을 쿼리할 수 있다. 사전에서는 ``train_history``와 같은 특성을 찾을 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:483
#: ../../tutorials/06_torch_runtime.ipynb:946
msgid "Call ``predict()`` to perform prediction"
msgstr "예측을 수행하기 위해 ``predict()``을 호출한다."

#: ../../tutorials/06_torch_runtime.ipynb:485
msgid "Call the ``predict`` method in ``TorchRuntimeClient`` with the data loader to perform prediction on the passed data using the trained model."
msgstr "학습된 모델로 전달된 데이터에 대한 예측을 수행하기 위해 데이터 로더와 함께 ``TorchRuntimeClient``에서 ``predict`` 메소드를 호출한다."

#: ../../tutorials/06_torch_runtime.ipynb:573
msgid "A red line, blue dots, and a green line on the plot show the original function, the training data, and a function constructed out of the predicted values, respectively."
msgstr "그래프의 빨간색 선, 파란색 점 및 초록색 선은 각각 원래 함수, 학습 데이터, 그리고 예측 값으로 구성된 함수이다."

#: ../../tutorials/06_torch_runtime.ipynb:585
#: ../../tutorials/06_torch_runtime.ipynb:1053
msgid "Call ``score()`` to calculate a score"
msgstr "점수를 계산하기 위해 ``score()``을 호출한다."

#: ../../tutorials/06_torch_runtime.ipynb:587
msgid "Call the ``score`` method in ``TorchRuntimeClient`` with the data loader to calculate a score, for the trained model. You should pass either ``\"regression\\\"`` or ``\"classification\"`` to the ``score_func`` argument to use one of the pre-defined scores functions. Also, you can pass a custom scoring function defined as:"
msgstr "학습된 모델의 점수를 계산하기 위해 데이터 로더와 함께 ``TorchRuntimeClient``에 ``score`` 메소드를 호출한다. 사전 정의된 점수 함수 중 하나를 사용하려면 ``regression`` 또는 ``classification``를 ``score_func`` 인자로 전달해야 한다. 또한 다음과 같이 정의된 사용자 정의 점수 함수를 전달할 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:593
msgid "where: - ``model_output`` are the values predicted by the model, - ``target`` ground truth values."
msgstr "- ``model_output``은 모델에 의해 예측되는 값인 ``target``값이다."

#: ../../tutorials/06_torch_runtime.ipynb:595
msgid "Note that the result of the ``score`` call also contains predicted values that were calculated in the process of scoring the model."
msgstr "또한 ``score`` 의 결과에는 모델의 점수를 매기는 과정에서 계싼된 예측값이 포함되어 있다."

#: ../../tutorials/06_torch_runtime.ipynb:659
msgid "2. Classification"
msgstr "2. 분류"

#: ../../tutorials/06_torch_runtime.ipynb:661
msgid "Second, we show how to perform a simple classification task using Torch Runtime. In the example, we will perform binary classification on a randomly generated dataset."
msgstr "두 번째로, Torch Runtime을 사용하여 간단한 분류 작업을 수행하는 방법을 보여준다. 이 예제에서는 무작위로 생성된 데이터 세트에 대해 이진 분류를 수행할 것이다."

#: ../../tutorials/06_torch_runtime.ipynb:934
msgid "You can also query the ``train_history`` and the ``val_history`` properties."
msgstr "또한 ``train_hisotry``와 ``val_history``의 특성을 쿼리할 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:1041
msgid "The red circles indicate wrongly classified data points."
msgstr "빨간색 원은 잘못 분류된 데이터 포인트들을 나타낸다."

#: ../../tutorials/06_torch_runtime.ipynb:1064
msgid "In the example, we use the following custom scoring function to calculate a score. The scoring function returns 1, if the trained model successfully classified the input. Otherwise, it returns 0. An overall average is calculated in ``score()`` in the end."
msgstr "이 예제에서는 점수를 계산하기 위해 사용자 정의 점수 함수를 사용한다. 학습된 모델이 입력을 성공적으로 분류한 경우 점수 함수는 1을 반환하고, 그렇지 않으면 0을 반환한다. 전체 평균은 마지막에 ``score()``에서 계산된다."

#: ../../tutorials/06_torch_runtime.ipynb:1144
msgid "3. How to use hooks in training"
msgstr "3. 학습에 hook를 사용하는 방법"

#: ../../tutorials/06_torch_runtime.ipynb:1146
msgid "Qiskit Machine Learning offers a base hook class, ``HookBase``. It is a base class for a hook that is a set of callback functions used in the training process. Users can implement their own hook classes from this base class to handle complicated callback processes. This structure provides high flexibility in the callback processes. Each hook can implement 6 methods, and each method is called before/after the corresponding processes during training. The way they are called is demonstrated in the following snippet:"
msgstr "Qiskit Machine Learning은 기본 hook 클래스인 ``HookBase``를 제공한다. 이 클래스는 학습 과정에서 사용되는 콜백 함수 집합인 hook의 기본 클래스이다. 사용자는 이 기본 클래스에서 자신만의 hook 클래스를 구현하여 복잡한 콜백 과정을 처리할 수 있다. 이 구조는 콜백 과정에서 높은 유연성을 제공한다. 각 hook는 6개의 메소드를 구현할 수 있으며 각 메소드는 학습 중 해당 과정 이전/이후에 호출된다. 호출되는 방법은 다음 면에 설명되어 있다."

#: ../../tutorials/06_torch_runtime.ipynb:1163
msgid "In the hook methods, users can access ``TorchTrainer`` via ``self.trainer`` to access more context properties(e.g., model, current iteration, or config). The following snippet describes available properties that might be useful for a hook."
msgstr "Hook 메소드에서 사용자는 ``self.trainer``을 통해 ``TorchTrainer``를 통해 더 많은 컨텍스트 속성 (모델, 현재 반복, 구성 등) 에 접근할 수 있다. 다음면에서는 hook에 유용할 수 있는 사용 가능한 속성에 대해 설명한다."

#: ../../tutorials/06_torch_runtime.ipynb:1165
msgid "TorchTrainer has:"
msgstr "TorchTrainer는 다음을 가지고 있다:"

#: ../../tutorials/06_torch_runtime.ipynb:1167
msgid "``model``: A model to be trained."
msgstr "``model``: 학습할 모델."

#: ../../tutorials/06_torch_runtime.ipynb:1168
msgid "``optimizer``: An optimizer used for the training."
msgstr "``optimizer``: 학습에 사용될 최적화 도구."

#: ../../tutorials/06_torch_runtime.ipynb:1169
msgid "``loss_func``: A loss function for the training."
msgstr "``loss_func``: 학습을 위한 손실 함수."

#: ../../tutorials/06_torch_runtime.ipynb:1170
msgid "``train_loader``: A PyTorch data loader object containing a training dataset."
msgstr "``train_loader``: 학습 데이터 세트를 포함하는 PyTorch 데이터 로더 객체."

#: ../../tutorials/06_torch_runtime.ipynb:1171
msgid "``val_loader``: A PyTorch data loader object containing a validation dataset."
msgstr "``val_loader``: 검증 데이터 세트를 포함하는 PyTorch 데이터 로더 객체."

#: ../../tutorials/06_torch_runtime.ipynb:1172
msgid "``max_epoch``: The maximum number of training epochs."
msgstr "``max_epoch``: 최대 학습 횟수."

#: ../../tutorials/06_torch_runtime.ipynb:1173
msgid "``log_period``: A logging period for a train history and a validation history. By default, there will be logs every epoch (``log_period``\\ =1)."
msgstr "``log_period``: 학습 기록과 검증 기록을 위한 로깅 시간. 기본값으로 모든 epoch (``log_period``=1) 에 로그가 있다."

#: ../../tutorials/06_torch_runtime.ipynb:1174
msgid "``start_epoch``: An initial epoch for warm-start training. By default, 0."
msgstr "``start_epoch``: 웜 스타트 훈련의 최초 epoch. 기본값은 0이다."

#: ../../tutorials/06_torch_runtime.ipynb:1175
msgid "``epoch``: The current number of epochs."
msgstr "``epoch``: 현재 epoch 수."

#: ../../tutorials/06_torch_runtime.ipynb:1176
msgid "``global_step``: The current number of steps."
msgstr "``global_step``: 현재 단계 수."

#: ../../tutorials/06_torch_runtime.ipynb:1177
msgid "``train_logger``: A logger for a training history. Use ``train_logger.metrics`` to access a list of logs. A log for each epoch is stored as a dictionary similar to ``TorchRuntimeResult.train_history``"
msgstr "``train_logger``: 학습 기록을 위한 로거. 로그 목록에 액세스하기 위해 ``train_logger.metrics``를 사용한다. 각 epoch에 대한 로그는 ``TorchRuntimeResult.train_history``와 비슷한 사전으로 저장된다."

#: ../../tutorials/06_torch_runtime.ipynb:1178
msgid "``val_logger``: A logger for a validation history. Logs are stored in the same way as train_logger."
msgstr "``val_logger``: 검증 기록을 위한 로거. 로그는 train_logger와 동일한 방법으로 저장된다."

#: ../../tutorials/06_torch_runtime.ipynb:1180
msgid "Users can pass a single hook instance or a list of hook instances to ``hooks`` argument."
msgstr "사용자는 단일 hook 인스턴스 또는 hook 인스턴스 목록을 ``hook`` 인자로 전달할 수 있다."

#: ../../tutorials/06_torch_runtime.ipynb:1191
msgid "The following example is a hook for early stopping. If the current loss is smaller than the threshold after an epoch, the training will be terminated."
msgstr "다음 예제는 early stopping을 위한 hook이다. 만약 현재 손실이 epoch 다음의 임계값보다 작으면 학습이 종료된다."

#: ../../tutorials/06_torch_runtime.ipynb:1305
msgid "As we can see, training was interrupted after the first epoch despite we set the number of epochs to 5 in the ``TorchRuntimeClient`` configuration."
msgstr "``TorchRuntimeClient`` 구성에서 epoch 수를 5로 설정했음에도 불구하고 첫 번째 epoch 이후에 학습이 중단된 것을 볼 수 있다."

