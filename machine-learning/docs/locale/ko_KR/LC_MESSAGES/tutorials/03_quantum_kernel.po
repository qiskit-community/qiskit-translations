msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-08 17:14-0400\n"
"PO-Revision-Date: 2021-07-09 03:52\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/03_quantum_kernel.po\n"
"X-Crowdin-File-ID: 9632\n"
"Language: ko_KR\n"

#: ../../tutorials/03_quantum_kernel.ipynb:13
msgid "Run interactively in jupyter notebook."
msgstr "Jupyter 노트북에서 대화식으로 실행하라."

#: ../../tutorials/03_quantum_kernel.ipynb:9
msgid "Quantum Kernel Machine Learning"
msgstr "양자 커널 기계 학습"

#: ../../tutorials/03_quantum_kernel.ipynb:11
msgid "The general task of machine learning is to find and study patterns in data. For many datasets, the datapoints are better understood in a higher dimensional feature space, through the use of a kernel function: :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` where :math:`k` is the kernel function, :math:`\\vec{x}_i, \\vec{x}_j` are :math:`n` dimensional inputs, :math:`f` is a map from :math:`n`-dimension to :math:`m`-dimension space and :math:`\\langle a,b \\rangle` denotes the dot product. When considering finite data, a kernel function can be represented as a matrix: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`."
msgstr "일반적으로 기계학습은 데이터에서 패턴을 찾고 학습하는 것이다. 많은 양의 데이터에서 데이터 포인트들은 더 높은 차원의 특징 공간에서 더 잘 이해되어질 수 있는데, 이는 다음과 같은 커널 함수를 사용함으로써 가능해진다:  :math:`k(\\vec{x}_i, \\vec{x}_j) = \\langle f(\\vec{x}_i), f(\\vec{x}_j) \\rangle` 에서,  :math:`k` 는 커널 함수, :math:`\\vec{x}_i, \\vec{x}_j` 은 :math:`n` 차원의 입력, :math:`f` 는 :math:`n` 차원으로부터 :math:`m` 차원 공간으로의 맵, 그리고 :math:`\\langle a,b \\rangle` 는 내적을 의미한다. 유한한 데이터를 고려할 때, 커널 함수는 다음과 같은 행렬로서 표현될 수 있다: :math:`K_{ij} = k(\\vec{x}_i,\\vec{x}_j)`"

#: ../../tutorials/03_quantum_kernel.ipynb:14
msgid "In quantum kernel machine learning, a quantum feature map :math:`\\phi(\\vec{x})` is used to map a classical feature vector :math:`\\vec{x}` to a quantum Hilbert space, :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|`, such that :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}`. See `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ for more details."
msgstr "양자 커널 기계학습에서, 양자 특징 맵 :math:`\\phi(\\vec{x})` 은 고전적인 특징 벡터 :math:`\\vec{x}` 를 양자 힐베르트 공간 :math:`| \\phi(\\vec{x})\\rangle \\langle \\phi(\\vec{x})|` 으로 매핑하는데 쓰일 수 있는데, 예를 들면 :math:`K_{ij} = \\left| \\langle \\phi^\\dagger(\\vec{x}_j)| \\phi(\\vec{x}_i) \\rangle \\right|^{2}` 와 같다. 더 자세한 사항은 `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ 을 참조하라."

#: ../../tutorials/03_quantum_kernel.ipynb:16
msgid "In this notebook, we use ``qiskit`` to calculate a kernel matrix using a quantum feature map, then use this kernel matrix in ``scikit-learn`` classification and clustering algorithms."
msgstr "이 노트북 예제에서는 양자 특성 맵을 사용하여 커널 행렬을 계산하기 위해 ``qiskit`` 을 사용하였고, ``scikit-learn`` 분류 및 군집화 알고리즘에서 앞서 계산한 커널 행렬을 사용한다."

#: ../../tutorials/03_quantum_kernel.ipynb:53
msgid "Classification"
msgstr "분류"

#: ../../tutorials/03_quantum_kernel.ipynb:55
msgid "For our classification example, we will use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification (``svc``) algorithm."
msgstr "이 분류 예제에서는 `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ 에 설명된 바와 같이 *ad hoc dataset* 을 다시 사용할 것이고, ``scikit-learn`` `support vector machine <https://scikit-learn.org/stable/modules/svm.html>`__ classification(``svc``) 알고리즘을 사용할 것이다."

#: ../../tutorials/03_quantum_kernel.ipynb:111
msgid "With our training and testing datasets ready, we set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the ``BasicAer`` ``qasm_simulator`` using 1024 shots."
msgstr "학습 데이터와 테스트 데이터를 준비하고, ``QuantumKernel`` 클래스를 설정한다. 이는 `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ 과 1024개의 샷을 사용하는 ``BasicAer`` ``qasm_simulator`` 를 통해 커널 행렬을 계산하기 위함이다."

#: ../../tutorials/03_quantum_kernel.ipynb:138
msgid "The ``scikit-learn`` ``svc`` algorithm allows us to define a `custom kernel <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. We can do either of these using the ``QuantumKernel`` class in ``qiskit``."
msgstr "``scikit-learn`` ``svc`` 알고리즘을 통해 `사용자 정의 커널 <https://scikit-learn.org/stable/modules/svm.html#custom-kernels>`__ 을 두 가지 방법으로 정의할 수 있는데, 그 하나는 커널을 호출 가능한 함수로 제공하는 방법이고 다른 하나는 커널 행렬을 미리 계산하는 방법이다. ``qiskit`` 의 ``QuantumKernel`` 클래스를 사용하여 이들 중 하나를 수행할 수 있다."

#: ../../tutorials/03_quantum_kernel.ipynb:140
msgid "The following code gives the kernel as a callable function:"
msgstr "다음 코드는 커널을 호출 가능한 함수로 제공한다."

#: ../../tutorials/03_quantum_kernel.ipynb:184
msgid "The following code precomputes and plots the training and testing kernel matrices before providing them to the ``scikit-learn`` ``svc`` algorithm:"
msgstr "다음 코드는 훈련 및 테스트 커널 행렬을 사전 계산하고 플로팅하여 ``scikit-learn`` ``svc`` 알고리즘에 제공한다."

#: ../../tutorials/03_quantum_kernel.ipynb:250
msgid "``qiskit`` also contains the ``qsvc`` class that extends the ``sklearn svc`` class, that can be used as follows:"
msgstr "``qiskit`` 은 또한 ``sklearn svc`` 를 상속한 ``qsvc`` 클래스를 포함하고 있으며 다음과 같이 사용할 수 있다."

#: ../../tutorials/03_quantum_kernel.ipynb:295
msgid "Clustering"
msgstr "군집화"

#: ../../tutorials/03_quantum_kernel.ipynb:297
msgid "For our clustering example, we will again use the *ad hoc dataset* as described in `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__, and the ``scikit-learn`` ``spectral`` clustering algorithm."
msgstr "우리의 군집화 예제에서는 `Supervised learning with quantum enhanced feature spaces <https://arxiv.org/pdf/1804.11326.pdf>`__ 에 설명된 바와 같이 *ad hoc dataset* 를 다시 사용할 것이고, ``scikit-learn`` ``spectral`` 군집화 알고리즘을 사용할 것이다."

#: ../../tutorials/03_quantum_kernel.ipynb:299
msgid "We will regenerate the dataset with a larger gap between the two classes, and as clustering is an unsupervised machine learning task, we don’t need a test sample."
msgstr "두 클래스 간에 큰 간격을 두고 데이터셋을 다시 생성하고, 군집화는 비지도학습 머신러닝 태스크이기 때문에 테스트 샘플은 준비하지 않는다."

#: ../../tutorials/03_quantum_kernel.ipynb:350
msgid "We again set up the ``QuantumKernel`` class to calculate a kernel matrix using the `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__, and the BasicAer ``qasm_simulator`` using 1024 shots."
msgstr "훈련 데이터 셋과 실험 데이터 셋을 준비하고, ``QuantumKernel`` 클래스를 다시 셋업한다. 이는 `ZZFeatureMap <https://qiskit.org/documentation/stubs/qiskit.circuit.library.ZZFeatureMap.html>`__ 과 1024개의 샷을 사용하는 BasicAer ``qasm_simulator`` 를 통해 커널 행렬을 계산하기 위함이다."

#: ../../tutorials/03_quantum_kernel.ipynb:377
msgid "The scikit-learn spectral clustering algorithm allows us to define a [custom kernel] in two ways: by providing the kernel as a callable function or by precomputing the kernel matrix. Using the QuantumKernel class in qiskit, we can only use the latter."
msgstr "scikit-learn 스펙트럼 클러스터링 알고리즘을 통해 [커스텀 커널] 을 두 가지 방법으로 정의할 수 있는데, 그 하나는 커널을 호출 가능한 함수로 제공하는 방법이고 다른 하나는 커널 매트릭스를 미리 계산하는 방법이다. qiskit의 QuantumKernel 클래스를 사용하면 두 번째 방법만 사용할 수 있다."

#: ../../tutorials/03_quantum_kernel.ipynb:379
msgid "The following code precomputes and plots the kernel matrices before providing it to the scikit-learn spectral clustering algorithm, and scoring the labels using normalized mutual information, since we a priori know the class labels."
msgstr ""

#: ../../tutorials/03_quantum_kernel.ipynb:439
msgid "``scikit-learn`` has other algorithms that can use a precomputed kernel matrix, here are a few:"
msgstr "``scikit-learn`` 은 미리 계산된 커널 행렬을 사용할 수 있는 다른 알고리즘을 가지고 있는데, 이것들이 그 중 일부이다."

#: ../../tutorials/03_quantum_kernel.ipynb:441
msgid "`Agglomerative clustering <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"
msgstr "`응집 군집화 <https://scikit-learn.org/stable/modules/generated/sklearn.cluster.AgglomerativeClustering.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:442
msgid "`Support vector regression <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"
msgstr "`서포트 벡터 회귀 <https://scikit-learn.org/stable/modules/generated/sklearn.svm.SVR.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:443
msgid "`Ridge regression <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"
msgstr "`Ridge 회귀 <https://scikit-learn.org/stable/modules/generated/sklearn.kernel_ridge.KernelRidge.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:444
msgid "`Gaussian process regression <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"
msgstr "`Gaussian 과정 회귀 <https://scikit-learn.org/stable/modules/gaussian_process.html>`__"

#: ../../tutorials/03_quantum_kernel.ipynb:445
msgid "`Principal component analysis <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"
msgstr "`주성분 분석 <https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.KernelPCA.html>`__"

