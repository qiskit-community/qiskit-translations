msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-09 10:21+0000\n"
"PO-Revision-Date: 2023-05-09 11:08\n"
"Last-Translator: \n"
"Language: ko\n"
"Language-Team: Korean\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/08_quantum_kernel_trainer.ipynb`__ 에서 생성되었다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "기계 학습 응용프로그램(Application) 을 위한 양자 커널 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `\"Covariant quantum kernels for data with group structure.\" <https://arxiv.org/abs/2105.03406>`__"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "양자 커널 학습의 시작점은 ``QuantumKernelTrainer`` 클래스이다. 기본 단계들은 다음과 같다:"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "데이터셋 준비"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "양자 특징 맵(feature map) 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up an instance of ``TrainableKernel`` and ``QuantumKernelTrainer`` objects"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "``QuantumKernelTrainer.fit`` 메소드를 활용하여 주어진 데이터셋에서 커널 매개변수들을 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "학습된 양자 커널을 기계학습 모델로 전달"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "로컬, 외부 및 Qiskit 패키지 가져오기 & 최적화를 위한 콜백(callback) 클래스 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:96
msgid "Prepare the Dataset"
msgstr "데이터셋 준비"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:98
msgid "In this guide, we will use Qiskit Machine Learning's ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:186
msgid "Define the Quantum Feature Map"
msgstr "양자 특징 맵(Quantum Feature Map) 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:188
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "다음으로, 고전적인 데이터를 양자 상태 공간으로 인코딩하는 양자 특징 맵을 설정한다. 훈련 가능한 회전 레이어를 설정하기 위해 ``QuantumCircuit`` 을 사용하고 입력 데이터를 표현하기 위해 ``Qiskit`` 에서 ``ZZFeatureMap`` 을 사용한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:262
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "양자 커널 및 Quantum 커널 Trainer 설정"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:264
msgid "To train the quantum kernel, we will use an instance of ``TrainableFidelityQuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:266
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "커널 손실 함수인 ``SVCLoss`` 를 ``QuantumKernelTrainer`` 의 입력으로 선택하여 양자 커널 정렬(Alignment) 을 사용하여 훈련한다. 이는 Qiskit이 제공하는 손실값이므로 ``svc_loss`` 문자열을 사용할 수 있으며 손실값을 문자열로 전달할 때는 기본 설정이 사용됨에 유의한다. 사용자 지정 설정의 경우 원하는 옵션을 사용하여 명시적으로 인스턴스화하고 ``KernelLoss`` 객체를 ``QuantumKernelTrainer`` 에 전달한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:268
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "옵티마이저로 SPSA를 선택하고 ``initial_point`` 인자를 사용하여 학습할 수 있는 매개변수를 초기화한다. 참고: ``initial_point`` 인자로 전달된 목록의 길이는 feature map에 있는 학습 가능한 매개변수의 수와 같아야 한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:300
msgid "Train the Quantum Kernel"
msgstr "양자 커널 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:302
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "양자 커널을 학습하기 위해 데이터 세트 (샘플과 레이블) 에 ``QuantumKernelTrainer`` 의 ``fit`` 함수를 호출한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:304
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``TrainableKernel`` object with optimal values bound to the feature map"
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:375
msgid "Fit and Test the Model"
msgstr "모델 적합(fit) 및 모델 테스트"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:377
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit's ``QSVC`` for classification."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:434
msgid "Visualize the Kernel Training Process"
msgstr "커널 학습 과정 시각화"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:436
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches high test accuracy on this dataset with our choice of inputs."
msgstr ""

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:438
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "또한 학습 샘플들 간의 유사성 측도인 최종 커널 행렬을 표시할 수 있다."

