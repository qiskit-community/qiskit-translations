msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-29 18:01+0000\n"
"PO-Revision-Date: 2022-06-29 18:32\n"
"Last-Translator: \n"
"Language-Team: Korean\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: ko\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/08_quantum_kernel_trainer.po\n"
"X-Crowdin-File-ID: 9723\n"
"Language: ko_KR\n"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "This page was generated from `docs/tutorials/08_quantum_kernel_trainer.ipynb`__."
msgstr "이 페이지는 `docs/tutorials/08_quantum_kernel_trainer.ipynb`__ 에서 생성되었다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:9
msgid "Quantum Kernel Training for Machine Learning Applications"
msgstr "기계 학습 응용프로그램(Application) 을 위한 양자 커널 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:11
msgid "In this tutorial, we will train a quantum kernel on a labeled dataset for a machine learning application. To illustrate the basic steps, we will use Quantum Kernel Alignment (QKA) for a binary classification task. QKA is a technique that iteratively adapts a parametrized quantum kernel to a dataset while converging to the maximum SVM margin. More information about QKA can be found in the preprint, `“Covariant quantum kernels for data with group structure.” <https://arxiv.org/abs/2105.03406>`__"
msgstr "본 튜토리얼에서는, 기계학습 응용을 위해 레이블이 지정된 데이터셋에서 양자 커널을 학습시킬 것이다. 기본 단계들을 설명하기 위해,우리는 이진 분류 태스크에 대해 양자 커널 정렬 (Quantum Kernel Alignment, QKA)을 사용할 것이다. QKA는 최대 SVM (서포트 벡터 머신) 여백으로 수렴하면서 매개변수화된 양자 커널을 데이터셋에 반복적으로 적응시키는 기술이다. QKA에 대한 자세한 정보는 `“Covariant quantum kernels for data with group structure.” <https://arxiv.org/abs/2105.03406>`__ 에서 찾을 수 있다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:13
msgid "The entry point to training a quantum kernel is the ``QuantumKernelTrainer`` class. The basic steps are:"
msgstr "양자 커널 학습의 시작점은 ``QuantumKernelTrainer`` 클래스이다. 기본 단계들은 다음과 같다:"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:15
msgid "Prepare the dataset"
msgstr "데이터셋 준비"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:16
msgid "Define the quantum feature map"
msgstr "양자 특징 맵(feature map) 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:17
msgid "Set up the ``QuantumKernel`` and ``QuantumKernelTrainer`` objects"
msgstr "``QuantumKernel`` 과 ``QuantumKernelTrainer`` 객체 설정"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:18
msgid "Use the ``QuantumKernelTrainer.fit`` method to train the kernel parameters on the dataset"
msgstr "``QuantumKernelTrainer.fit`` 메소드를 활용하여 주어진 데이터셋에서 커널 매개변수들을 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:19
msgid "Pass the trained quantum kernel to a machine learning model"
msgstr "학습된 양자 커널을 기계학습 모델로 전달"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:31
msgid "Import Local, External, and Qiskit Packages and define a callback class for our optimizer"
msgstr "로컬, 외부 및 Qiskit 패키지 가져오기 & 최적화를 위한 콜백(callback) 클래스 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:100
msgid "Prepare the Dataset"
msgstr "데이터셋 준비"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:102
msgid "In this guide, we will use Qiskit Machine Learning’s ``ad_hoc.py`` dataset to demonstrate the kernel training process. See the documentation `here <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__."
msgstr "이번에는 Qiskit Machine Learning의 ``ad_hoc.py`` 데이터 세트를 사용하여 커널 훈련 과정을 살펴보자. `이 <https://qiskit.org/documentation/machine-learning/stubs/qiskit_machine_learning.datasets.ad_hoc_data.html>`__ 문서를 참고한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:190
msgid "Define the Quantum Feature Map"
msgstr "양자 특징 맵(Quantum Feature Map) 정의"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:192
msgid "Next, we set up the quantum feature map, which encodes classical data into the quantum state space. Here, we use a ``QuantumCircuit`` to set up a trainable rotation layer and a ``ZZFeatureMap`` from ``Qiskit`` to represent the input data."
msgstr "다음으로, 고전적인 데이터를 양자 상태 공간으로 인코딩하는 양자 특징 맵을 설정한다. 훈련 가능한 회전 레이어를 설정하기 위해 ``QuantumCircuit`` 을 사용하고 입력 데이터를 표현하기 위해 ``Qiskit`` 에서 ``ZZFeatureMap`` 을 사용한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:266
msgid "Set Up the Quantum Kernel and Quantum Kernel Trainer"
msgstr "양자 커널 및 Quantum 커널 Trainer 설정"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:268
msgid "To train the quantum kernel, we need a ``QuantumKernel`` (holds the feature map and its parameters) and ``QuantumKernelTrainer`` (manages the training process)."
msgstr "양자 커널을 훈련시키기 위해서는 ``QuantumKernel`` (feature map과 해당 매개변수를 가지고 있음) 과 ``QuantumKernelTrainer`` (훈련 프로세스 관리) 가 필요하다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:270
msgid "We will train using the Quantum Kernel Alignment technique by selecting the kernel loss function, ``SVCLoss``, as input to the ``QuantumKernelTrainer``. Since this is a Qiskit-supported loss, we can use the string, ``\"svc_loss\"``; however, note that default settings are used when passing the loss as a string. For custom settings, instantiate explicitly with the desired options, and pass the ``KernelLoss`` object to the ``QuantumKernelTrainer``."
msgstr "커널 손실 함수인 ``SVCLoss`` 를 ``QuantumKernelTrainer`` 의 입력으로 선택하여 양자 커널 정렬(Alignment) 을 사용하여 훈련한다. 이는 Qiskit이 제공하는 손실값이므로 ``svc_loss`` 문자열을 사용할 수 있으며 손실값을 문자열로 전달할 때는 기본 설정이 사용됨에 유의한다. 사용자 지정 설정의 경우 원하는 옵션을 사용하여 명시적으로 인스턴스화하고 ``KernelLoss`` 객체를 ``QuantumKernelTrainer`` 에 전달한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:272
msgid "We will select SPSA as the optimizer and initialize the trainable parameter with the ``initial_point`` argument. Note: The length of the list passed as the ``initial_point`` argument must equal the number of trainable parameters in the feature map."
msgstr "옵티마이저로 SPSA를 선택하고 ``initial_point`` 인자를 사용하여 학습할 수 있는 매개변수를 초기화한다. 참고: ``initial_point`` 인자로 전달된 목록의 길이는 feature map에 있는 학습 가능한 매개변수의 수와 같아야 한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:307
msgid "Train the Quantum Kernel"
msgstr "양자 커널 학습"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:309
msgid "To train the quantum kernel on the dataset (samples and labels), we call the ``fit`` method of ``QuantumKernelTrainer``."
msgstr "양자 커널을 학습하기 위해 데이터 세트 (샘플과 레이블) 에 ``QuantumKernelTrainer`` 의 ``fit`` 함수를 호출한다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:311
msgid "The output of ``QuantumKernelTrainer.fit`` is a ``QuantumKernelTrainerResult`` object. The results object contains the following class fields: - ``optimal_parameters``: A dictionary containing {parameter: optimal value} pairs - ``optimal_point``: The optimal parameter value found in training - ``optimal_value``: The value of the loss function at the optimal point - ``optimizer_evals``: The number of evaluations performed by the optimizer - ``optimizer_time``: The amount of time taken to perform optimization - ``quantum_kernel``: A ``QuantumKernel`` object with optimal values bound to the feature map"
msgstr "``QuantumKernelTrainer.fit`` 의 출력값은 ``QuantumKernelTrainerResult`` 객체이다. 결과 객체는 다음과 같은 클래스 필드를 포함한다: - ``optimal_parameters``: {parameter: optimal value} 쌍을 포함하는 자료구조 - ``optimal_point``: 학습과정에서 발견되는 최적의 매개변수 값 - ``optimal_value``: 최적점에서의 손실 함수 값 - ``optimizer_evals``: 옵티마이저에서 수행되는 평가의 수 - ``optimizer_time``: 최적화를 수행하는데 소요되는 시간 - ``quantum_kernel``: feature map에 바인딩된 최적값을 갖는 ``QuantumKernel`` 객체"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:376
msgid "Fit and Test the Model"
msgstr "모델 적합(fit) 및 모델 테스트"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:378
msgid "We can pass the trained quantum kernel to a machine learning model, then fit the model and test on new data. Here, we will use Qiskit’s ``QSVC`` for classification."
msgstr "학습된 양자 커널을 기계 학습 모델에 전달한 후 모델에 적합(fit)시키고, 새로운 데이터를 사용하여 테스트할 수 있다. 여기서, 우리는 분류를 위해 Qiskit의 ``QSVC`` 를 사용할 것이다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:435
msgid "Visualize the Kernel Training Process"
msgstr "커널 학습 과정 시각화"

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:437
msgid "From the callback data, we can plot how the loss evolves during the training process. We see it converges rapidly and reaches 100% test accuracy on this dataset with our choice of inputs."
msgstr "콜백 데이터로부터 학습이 진행됨에 따라 손실이 어떻게 변화하는지 그릴 수 있다.  손실이 빠르게 수렴하며,  선택한 입력값들에 대해 이 데이터에서 테스트 정확도가 100%에 도달하는 것을 볼 수 있다."

#: ../../tutorials/08_quantum_kernel_trainer.ipynb:439
msgid "We can also display the final kernel matrix, which is a measure of similarity between the training samples."
msgstr "또한 학습 샘플들 간의 유사성 측도인 최종 커널 행렬을 표시할 수 있다."

