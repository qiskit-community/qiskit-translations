msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-11 21:47+0000\n"
"PO-Revision-Date: 2022-08-11 22:35\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.10.3\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/02_neural_network_classifier_and_regressor.po\n"
"X-Crowdin-File-ID: 9630\n"
"Language: vi_VN\n"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "This page was generated from `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."
msgstr "Trang này được tạo từ `docs/tutorials/02_neural_network_classifier_and_regressor.ipynb`__."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:9
msgid "Neural Network Classifier & Regressor"
msgstr "Bộ phân loại & hồi quy mạng thần kinh"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:11
msgid "In this tutorial we show how the ``NeuralNetworkClassifier`` and ``NeuralNetworkRegressor`` are used. Both take as an input a (Quantum) ``NeuralNetwork`` and leverage it in a specific context. In both cases we also provide a pre-configured variant for convenience, the Variational Quantum Classifier (``VQC``) and Variational Quantum Regressor (``VQR``). The tutorial is structured as follows:"
msgstr "Trong hướng dẫn này, chúng tôi đưa ra cách sử dụng ``NeuralNetworkClassifier`` và ``NeuralNetworkRegressor``. Cả hai đều lấy làm đầu vào cho ``NeuralNetwork`` (lượng tử) và tận dụng nó trong một bối cảnh cụ thể. Trong cả hai trường hợp, chúng tôi cũng cung cấp một biến thể được thiết lập trước để thuận tiện, Biến thể phân loại lượng tử (``VQC``) và Biến thể Hồi quy Lượng tử (`` VQR``). Hướng dẫn được cấu trúc như sau:"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:13
msgid "`Classification <#Classification>`__"
msgstr "`Phân loại <#Classification>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:15
msgid "Classification with an ``OpflowQNN``"
msgstr "Phân loại với ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:16
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:309
msgid "Classification with a ``CircuitQNN``"
msgstr "Phân loại với ``CircuitQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:17
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:484
msgid "Variational Quantum Classifier (``VQC``)"
msgstr "Biến thể Phân loại Lượng tử (``VQC``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:19
msgid "`Regression <#Regression>`__"
msgstr "`Hồi quy <#Regression>`__"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:21
#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:649
msgid "Regression with an ``OpflowQNN``"
msgstr "Hồi quy với một ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:22
msgid "Variational Quantum Regressor (``VQR``)"
msgstr "Biến thể Hồi quy Lượng tử (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:74
msgid "Classification"
msgstr "Phân loại"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:76
msgid "We prepare a simple classification dataset to illustrate the following algorithms."
msgstr "Chúng tôi chuẩn bị một tập dữ liệu phân loại đơn giản để minh họa các thuật toán sau đây."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:121
msgid "Classification with the an ``OpflowQNN``"
msgstr "Phân loại với ``OpflowQNN``"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:123
msgid "First we show how an ``OpflowQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``OpflowQNN`` is expected to return one-dimensional output in :math:`[-1, +1]`. This only works for binary classification and we assign the two classes to :math:`\\{-1, +1\\}`. For convenience, we use the ``TwoLayerQNN``, which is a special type of ``OpflowQNN`` defined via a feature map and an ansatz."
msgstr "Đầu tiên chúng ta cho thấy cách mà ``OpflowQNN`` có thể được sử dụng cho việc phân loại trong một ``NeuralNetworkClassifier``. Trong trường hợp này, ``OpflowQNN`` được trông đợi sẽ trả lại một đầu ra một chiều trong :math:`[-1, +1]`. Điều này chỉ đúng với sự phân loại nhị phân và chúng ta chỉ định hai lớp vào :math:`\\{-1, +1\\}`. Để tiện hơn, chúng ta sử dụng ``TwoLayerQNN``, là một loại đặc biệt của ``OpflowQNN`` được định nghĩa qua một ánh xạ tính năng và một ansatz."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:181
msgid "We will add a callback function called ``callback_graph``. This will be called for each iteration of the optimizer and will be passed two parameters: the current weights and the value of the objective function at those weights. For our function, we append the value of the objective function to an array so we can plot iteration versus objective function value and update the graph with each iteration. However, you can do whatever you want with a callback function as long as it gets the two parameters mentioned passed."
msgstr "Chúng tôi sẽ thêm một hàm callback có tên là ``callback_graph``. Điều này sẽ được gọi cho mỗi lần lặp lại của trình tối ưu hóa và sẽ được chuyển qua hai tham số: trọng số hiện tại và giá trị của hàm mục tiêu tại các trọng số đó. Đối với hàm, chúng tôi nối giá trị của hàm mục tiêu vào một mảng, có thể vẽ biểu đồ lặp lại so với giá trị hàm mục tiêu và cập nhật đồ thị với mỗi lần lặp. Tuy nhiên, bạn có thể làm bất cứ điều gì bạn muốn với một hàm callback miễn là nó lấy hai tham số đã được đề cập."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:311
msgid "Next we show how a ``CircuitQNN`` can be used for classification within a ``NeuralNetworkClassifier``. In this context, the ``CircuitQNN`` is expected to return :math:`d`-dimensional probability vector as output, where :math:`d` denotes the number of classes. Sampling from a ``QuantumCircuit`` automatically results in a probability distribution and we just need to define a mapping from the measured bitstrings to the different classes. For binary classification we use the parity mapping."
msgstr "Sau đó chúng ta chỉ ra cách mà một ``CircuitQNN`` được sử dụng cho việc phân loại trong ``NeuralNetworkClassifier``. Trong trường hợp này ``CircuitQNN`` được kỳ vọng sẽ trả lại một đầu ra là véc-tơ xác suất :math:`d` chiều, trong đó :math:`d` đại diện cho số lớp. Lấy mẫu từ ``QuantumCircuit`` tự động tạo ra thành sự phân phối xác suất và chúng ta chỉ cần định nghĩa một ánh xạ từ chuỗi bit đo được tới các lớp khác nhau. Chúng ta dùng ánh xạ chẵn lẻ cho sự phân loại nhị phân."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:486
msgid "The ``VQC`` is a special variant of the ``NeuralNetworkClassifier`` with a ``CircuitQNN``. It applies a parity mapping (or extensions to multiple classes) to map from the bitstring to the classification, which results in a probability vector, which is interpreted as a one-hot encoded result. By default, it applies this the ``CrossEntropyLoss`` function that expects labels given in one-hot encoded format and will return predictions in that format too."
msgstr "``VQC`` là một biến thể đặc biệt của ``NeuralNetworkClassifier`` với một ``CircuitQNN``. Nó áp dụng một ánh xạ chẵn lẻ (hoặc mở rộng cho nhiều lớp) để ánh xạ từ chuỗi bit đến phân loại, dẫn đến một véc-tơ xác suất, được hiểu là một kết quả one-hot được mã hóa. Theo mặc định, nó áp dụng cho hàm ``CrossEntropyLoss`` mong đợi các nhãn được đưa ra trong một định dạng được mã hóa one-hot và sẽ trả về những dự đoán trong định dạng đó."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:606
msgid "Regression"
msgstr "Hồi quy"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:608
msgid "We prepare a simple regression dataset to illustrate the following algorithms."
msgstr "Chúng tôi chuẩn bị một tập dữ liệu hồi quy đơn giản để minh họa cho các thuật toán sau đây."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:651
msgid "Here we restrict to regression with an ``OpflowQNN`` that returns values in :math:`[-1, +1]`. More complex and also multi-dimensional models could be constructed, also based on ``CircuitQNN`` but that exceeds the scope of this tutorial."
msgstr "Tại đây chúng tôi giới hạn cho hồi quy với một ``OpflowQNN`` trả về các giá trị trong khoảng :math:`[-1, +1]`. Các mô hình phức tạp và đa chiều có thể được xây dựng, tuy cũng dựa trên ``CircuitQNN`` nhưng điều đó vượt quá phạm vi kiến thức của hướng dẫn này."

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:782
msgid "Regression with the Variational Quantum Regressor (``VQR``)"
msgstr "Hồi quy với Bộ Biến Hồi quy Lượng tử (``VQR``)"

#: ../../tutorials/02_neural_network_classifier_and_regressor.ipynb:784
msgid "Similar to the ``VQC`` for classification, the ``VQR`` is a special variant of the ``NeuralNetworkRegressor`` with a ``OpflowQNN``. By default it considers the ``L2Loss`` function to minimize the mean squared error between predictions and targets."
msgstr "Tương tự như ``VQC`` cho phân loại, ``VQR`` là một biến thể đặc biệt của ``NeuralNetworkRegressor`` với một ``OpflowQNN``. Theo mặc định, nó xét hàm ``L2Loss`` để giảm thiểu lỗi bình phương trung bình giữa các dự đoán và mục tiêu."

