msgid ""
msgstr ""
"Project-Id-Version: qiskit-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-22 17:47+0000\n"
"PO-Revision-Date: 2021-07-22 18:02\n"
"Last-Translator: \n"
"Language-Team: Vietnamese\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Crowdin-Project: qiskit-docs\n"
"X-Crowdin-Project-ID: 369271\n"
"X-Crowdin-Language: vi\n"
"X-Crowdin-File: /master/machine-learning/docs/locale/en/LC_MESSAGES/tutorials/01_neural_networks.po\n"
"X-Crowdin-File-ID: 9628\n"
"Language: vi_VN\n"

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "This page was generated from `docs/tutorials/01_neural_networks.ipynb`__."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:9
msgid "Quantum Neural Networks"
msgstr "Mạng Neuron Lượng tử"

#: ../../tutorials/01_neural_networks.ipynb:11
msgid "This notebook demonstrates the different generic quantum neural network (QNN) implementations provided in Qiskit Machine Learning. The networks are meant as application-agnostic computational units that can be used for many different use cases. Depending on the application, a particular type of network might more or less suitable and might require to be set up in a particular way. The following different available neural networks will now be discussed in more detail:"
msgstr "Notebook này triển khai các mạng neuron lượng tử cơ bản (QNN) khác nhau được cung cấp trong Trình Học máy Qiskit. Các mạng này được tạo ra để là các đơn vị tính toán không phụ thuộc vào bất kỳ ứng dụng cụ thể nào mà có thể được sử dụng cho nhiều trường hợp ứng dụng khác nhau. Tuỳ thuộc vào ứng dụng, sẽ có mạng phù hợp hơn, hoặc không phù hợp bằng, và có thể yêu cầu sắp đặt theo một cách nhất định. Các mạng neuron có sẵn sau đây sẽ được thảo luận chi tiết hơn:"

#: ../../tutorials/01_neural_networks.ipynb:13
msgid "``NeuralNetwork``: The interface for neural networks."
msgstr "``NeuralNetwork``: Giao diện cho các mạng neuron."

#: ../../tutorials/01_neural_networks.ipynb:14
msgid "``OpflowQNN``: A network based on the evaluation of quantum mechanical observables."
msgstr "``OpflowQNN``: Mạng dựa trên việc đánh giá các đại lượng cơ học lượng tử quan sát được."

#: ../../tutorials/01_neural_networks.ipynb:15
msgid "``TwoLayerQNN``: A special ``OpflowQNN`` implementation for convenience."
msgstr "``TwoLayerQNN``: Cách cài đặt ``OpflowQNN`` đặc biệt nhằm mục đích thuận tiện."

#: ../../tutorials/01_neural_networks.ipynb:16
msgid "``CircuitQNN``: A network based on the samples resulting from measuring a quantum circuit."
msgstr "``CircuitQNN``: Mạng dựa trên các mẫu có được từ các phép đo trên một mạch lượng tử."

#: ../../tutorials/01_neural_networks.ipynb:64
msgid "1. ``NeuralNetwork``"
msgstr "1. ``NeuralNetwork``"

#: ../../tutorials/01_neural_networks.ipynb:66
msgid "The ``NeuralNetwork`` represents the interface for all neural networks available in Qiskit Machine Learning. It exposes a forward and a backward pass taking the data samples and trainable weights as input. A ``NeuralNetwork`` does not contain any training capabilities, these are pushed to the actual algorithms / applications. Thus, a ``NeuralNetwork`` also does not store the values for trainable weights. In the following, different implementations of this interfaces are introduced."
msgstr "``NeuralNetwork`` đại diện cho giao điện của tất cả mạng neuron sẵn có trong Trình Học Máy Qiskit. Nó chỉ ra một đường chuyền tới và lui, lấy các mẫu dữ liệu và các biến có thể huấn luyện được làm đầu vào. Một ``NeuralNetwork`` không có bất kỳ khả năng huấn luyện nào, những trọng trách này được chuyển giao cho chính các thuật toán/ứng dụng. Do đó, một ``NeuralNetwork`` cũng không lưu trữ các giá trị cho các biến có thể huấn luyện được. Mục sau đây sẽ giới thiệu các cách triển khai khác nhau của giao diện này."

#: ../../tutorials/01_neural_networks.ipynb:68
msgid "Suppose a ``NeuralNetwork`` called ``nn``. Then, the ``nn.forward(input, weights)`` pass takes either flat inputs for the data and weights of size ``nn.num_inputs`` and ``nn.num_weights``, respectively. ``NeuralNetwork`` supports batching of inputs and returns batches of output of the corresponding shape."
msgstr "Giả sử một ``NeuralNetwork`` gọi là ``nn``. Sau đó, đường chuyền ``nn.forward(input, weights)`` lấy một trong hai đầu vào, một là cho dữ liệu và và hai là cho trọng lượng của kích thước ``nn.num_inputs`` và ``nn.num_weights``, tương ứng. ``NeuralNetwork`` hỗ trợ đầu dưới dạng các đợt và trả lại các đợt đầu ra với hình dạng tương ứng."

#: ../../tutorials/01_neural_networks.ipynb:80
msgid "2. ``OpflowQNN``"
msgstr "2. ``OpflowQNN``"

#: ../../tutorials/01_neural_networks.ipynb:82
msgid "The ``OpflowQNN`` takes a (parametrized) operator from Qiskit and leverages Qiskit’s gradient framework to provide the backward pass. Such an operator can for instance be an expected value of a quantum mechanical observable with respect to a parametrized quantum state. The Parameters can be used to load classical data as well as represent trainable weights. The ``OpflowQNN`` also allows lists of operators and more complex structures to construct more complex QNNs."
msgstr "``OpflowQNN`` lấy một toán tử (được tham số hoá) từ Qiskit và tận dụng khung gradient của Qiskit để cung cấp đường chuyền ngược lại. Một toán tử như vậy có thể là một giá trị trông đợi của một đại lượng quan sát cơ học lượng tử với một trạng thái lượng tử tham số. Các tham số có thể được sử dụng để tải dữ liệu cổ điển cũng như đại diện cho trọng lượng đào tạo được.``OpflowQNN`` cũng cho phép danh sách các toán tử và các cấu trúc phức tạp hơn để xây dựng những QNN phức tạp hơn."

#: ../../tutorials/01_neural_networks.ipynb:321
msgid "Combining multiple observables in a ``ListOp`` also allows to create more complex QNNs"
msgstr "Kết hợp nhiều đại lượng quan sát được trong một ``ListOp`` cũng cho phép tạo ra nhiều mạng neuron lượng tử (QNN) phức tạp hơn"

#: ../../tutorials/01_neural_networks.ipynb:412
msgid "3. ``TwoLayerQNN``"
msgstr "3. ``TwoLayerQNN``"

#: ../../tutorials/01_neural_networks.ipynb:414
msgid "The ``TwoLayerQNN`` is a special ``OpflowQNN`` on :math:`n` qubits that consists of first a feature map to insert data and second an ansatz that is trained. The default observable is :math:`Z^{\\otimes n}`, i.e., parity."
msgstr "``TwoLayerQNN`` là một ``OpflowQNN`` đặc biệt trên :math:`n` qubit bao gồm một bản đồ tính năng để chèn dữ liệu và một ansatz được đào tạo. Đại lượng quan sát mặc định là :math:`Z^{\\otimes n}`, hay còn gọi là, tính chẵn lẻ."

#: ../../tutorials/01_neural_networks.ipynb:612
msgid "4. ``CircuitQNN``"
msgstr "4. ``CircuitQNN``"

#: ../../tutorials/01_neural_networks.ipynb:614
msgid "The ``CircuitQNN`` is based on a (parametrized) ``QuantumCircuit``. This can take input as well as weight parameters and produces samples from the measurement. The samples can either be interpreted as probabilities of measuring the integer index corresponding to a bitstring or directly as a batch of binary output. In the case of probabilities, gradients can be estimated efficiently and the ``CircuitQNN`` provides a backward pass as well. In case of samples, differentiation is not possible and the backward pass returns ``(None, None)``."
msgstr "``CircuitQNN`` dựa trên một ``QuantumCircuit`` (tham số hóa). Hàm này có thể lấy đầu vào cũng như các thông số trọng lượng và tạo ra các mẫu từ phép đo. Các mẫu có thể được hiểu là xác suất để đo chỉ số của số nguyên tương ứng với một chuỗi bit hoặc trực tiếp như một đợt đầu ra nhị phân. Trong trường hợp xác suất, các gradient có thể được ước tính một cách hiệu quả và `` CircuitQNN`` cung cấp đường truyền ngược. Trong trường hợp các mẫu, sự vi phân là không thể và đường truyền trả lại ``(None, None)``."

#: ../../tutorials/01_neural_networks.ipynb:617
msgid "Further, the ``CircuitQNN`` allows to specify an ``interpret`` function to post-process the samples. This is expected to take a measured integer (from a bitstring) and map it to a new index, i.e. non-negative integer. In this case, the output shape needs to be provided and the probabilities are aggregated accordingly."
msgstr ""

#: ../../tutorials/01_neural_networks.ipynb:619
msgid "A ``CircuitQNN`` can be configured to return sparse as well as dense probability vectors. If no ``interpret`` function is used, the dimension of the probability vector scales exponentially with the number of qubits and a sparse recommendation is usually recommended. In case of an ``interpret`` function it depends on the expected outcome. If, for instance, an index is mapped to the parity of the corresponding bitstring, i.e., to 0 or 1, a dense output makes sense and the result will be a probability vector of length 2."
msgstr "Một ``CircuitQNN`` có thể được thiết lập để trả lại các vectơ xác suất rời rạc cũng như đặc. Nếu không có hàm ``interpret`` nào được sử dụng, kích cỡ của chiều của vectơ xác suất sẽ được nhân lên theo hàm mũ với số lượng qubit và sự rời rạc thường được khuyến khích sử dụng. Trong trường hợp của một hàm ``interpret`` nó phụ thuộc vào kết quả mong đợi. Nếu, ví dụ, một chỉ số được ánh xạ đến tính chẵn lẻ của chuỗi bit tương ứng, tức là đối với 0 hoặc 1, một đầu ra dày đặc có nghĩa và kết quả sẽ là một vectơ xác suất của độ dài 2."

#: ../../tutorials/01_neural_networks.ipynb:662
msgid "4.1 Output: sparse integer probabilities"
msgstr "4.1: Thông tin đầu ra: xác suất số nguyên thưa thớt"

#: ../../tutorials/01_neural_networks.ipynb:761
msgid "4.2 Output: dense parity probabilities"
msgstr "4.2: Thông tin đầu ra: xác suất chẵn lẻ dày đặc"

#: ../../tutorials/01_neural_networks.ipynb:869
msgid "4.3 Output: Samples"
msgstr "4.3 Thông tin đầu ra: Các mẫu"

#: ../../tutorials/01_neural_networks.ipynb:985
msgid "4.4 Output: Parity Samples"
msgstr "4.4: Thông tin đầu ra: Các mẫu chẵn lẻ"

